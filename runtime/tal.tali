; TAL runtime interface
;
; Copyright Greg Morrisett, Neal Glew,
;   January 1999, all rights reserved


	TYPE	<Cstring? :T4 = ^T(0)`Cstring?mem>
	TYPE	<Cstring?mem :Tm>

	TYPE	<string = Exist[s:Sint].^*[S(s)^r,array(s,B1^rw)]>
	TYPE	<arr = fn a:Tm 4 . Exist[s:Sint].^*[S(s)^r,array(s,a)]>

	TYPE	<?exnname = fn c$0:Tm . ^T^rw(c$0)*[junk 4]>
	TYPE	<?exn = Exist[c$0:Tm].^*[(?exnname c$0)^r,c$0]>
	TYPE	<?H = fn s:Ts. code {EAX: ?exn,ESP: sptr s}>

;	TYPE	<cfn = fn args:Ts res:T4 . All[s1:Ts s2:Ts cg:Tt].code{TLA: ^*[cg^rw], EBP: sptr (?H s2 cg)::s2, ESP: sptr (code{TLA: ^*[cg^rw], EAX: res, EBP: sptr (?H s2 cg)::s2, ESP: sptr args#s1#(?H s2 cg)::s2})::args#s1#(?H s2 cg)::s2}>
;	TYPE	<cproc = fn args:Ts . All[s1:Ts s2:Ts cg:Tt].code{TLA: ^*[cg^rw], EBP: sptr (?H s2 cg)::s2, ESP: sptr (code{TLA: ^*[cg^rw], EBP: sptr (?H s2 cg)::s2, ESP: sptr args#s1#(?H s2 cg)::s2})::args#s1#(?H s2 cg)::s2}>

; Fred says: To preserve capabilities across calls these functions must take
; capabilities.
	TYPE	<cfn = fn args:Ts res:T4 . All[a1:T4 r:Ts c:Tcap].code{cap:c, EBP: a1, ESP: sptr (code{cap:c, EAX: res, EBP: a1, ESP: sptr args#r})::args#r}>
	TYPE	<cproc = fn args:Ts . All[a1:T4 a1:T4 r:Ts c:Tcap].code{cap:c, EBP: a1, ESP: sptr (code{cap:c, EBP: a1, ESP: sptr args#r})::args#r}>

; Dan says: This is temporary until we can specify the C calling convention
; from Popcorn code in which case we should use tal.tali proper
	TYPE	<?exnname = fn arg:Tm . ^T^rw(arg)*[junk 4]>
	TYPE	<?exn = Exist[arg:Tm].^*[(?exnname arg)^r,arg]>
	TYPE	<?H = fn s:Ts. code{EAX: ?exn, ESP: sptr s}>
	TYPE	<pop_cfn = fn args:Ts res:T4 . All[s1:Ts s2:Ts].code{EBP: sptr (?H s2)::s2, ESP: sptr (code{EAX: res, EBP: sptr (?H s2)::s2, ESP: sptr args#s1#(?H s2)::s2})::args#s1#(?H s2)::s2}>
	TYPE	<pop_cproc = fn args:Ts . All[s1:Ts s2:Ts].code{EBP: sptr (?H s2)::s2, ESP: sptr (code{EBP: sptr (?H s2)::s2, ESP: sptr args#s1#(?H s2)::s2})::args#s1#(?H s2)::s2}>


;	VAL	_tal_args,<^*[(arr (string^rw))^rw]>
	TYPE	<Tal?Useless :T4>         ; Abstract type cannot be used!
	VAL	_tal_argv, <`Tal?Useless> ; Reserved for runtime use
	VAL     _tal_argc, <`Tal?Useless>

	VAL	_tal_exit,<All[a1:Ts].code{ESP: sptr B4::a1}>

; Obsolete; see stdlib.tali
;	VAL	_string2Cstring,<cfn string::se `Cstring?>
;	VAL	_Cstring2string,<cfn `Cstring?::se string>

;	VAL	_newarray,<All[a:T4].(cfn B4::a::se (arr a^rw))>
;	VAL	_newarray_f,<All[a:T4].(cfn B4::(cfn B4::se a)::se (arr a^rw))>
;	VAL	_newarray1,<cfn B4::se string>
;	VAL	_newarray2,<cfn B4::se (Exist[s:Sint].^*[S(s)^r,array(s,B2^rw)])>
;	VAL	_newarray4,<cfn B4::se (arr B4^rw)>
;	VAL	_newarray8,<cfn B4::se (Exist[s:Sint].^*[S(s)^r,array(s,B8^rw)])>



; EOF: tal.tali
