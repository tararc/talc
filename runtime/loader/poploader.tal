; TAL IMPLEMENTATION poploader
; This file was generated by TALC
	INCLUDE	TAL.INC
	_begin_TAL


	TAL_IMPORT	pop_runtime.tali
	TAL_IMPORT	poploader_i.tali

	TAL_EXPORT	poploader_e.tali

	TYPE	<bogus_option$1 :T4 = ^T[0]>

	CODE

_dyninit_poploader:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
	MOV	EAX,DWORD PTR [_looked_up_old__3_flag]
; LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ^*[va^rw] ?str::(^*[Rep(type ^*[va^rw])])::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
;	MOV	EAX,DWORD PTR [_looked_up_old__7_flag]
	CMP	EAX,1
	JE	iffalse$4
iftrue$3:
	MOV	EAX,sum(<^T[0,1]>,1)
	MOV	DWORD PTR [_looked_up_old__3_flag],EAX
	MOV	EAX,[ESP+20]
	CMP	EAX,0
	JE	iffalse$7
iftrue$6:
	RETN
iffalse$7:
	FALLTHRU	<vb,vc,s1,s2,e1,e2>
tc_fast$9:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
; LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ^*[va^rw] ?str::(^*[Rep(type ^*[va^rw])])::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
ifend$8:
	JMP	ifend$5
iffalse$4:
	FALLTHRU	<vb,vc,s1,s2,e1,e2>
tc_fast$10:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
; LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ^*[va^rw] ?str::(^*[Rep(type ^*[va^rw])])::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
ifend$5:
	MOV	EAX,DWORD PTR [_is_updated__6_flag]
	CMP	EAX,1
	JE	iffalse$12
iftrue$11:
	MOV	EAX,sum(<^T[0,1]>,1)
	MOV	DWORD PTR [_is_updated__6_flag],EAX
	PUSH	DWORD PTR [ESP+12]
	PUSH	DWORD PTR [ESP+20]
	PUSH	string_ref$15
	PUSH	_tr$$16
	PUSH	_Poploader?pop_cast
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	CALL	DWORD PTR tapp([ESP+32],<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)},ESP 4 15 s1,EBP 1,e1,e2>)
	ADD	ESP,36
;	CALL	DWORD PTR tapp([ESP+24],<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)},ESP 3 12 s1,EBP 1,e1,e2>)
;	ADD	ESP,28
	PUSH	DWORD PTR [ESP+12]
	PUSH	DWORD PTR [ESP+20]
	PUSH	string_ref$18
	PUSH	_tr$$19
	PUSH	_Poploader?pop_load
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	CALL	DWORD PTR tapp([ESP+32],<All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)},ESP 4 15 s1,EBP 1,e1,e2>)
	ADD	ESP,36
;	CALL	DWORD PTR tapp([ESP+24],<All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)},ESP 3 12 s1,EBP 1,e1,e2>)
;	ADD	ESP,28
	JMP	ifend$13
iffalse$12:
	FALLTHRU	<vb,vc,s1,s2,e1,e2>
tc_fast$20:
LABELTYPE <All[vb:T4 vc:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})::vb::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv vc::?str::(^*[Rep(type va)])::va::s1 s2 e1 e2)#(?E s2 e2)})::vc::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
; LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ^*[va^rw] ?str::(^*[Rep(type ^*[va^rw])])::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::(^*[Rep(type ^*[va^rw])])::va::s1 s2 e1 e2)#(?E s2 e2)})::(^T[0,1])::s1 s2 e1 e2)#(?E s2 e2)}>
ifend$13:
	RETN
_Poploader?pop_load:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)}>
	SUB	ESP,4
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	CALL	tapp(_tal_load,<va,ESP 3 11 s1,EBP 1,e1,e2>)
	ADD	ESP,24
        NAMEOBJ p, EAX
        CMP     EAX,0
        JNE     iffalse$22
iftrue$21:
	MOV	EAX,string_ref$26
	SUB	ESP,4
	MOV	[ESP],EAX
	MALLOC	mptr$24,12
	POP	DWORD PTR [EAX+8]
	MOV	ECX,string_ref$28
	MOV	[EAX+4],ECX
	MOV	EBX,Core?Failure?exn
	MOV	[EAX],EBX
	FORGETUNIQUE	mptr$24
	COERCE	pack(<?str^r>,forgetname(EAX),<?exn>)
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
iffalse$22:
        COERCE  forgetname(EAX)
	MOV	EAX,[EAX]
        ADD     ESP,4
	RETN
_Poploader?pop_cast:
LABELTYPE <All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)}>
	SUB	ESP,4
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	CALL	tapp(_tal_cast,<vb,va,ESP 3 11 s1,EBP 1,e1,e2>)
	ADD	ESP,24
        NAMEOBJ p, EAX
        CMP     EAX,0
	JNE	iffalse$31
iftrue$30:
	MOV	EAX,string_ref$35
	SUB	ESP,4
	MOV	[ESP],EAX
	MALLOC	mptr$33,12
	POP	DWORD PTR [EAX+8]
	MOV	ECX,string_ref$37
	MOV	[EAX+4],ECX
	MOV	EBX,Core?Failure?exn
	MOV	[EAX],EBX
	FORGETUNIQUE	mptr$33
	COERCE	pack(<?str^r>,forgetname(EAX),<?exn>)
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
iffalse$31:
        COERCE  forgetname(EAX)
	MOV	EAX,[EAX]
	ADD	ESP,4
	RETN
_?NullPointer:
	MOV	EAX,DWORD PTR [_NullPointer_pkt]
	FINIT
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
_?UnionVariant:
	MOV	EAX,DWORD PTR [_UnionVariant_pkt]
	FINIT
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
_?ArrayBounds:
	MOV	EAX,DWORD PTR [_ArrayBounds_pkt]
	FINIT
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX

	DATA

string$36:
LABELTYPE <^*[array(27,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"poploader.pop (22:11-22:37)"
string_ref$37:
COERCE	pack(<27>,?,<?str>)
	DD	27
	DD	string$36
string$34:
LABELTYPE <^*[array(8,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"pop_cast"
string_ref$35:
COERCE	pack(<8>,?,<?str>)
	DD	8
	DD	string$34
string$27:
LABELTYPE <^*[array(27,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"poploader.pop (13:11-13:37)"
string_ref$28:
COERCE	pack(<27>,?,<?str>)
	DD	27
	DD	string$27
string$25:
LABELTYPE <^*[array(8,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"pop_load"
string_ref$26:
COERCE	pack(<8>,?,<?str>)
	DD	8
	DD	string$25
_tr$$19:
LABELTYPE <^*[Rep(type All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})]>
	DREP	TYPE	All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)}
; LABELTYPE <^*[Rep(type ^*[(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})^rw])]>
	DREP	TYPE	^*[(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})^rw]
string$17:
LABELTYPE <^*[array(18,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Poploader?pop_load"
string_ref$18:
COERCE	pack(<18>,?,<?str>)
	DD	18
	DD	string$17
_tr$$16:
LABELTYPE <^*[Rep(type All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})]>
	DREP	TYPE	All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)}
; LABELTYPE <^*[Rep(type ^*[(All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})^rw])]>
	DREP	TYPE	^*[(All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va vb::(^*[Rep(type vb)])::(^*[Rep(type va)])::s1 s2 e1 e2)#(?E s2 e2)})^rw]
string$14:
LABELTYPE <^*[array(18,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Poploader?pop_cast"
string_ref$15:
COERCE	pack(<18>,?,<?str>)
	DD	18
	DD	string$14
_looked_up_old__3_flag:
LABELTYPE <^*[(^T[0,1])^rw]>
	DD	sum(<^T[0,1]>,0)
_is_updated__6_flag:
LABELTYPE <^*[(^T[0,1])^rw]>
	DD	sum(<^T[0,1]>,0)

	_end_TAL
	END
