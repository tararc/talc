; TAL INTERFACE dynpop_i
; This file was generated by TALC
        TYPE    <?arr = fn c:T . Exist[?sz:Sint].^*[S(?sz)^r,(^*[array(?sz,c^rw)])^r]>
        TYPE    <?str = Exist[?sz:Sint].^*[S(?sz)^r,(^*[array(?sz,B1^rw)])^r]>
        TYPE    <?exnname = fn c$0:Tm . ^T^rw(c$0)*[junk 4]>
        TYPE    <?exn = Exist[c$0:Tm].^*[(?exnname c$0)^r,c$0]>
        TYPE    <?H = fn s:Ts e:Tcap . code {cap: e,EAX: ?exn,ESP: sptr s}>
        TYPE    <?E = fn s:Ts e:Tcap . (?H s e)::s>
        TYPE    <?S = fn ?ret:T4 ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EAX: ?ret,EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1@(?E ?s2 ?e2)})::?s1>
        TYPE    <?Sv = fn ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1@(?E ?s2 ?e2)})::?s1>
        TYPE    <?Sf = fn ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (code {cap: &[?e1,?e2],ST0,EBP: sptr (?E ?s2 ?e2),ESP: sptr ?s1@(?E ?s2 ?e2)})::?s1>
        TYPE    <?Ha = fn ?s1:Ts ?s2:Ts ?e1:Tcap ?e2:Tcap . (sptr (?E ?s2 ?e2))::(?s1@(?E ?s2 ?e2))>
TYPE 	<reptyp = fn a:T4.^*[Rep(type a)]>
TYPE 	<interp = fn a:T4. a>

	TYPE	<Core?Opt?mem :T4-!>Tm 4 = fn va:T4 . *[va^rw]>
	TYPE	<Core?Opt? :T4-!>T4 = fn va:T4 . ^T(0)(`Core?Opt?mem va)>
	TYPE	<Cstring?mem :Tm>
	TYPE	<Cstring? :T4 = ^T(0)`Cstring?mem>
	TYPE	<FILE?mem :Tm>
	TYPE	<FILE? :T4 = ^T(0)`FILE?mem>
	TYPE	<Hashtable?table? :T4-!>T4-!>T4>
	TYPE	<List?list?mem :T4-!>Tm 8 = fn va:T4 . *[va^rw,(`List?list? va)^rw]>
	TYPE	<List?list? :T4-!>T4 = fn va:T4 . ^T(0)(`List?list?mem va)>

	VAL	_tal_exit,<All[s1:Ts].code {ESP: sptr B4::s1}>
	VAL	List?Nth?exn,<?exnname B4^r>
	VAL	List?List_mismatch?exn,<?exnname B4^r>
	VAL	List?List_empty?exn,<?exnname B4^r>
	VAL	Core?Not_found?exn,<?exnname B4^r>
	VAL	Core?InvalidArg?exn,<?exnname ?str^r>
	VAL	Core?Impossible?exn,<?exnname ?str^r>
	VAL	Core?FileOpenError?exn,<?exnname ?str^r>
	VAL	Core?FileCloseError?exn,<?exnname B4^r>
	VAL	Core?Failure?exn,<?exnname ?str^r>
	VAL	_Core?file_close,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv `FILE?::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?file_length,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 ?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?file_open,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `FILE? ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?new_string,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str B4::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?print_string,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?strcmp,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Core?strconcat,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S ?str ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Hashtable?create,<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S (`Hashtable?table? va vb) B4::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 va::va::s1 s2 e1 e2)@(?E s2 e2)})::(All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 va::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Hashtable?hash_string,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 ?str::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Hashtable?insert,<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (`Hashtable?table? va vb)::va::vb::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL     _Hashtable?iter,<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv va::vb::s1 s2 e1 e2)@(?E s2 e2)})::(`Hashtable?table? va vb)::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_Hashtable?lookup,<All[va:T4 vb:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S vb (`Hashtable?table? va vb)::va::s1 s2 e1 e2)@(?E s2 e2)}>
	VAL	_f_string_read,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 `FILE?::?str::B4::B4::s1 s2 e1 e2)@(?E s2 e2)}>

