// Stolen from Tempo

#include<core.h>
#include<math.h>
#include "poptiming.h"
open Core;
open Math;

// c is the result array. Specialize on size of c.
// Tempo set n < 50.  
// Tempo specializes on n only.
void cheb_gen(int n)(float func(float),float c[], float xa, float xb) {
  *(float) f[] = new_array(n+1,^(0.0f));
  
  for(int i=0;i<=n;i++) {
    f[i] = ^(0.0f);
  }

  return codegen(void cheb(float func(float), float c[], float xa, float xb) {
    float xm, xp, sm = 0.0;

    xp = (xb + xa) / 2;
    xm = (xb - xa) / 2;
    
    cut {
      for(int k = 1; k <= n; k++) {
	splice {
	  fill(f[k]).1 = func(xp + 
			      xm * fill(^((:float)cos(pi * (k - 0.5) / n))).1);
	}
      }
      for(int j = 0; j <= n-1; j++) {
	splice { sm = 0.0; }
	for(int k = 1; k <= n; k++) {
	  _ v = (:float)cos(pi * (:float)j * ((:float)k - 0.5) / (:float)n);
	  if(v != 0.0) {
	    if(v == 1.0) splice { sm += fill(f[k]).1; }
	    else if( v == -1.0) splice { sm -= fill(f[k]).1; }
	    else splice {
	      sm += fill(f[k]).1 * fill(^(v)).1;
	    }
	  }
	}
	splice{
	  c[fill(j)] = fill(^((:float)(2.0 / (:float)n))).1 * sm;
	}
      }
    } 
  });
}

void pop_main() {

  string s[] = std_args();
  
  if(size(s)!=2) {
    printf("usage: %s <length>\n",s[0]);
    return;
  }

  int len = int_of_string(s[1]);

  if(len<=0 || len >= 100) {
    printf("Invalid length %d\n",len);
    return;
  }

  float c[] = new_array_float(len);

  MAIN_TEST("cheb",COMPILER,RTCG_KIND,s[1],_ cheb = cheb_gen(len),cheb(mycos,c,1.0,3.0));

#ifdef DEBUG
  for(int i=0;i<len;i++) {
    printf("%g ",c[i]);
  }
  printf("\n");
#endif

}

static float mycos(float x) {
  return cos(x);
}
