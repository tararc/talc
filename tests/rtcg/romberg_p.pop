/* Copied from tempo */

#include<core.h>
#include<math.h>
#include"poptiming.h"

open Core;
open Math;

// This integrates the function f from a to b with 2^(2M) subdivisions
float romberg(float f(float), float a, float b, int M)
{
  int n, m, i;
  float h, s;
  float r0[] = new_array_float(M+1);
  float r1[] = new_array_float(M+1);

  h = b - a;
  r0[0] =  (f(a) + f(b)) * h / 2.0;

  for (n = 1; n <= M; n++) {
    h = h / 2.0;
    s = 0.0;

    _ lim = 1 << n-1;
     for (i = 1; i <= lim; i++) { 
       s = s + f(a + (:float)(2.0 * i - 1) * h);
     }

    r1[0] = r0[0]/2.0 + h * s;

    for(m = 1; m <= n; m++) {
      _ p = (1 << (2*m)) - 1;
      r1[m] = r1[m-1] + 
	 (:float)(1.0/p) * (r1[m-1] - r0[m-1]);
    }

    _ tmp = r0;
    r0 = r1;
    r1 = tmp;
  }

  return r0[M];
}

float sqr(float x){
  return x*x;
}

float cube(float x){
  return x*x*x;
}

void pop_main() {
  string s[] = std_args();

  if(size(s) != 2) {
    printf("usage: %s <precision>\n",s[0]);
    return;
  }

  _ prec = int_of_string(s[1]);

  if(prec<=0 || prec >=16) {
    printf("Precision %d is not between 1 and 15\n",prec);
    return;
  }

  MAIN_TEST("romberg",COMPILER,PLAIN_KIND,s[1],0,romberg(cube,0.0,1.0,prec));

#ifdef DEBUG
  _ result = romberg(cube,0.0,1.0,prec);
  printf("integral(x**3,0,1) = %g \n",result);
#endif
}


