// These functions test stdcall and tailcall elimination.
// Don't bother running this file, it does nothing useful.

#include "core.h"

open Core;

int f __stdcall(int n) {
  return fact(n,n);
}

int g(int n) {
  return fact(n,n);
}

int h __stdcall(int n, int m, int k) {

  // Lots of variables to force spilling.
  int x0=0,x1=1,x2=2,x3=3,x4=4,x5=5,x6=6,x7=7,x8=8;

  x0 = x1 + x2 + x4 + x5 + x6 + x7 + x8;
  x1 = m;
  x2 = n + x0;
  x8 = k;
  x3 = x8 * x2 + x1;
  x4 = x5 + x6 + x7;
  return h(x3,x4,x2);
}

// This doesn't turn into a tail call because of inlining!
// Ha Ha!
int i __stdcall() {

  return i();

}

float j __stdcall(float n, float m) {

  float k = n + m;
  float l = n * m;

  return j(k,l);
}


float k __stdcall(float n,int m) {
  int x0 = 0, x1 = m, x2 = 2 * m, x3 = 3*m, x4 = 4*m, x5 = 5*m;

  return k(n,x0 + x1 + x2 + x3 + x4 + x5);
}


int fact __stdcall(int n, int accum) {
  if(n <= 1) return accum;
  else return fact(n-1,n*accum);
}

int pop_main() {

  printf("fact(3) = %d\n",fact(3,1));

  return 1;
}
