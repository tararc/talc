#include "core.h"

/* tests tuple and read-only tuple operations */
struct foo {
  const %(int) x;
}

struct goo {
  const *(int) x;
}

struct hoo {
  %(int) x;
}

/* should get shadowed by defs below */
%(*(int)) f = ^(^(1));

void pop_main() {
  *(int) x = ^(1);
  %(int) y = ^(2);
  foo f = ^foo((: %(int))x);
  foo f2 = ^foo(x);
  foo f3 = ^foo(y);
  goo g = ^goo(x);
  g.x.1 = 3;
/* not allowed
  f.x.1 = 3;
*/
  printf("x.1=%d, y.1=%d, f.x.1=%d, f2.x.1=%d, f3.x.1=%d, g.x.1=%d\n",
	 x.1, y.1, f.x.1, f2.x.1, f3.x.1, g.x.1);
  foo();
  bar();
  return;
}

/* test coercions and type applications under tuples */
a   id<a>(a   x) { return x; }
int inc  (int x) { return x+1; }

void foo() {
  %(a <a>(a))  f = ^(id);
  %(int (int)) g = f@<int>;
/* not allowed
  g.1 = inc;
*/
  *(int) x = ^(43);
  printf("foo:f.1(x).1 = %d\n",f.1(x).1);
  return;
}

?struct <a,b>tree {
  a key;
  b data;
  <a,b>tree left;
  <a,b>tree right;
}
  
bool mod <a,b>(%(int (a,a)) f, a v,<a,b>tree t) {
  if (f.1(v,t.key) == 0)
    return true;
  else
    return false;
}

%(bool <a,b>(%(int (a,a)),a,<a,b>tree)) mod2 =
  (:%(bool <a,b>(%(int (a,a)),a,<a,b>tree)))^(&mod);

/* automatic coercion */
%(bool <a,b>(%(int (a,a)),a,<a,b>tree)) mod3 = ^(&mod);

void bar() {
  <int,int>tree t = ^tree(1,1,null,null);
  int f(int,int) = 
    fun int _(int x, int y) {
      return x-y;
    };
  printf("mod(f,1,t)=%s, mod2.1(f,1,t)=%s\n",
	 mod(^(f),1,t) ? "true" : "false", 
	 mod2.1(^(f),1,t) ? "true" : "false");
}
