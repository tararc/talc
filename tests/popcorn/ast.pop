#include "core.h"
#pragma PIL

open Core;

struct app_t {
  exp_t function;
  exp_t arg;
}

struct abs_t {
  string var;
  exp_t body;
}

union exp_t {
  string var;
  app_t app;
  abs_t abs;
}

exp_t var(string x) {
  return(new exp_t.var(x));
}

exp_t app(exp_t f, exp_t x) {
  return(new exp_t.app(new app_t(f,x)));
}

exp_t abs(string x, exp_t b) {
  return(new exp_t.abs(new abs_t(x,b)));
}
    
exp_t foo() {
  exp_t x_exp = var("x"), 
        app_exp = app(x_exp,x_exp),
        abs_exp = abs("x",app_exp);

  return(abs_exp);
}

void printExp(exp_t e) {
  switch e {
     case var(x) : 
         print_string(x);
     case app(a) : 
	 print_string("(");
	 printExp(a.function);
	 print_string(" ");
	 printExp(a.arg);
	 print_string(")");
     case abs(a) :
	 print_string("fn ");
	 print_string(a.var);
	 print_string(" => ");
	 printExp(a.body);
  }
  return;
}

void pop_main()
{
  exp_t test = 
    app(abs("x",app(var("x"),var("x"))),abs("x",app(var("x"),var("x"))));

  printExp(test);
  print_string("\n");

  return;
}
