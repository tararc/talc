#include "bench.h"
#include "opcodes.h"
#include "core.h"

struct inst
{
  int opcode;
  int val;
}

extern int int_time();
extern void print_time(int, int, int);

int p_mem[] = {0, 1, 2, 3};              /* MEM_SIZE */
int p_stack[] = {0,0,0,0,0,0,0,0,0,0};   /* STACK_SIZE */
int p_prg_size;

extern void pop_interpret(inst prg[]);
extern void pop_interpret_gen(inst prg[])();
extern void pop_interpret_init();

/* Popcorn  */
void test_pop(int bench, inst pprog[], int iterations)
{
  int start_time, end_time, i;
  
  /* determine length of program here */
  for(p_prg_size = 0 ; pprog[p_prg_size].opcode != END ; p_prg_size++)
    ;
  printf("Program size: %d\n", p_prg_size);
  
  printf("[Popcorn]\n");
  init_p_state();				   /* initialize memory */
  if (bench == TEST) {

    dump_p_mem();				   /* verify memory contents */
    pop_interpret(pprog);
    dump_p_mem();

  } else {

    start_time = int_time();
    for( i = 0; i < iterations; i++)
      pop_interpret(pprog);	           /* execute "normal" function */
    end_time = int_time();
    print_time(start_time, end_time, 1);

  }
  printf("\n");   
}

/* Cyclone */
void test_cyclone(int bench, inst pprog[], int iterations)
{
  int start_time, end_time, i;
  void pop_interpret_1() = pop_interpret_init;
  
  /* determine length of program here */
  for(p_prg_size = 0 ; pprog[p_prg_size].opcode != END ; p_prg_size++)
    ;
  printf("Program size: %d\n", p_prg_size);

  printf("[Cyclone]\n");

  if (bench == TEST) {

    pop_interpret_1 = pop_interpret_gen(pprog); /* specialize function */
    init_p_state();			        /* initialize memory  */
    dump_p_mem();				        /* verify memory contents */
    pop_interpret_1();
    dump_p_mem();

  } else {
    
    start_time = int_time();
    for( i = 0; i < iterations / 10; i++)
      pop_interpret_1 = pop_interpret_gen(pprog);
    end_time = int_time();
    printf("Code generation (NOTE: * 10 !!!):\n");
    print_time(start_time, end_time, 1);
    
    start_time = int_time();
    for( i = 0; i < iterations; i++)
      pop_interpret_1();	           /* execute specialized function */
    end_time = int_time();
    printf("Code execution:\n");
    print_time(start_time, end_time, 1);
  }
  printf("\n"); 
}

/* initialize state */
void init_p_state()
{
  p_mem = {0, 10, 20, 30};
  p_stack = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}

/* print out memory contents */
void dump_p_mem()
{
  int i;

  for(i = 0 ; i < /* MEM_SIZE */4 ; i++) {
    printf("Memory: %d ", p_mem[i]);
  }
  printf("\n");
}
 
