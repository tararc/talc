/* TEMPO Version 1.190, 11/26/97, Copyright (c) IRISA/INRIA-Universite de Rennes */

#include "core.h"

struct inst { int opcode;
              int val; }
extern int p_mem[];
extern int p_stack[];
extern int p_prg_size;

void pop_interpret_init() { return; }

void pop_interpret_gen(inst prg [], int pc, int sp)()
{
  return
    codegen(void interpret_1_spec() {
      cut 
	if (pc < p_prg_size)
	  splice 
	{
	  cut 
	    if ((prg[pc]).opcode == 0)
	      splice 
	    {
	      cut 
		sp = sp + 1;
	      {
		cut 
		  p_stack[sp] = (prg[pc]).val;
		
		p_stack[fill(sp)] = fill((prg[pc]).val);
	      }
	      cut 
		pc = pc + 1;
	      
	      fill(pop_interpret_gen(prg, pc, sp))();
	    }
	    else
	      splice 
	    {
	      cut 
		if ((prg[pc]).opcode == 1)
		  splice 
		{
		  cut 
		    sp = sp - 1;
		  
		  cut 
		    pc = pc + 1;
		  
		  fill(pop_interpret_gen(prg, pc, sp))();
		}
		else
		  splice 
		{
		  cut 
		    if ((prg[pc]).opcode == 2)
		      splice 
		    {
		      p_stack[fill(sp - 1)] = p_stack[fill(sp)] + p_stack[fill(sp - 1)];
		      cut 
			sp = sp - 1;
		      
		      cut 
			pc = pc + 1;
		      
		      fill(pop_interpret_gen(prg, pc, sp))();
		    }
		    else
		      splice 
		    {
		      cut 
			if ((prg[pc]).opcode == 3)
			  splice 
			{
			  p_stack[fill(sp - 1)] = p_stack[fill(sp - 1)] - p_stack[fill(sp)];
			  cut 
			    sp = sp - 1;
			  
			  cut 
			    pc = pc + 1;
			  
			  fill(pop_interpret_gen(prg, pc, sp))();
			}
			else
			  splice 
			{
			  cut 
			    if ((prg[pc]).opcode == 4)
			      splice 
			    {
			      p_stack[fill(sp - 1)] = p_stack[fill(sp)] * p_stack[fill(sp - 1)];
			      cut 
				sp = sp - 1;
			      
			      cut 
				pc = pc + 1;
			      
			      fill(pop_interpret_gen(prg, pc, sp))();
			    }
			  
			    else
			      splice 
			    {
			      cut 
				if ((prg[pc]).opcode == 5)
				  splice 
				{
				  p_stack[fill(sp)] = p_mem[p_stack[fill(sp)]];
				  cut 
				    pc = pc + 1;
				  
				  fill(pop_interpret_gen(prg, pc, sp))();
				}
			      
				else
				  splice 
				{
				  cut 
				    if ((prg[pc]).opcode == 6)
				      splice 
				    {
				      p_mem[p_stack[fill(sp)]] = p_stack[fill(sp - 1)];
				      cut 
					sp = sp - 2;
				      
				      cut 
					pc = pc + 1;
				      
				      fill(pop_interpret_gen(prg, pc, sp))();
				    }
				    else
				      splice 
				    {
				      cut 
					if ((prg[pc]).opcode == 7)
					  splice 
					{
					  cut 
					    pc = (prg[pc]).val;
					  
					  fill(pop_interpret_gen(prg, pc, sp))();
					}
				      
					else
					  splice 
					{
					  cut 
					    if ((prg[pc]).opcode == 8)
					      splice 
					    {
					      if (p_stack[fill(sp)] != 0)
						{
						  cut 
						    pc = (prg[pc]).val;
						  
						  cut 
						    sp = sp - 1;
						  
						  fill(pop_interpret_gen(prg, pc, sp))();
						}
					      else
						{
						  cut 
						    pc = pc + 1;
						  
						  cut 
						    sp = sp - 1;
						  
						  /* BUG */
						  printf("ERROR: need recursive call");
						  /* fill(pop_interpret_gen(prg, pc, sp))(); */
						}
					      4;
					    }
					    else
					      splice 
					    {
					      cut 
						if ((prg[pc]).opcode == 9)
						  splice 
						{

						  /* BUG, what's up w/ reg EAX ? */
						  /* p_stack[fill(sp - 1)] = (p_stack[fill(sp)] == p_stack[fill(sp - 1)]) ? 1 : 0; */
						  if (p_stack[fill(sp)] == p_stack[fill(sp - 1)])
						    p_stack[fill(sp - 1)] = 1;
						  else
						    p_stack[fill(sp - 1)] = 0;
						  
						  cut 
						    sp = sp - 1;
						  
						  cut 
						    pc = pc + 1;
						  
						  fill(pop_interpret_gen(prg, pc, sp))();
						}
					      
						else
						  splice 
						{
						  printf("\n ?i -> %d at %d\n",
							 fill((prg[pc]).opcode),
							 fill(pc));
						}
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
      	} 
      return;
    }
	    );
}
