/* TEMPO Version 1.190, 11/26/97, Copyright (c) IRISA/INRIA-Universite de Rennes */

#include "opcodes.h"
#include "core.h"

struct inst {
  int opcode;
  int val;
}

extern int p_mem[];
extern int p_stack[];
extern int p_prg_size;

void pop_interpret(inst prg [], int pc, int sp)
{
  if (pc < p_prg_size)
    {
      if ((prg[pc]).opcode == 0)
	{
	  sp = sp + 1;
	  p_stack[sp] = (prg[pc]).val;
	  pc = pc + 1;
	  pop_interpret/*0*/(prg, pc, sp);
	}
      else
	{
	  if ((prg[pc]).opcode == 1)
	    {
	      sp = sp - 1;
	      pc = pc + 1;
	      pop_interpret/*0*/(prg, pc, sp);
	    }
	  else
	    {
	      if ((prg[pc]).opcode == 2)
		{
		  p_stack[sp - 1] = p_stack[sp] + p_stack[sp - 1];
		  sp = sp - 1;
		  pc = pc + 1;
		  pop_interpret/*0*/(prg, pc, sp);
		}
	      else
		{
		  if ((prg[pc]).opcode == 3)
		    {
		      p_stack[sp - 1] = p_stack[sp - 1] - p_stack[sp];
		      sp = sp - 1;
		      pc = pc + 1;
		      pop_interpret/*0*/(prg, pc, sp);
		    }
		  else
		    {
		      if ((prg[pc]).opcode == 4)
			{
			  p_stack[sp - 1] = p_stack[sp] * p_stack[sp - 1];
			  sp = sp - 1;
			  pc = pc + 1;
			  pop_interpret/*0*/(prg, pc, sp);
			}
		      else
			{
			  if ((prg[pc]).opcode == 5)
			    {
			      p_stack[sp] = p_mem[p_stack[sp]];
			      pc = pc + 1;
			      pop_interpret/*0*/(prg, pc, sp);
			    }
			  else
			    {
			      if ((prg[pc]).opcode == 6)
				{
				  p_mem[p_stack[sp]] = p_stack[sp - 1];
				  sp = sp - 2;
				  pc = pc + 1;
				  pop_interpret/*0*/(prg, pc, sp);
				}
			      else
				{
				  if ((prg[pc]).opcode == 7)
				    {
				      pc = (prg[pc]).val;
				      pop_interpret/*0*/(prg, pc, sp);
				    }
				  else
				    {
				      if ((prg[pc]).opcode == 8)
					{
					  if (p_stack[sp] != 0)
					    {
					      pc = (prg[pc]).val;
					      sp = sp - 1;
					      pop_interpret/*0*/(prg, pc, sp);
					    }
					  else
					    {
					      pc = pc + 1;
					      sp = sp - 1;
					      pop_interpret/*0*/(prg, pc, sp);
					    }
					}
				      else
					{
					  if ((prg[pc]).opcode == 9)
					    {
					      p_stack[sp - 1] = (p_stack[sp] == p_stack[sp - 1]) ? 1 : 0;
					      sp = sp - 1;
					      pc = pc + 1;
					      pop_interpret/*0*/(prg, pc, sp);
					    }
					  else
					    {
					      printf("\n ??? instr -> %d at %d\n",
						     (prg[pc]).opcode, pc);
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
  return;
}
