fun ret (source) =
  OnRemote (|print|("Success"), source, getRB (), defaultRoute)

svc checksum : 'a chunk -> unit chunk
svc generateKey : void -> key
svc sendAck : ('a chunk,key,int) -> unit chunk

fun checksum_em (c,x:int*host) =
  let val d = checksum(c)
      val seq = generateKey()
      val e = sendAck(d,seq,(#1 x)/2) in
    (RetransOnRemote([e],seq,3,#2 x,(#1 x),defaultRoute);x)
  end 

(* Do ping such that
   - the packet is fragmented, 
   - each fragment is checksummed, 
   - an ack is sent back for each fragment *)

svc fragment : ('a chunk,int) -> unit chunk list
svc checksum_overhead : int
svc reliable_overhead : int

fun ping(source, dest) =
  let val c = |ret|(source)
      val p = defaultRoute(dest)
      val cs = fragment(c,getMTU(snd p)-checksum_overhead-reliable_overhead)
      val len = length(cs) in
    (foldr(checksum_em,cs,((getRB()/3)/len,dest));
     ())
  end
