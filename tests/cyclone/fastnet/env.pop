#include "planbase.h"
#include "absyn.h"

open List;

/**************************************************************************
 * environment and definition list functions
 *************************************************************************/

prefix Env {
  open Env;

struct environ
{
  string id;
  binding b;
}

union binding {
  value  Varbind;
  string Exnbind;
  *(<formal> list, tipe, exp, <environ> list) Funbind;
  string Svcbind;
}

  /* add a new identifier id with binding bind to the state */
  /* environ add(string id, binding b, environ env) { */
  <environ> list add(string id, binding b, <environ> list env) {
    /* return(^environ(id, b, env)); */
    return(^list(^environ(id, b), env));
  }

  /* environ add_actuals(<*(string, tipe)> list pl, */
  <environ> list add_actuals(<formal> list pl,
                      <value> list vl, <environ> list env)
    {
      if (pl == null) {
	if (vl == null)
	  return(env);
	else {
	  raise(^InternalError("(add_actuals): more values than formals"));
	}
      } else {
	if (vl == null) {
	  raise(^InternalError("(add_actuals): more formals than values"));
	  return(env);
	} else {
	  <environ> list new_env =
	     ^list(^environ((pl.hd).id, ^binding.Varbind(vl.hd)), env);

	  return(add_actuals(pl.tl, vl.tl, new_env));
	}
      }
    }
  
  binding lookup(string id,
		 <environ> list env,
		 <*(string, value (<value> list vl, pop_pkt ppkt))>
		 list svc_env)
    {
      <environ> list plan_tmp = env;

      try {
	assoc_cmp(Core::strcmp, svc_env, id);
	return ^binding.Svcbind(id);
      }
      handle y
	switch y {
	case Core::Not_found: 

	  plan_tmp = env;
	  while (plan_tmp != null) {
	    if (Core::strcmp(plan_tmp.hd.id, id) == 0)
	      return(plan_tmp.hd.b);
	    plan_tmp = plan_tmp.tl;
	  }
	  printf("\n(Env::lookup)");
	  print(env);
	  raise(^InternalError(Core::strconcat("(lookup): binding not found for: ", id)));
	}
    }

  /* void print(environ env) */
  void print(<environ> list env)
    {
      printf(" E<");
      while (env != null) {
	printf("(%s ", env.hd.id);
	switch (env.hd.b) {
	case Varbind(v): printf("Var ...");
	case Exnbind(e): printf("Exn ...");
	case Funbind(f): printf("Fun ...");
	case Svcbind(s): printf("Svc ...");
	}
	printf(")");
	env = env.tl;
      }
      printf(">\n");
      return;
    }
}  
