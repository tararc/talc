#include "core.h"		/* printf(), file_open(), etc. */
#include "string.h"		/* Cyclone strings */
#include "tal_sockets.h"	/* Cyclone sockets */

#include "planbase.h"
#include "absyn.h"
#include "network.h"
#include "parse.h"

extern string std_args()[];
<FILE> List::list wait_fds;  /* File descriptors waited on (by select) */
<FILE> List::list ready_fds; /* File descriptors (read) ready to process */

FILE server_sock;
extern socket_domain sock_dom;
extern socket_type   sock_typ;
extern sockaddr      sock_add;
extern void test_spf();

/* Process ready file descriptors */
/*
void proc_ready_fds(FILE fd)
{
  string s = sock_read(server_sock);
  return;
}
*/

void go()
{
  string argv[] = std_args();	/* command line arguments */

  string s = Core::new_string(MAX_PLANPROG);
  string str = Core::new_string(MAX_PLANPROG);
  FILE fp;
  int c, i, port;
  string filename;
  string srcAddr = "";
  *(string, int) host_port;

  /***************************************************************************
   * command line processing
   *
   *   <-ip port>, where 1024 <= port <= 5000
   **************************************************************************/

  port = 4444;
  
  /* 1 or 3 arguments */
  if (size(argv) != 2)  {
    printf("%s: usage: packet_file (takes 1 arguments)\n", argv[0]);
    return;
  }
  
  filename = argv[1];
  /* 3 arguments */
  /*
  if (size(argv) != 2)  {
    if (Core::strcmp(argv[1], "-ip") != 0) {
      printf("%s: usage: <-ip port>  (flag must be -ip)\n", argv[0]);
      return;
    }
    srcAddr = argv[2];
    host_port = parse_hostname(srcAddr);
    if ((host_port.2 < 3000) || (host_port.2 > 8000)) {
      printf("%s: usage: <-ip host:port>, where 3000 <= port <= 8000\n",
	     argv[0]);
      return;
    }
    filename = argv[3];
  } else {
    filename = argv[1];
  }
  */
  
  /***************************************************************************
   * open file
   ***************************************************************************/

  *(bool,<def> List::list) prog;
  string_file parse_str;
  pop_pkt pkt;
  
  /* open file and read packet string (program + entry point) */
  fp = Core::file_open(filename, "r");
  
  /***************************************************************************
   * parse plan file
   ***************************************************************************/
  
  for(i = 0; (c = fgetc(fp)) != EOF; i++)
    s[i] = c;
  s[i] = EOF;
  s = String::substring(s, 0, i+1);
  
  parse_str = ^string_file(0, s);
  pkt = str_to_pop_pkt(parse_str);
  str = pop_pkt_to_str(^pop_pkt(pkt.program, pkt.fn_to_exec, pkt.actuals,
				"inject:0000", pkt.evalAddr, pkt.rb));
  
  /***************************************************************************
   * connect w/ socket
   ***************************************************************************/
  
  FILE fd = tal_socket(^socket_domain.PF_INET, ^socket_type.SOCK_DGRAM, 0);
  *(string, int) hop = parse_hostname(pkt.evalAddr);
  sockaddr sa = ^sockaddr.ADDR_INET(^(tal_gethostbyname(hop.1), hop.2));
  
  /* send packet string to server */
  tal_sendto(fd, str, sa);
}

void pop_main()
{
  try {
    go();
  } handle e
      switch e {
      case InternalError(s): printf("Error: %s\n", s);
      case PlanExcept(s): printf("(inject): PlanExcept Error");
      case Core::FileOpenError(fname):
	printf("(inject): File not found: %s", fname);
      default:            printf("(inject): Error Internal 6");
      }
}
