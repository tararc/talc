val a:(port*chunk*dev*exn*blob*key) = 0
val b:(int*host*bool*string*char) = 0
val c:(int) list = 0
fun main():unit = 1
1
done.
val a:unit = ()
val b:unit = (123 + 456)
val c:unit = 'c'
val d:unit = "this"
val e:unit = true
val f:unit = []
val g:unit = (1 :: (2 :: (3 :: [])))
fun main():unit = (a,b,c,d,e,f,g)
((),579,'c',"this",true,[],[1;2;3])
done.
fun main():unit = ((),123,'c',"this",true,[],(1 :: (2 :: (3 :: []))))
((),123,'c',"this",true,[],[1;2;3])
done.
fun a():unit = ((~ 1),(not true))
fun b():unit = (1 :: (2 :: []))
fun c():unit = ((hd (1 :: (2 :: (3 :: [])))),(tl (1 :: (2 :: (3 :: [])))))
fun d():unit = ((fst (1,2,3)),(snd (1,2,3)),(#0 (1,2,3)),(#2 (1,2,3)))
fun e():unit = ((noti 0),(noti 1),(noti 123))
fun f():unit = (explode "this")
fun g():unit = (implode ('t' :: ('h' :: ('i' :: ('s' :: [])))))
fun h():unit = (implode ('t' :: ('h' :: ('i' :: ('s' :: [])))))
fun i():unit = (ord 'A')
fun j():unit = (chr 65)
fun main():unit = (a(),b(),c(),d(),e(),f(),g(),h(),i(),j())
((-1,false),[1;2],(1,[2;3]),(1,(2,3),1,3),(1,0,0),['t';'h';'i';'s'],"this","this",65,'A')
done.
fun a():unit = ((8 + 4),(8 - 4),(8 * 4),(8 / 4),(8 % 5))
fun b():unit = ((1 < 2),(2 <= 1),(4 > 4),(4 >= 4),(1 = 1),(1 <> 1))
fun c():unit = (true,false,(true and false),(true or false))
fun d():unit = ([],(1 :: []),(1 :: (2 :: (3 :: []))),("this" ^ "that"))
fun e():unit = ((6 << 2),(6 >> 1),(10 xori 3),(10 andi 3),(10 ori 3))
fun main():unit = (a(),b(),c(),d(),e())
((12,4,32,2,3),(true,false,false,true,true,false),(true,false,false,true),([],[1],[1;2;3],"thisthat"),(24,3,9,2,11))
done.
fun ack(count:int):unit = (print(count);print(" : ");print(count))
fun f(i:int,j:int):unit = (if (i < j) then (1,i,j) else (ack(1234);(j + j)))
fun g():unit = let val x:((int*int)*int) = ((1,2),4)
val m:(int) list = (1 :: (2 :: (3 :: [])))
in ((~ (fst (fst x))),((hd m),((tl m),((snd x),(not true))))) end
fun main():unit = (f(2,3),f(3,2),g())
1234 : 1234((1,2,3),4,(-1,(1,([2;3],((4),false)))))
done.
val hst1:unit = "cyclone:4000"
val hst2:unit = "cyclone:4001"
fun rb():unit = getRB()
fun hsts1():unit = (thisHostIs(hst1),thisHostIs(hst2))
fun hsts2():unit = (getSrcDev(),thisHost(getSrcDev()))
fun rt():unit = defaultRoute("cyclone:4002")
fun mems():unit = (member(1,(1 :: (2 :: (3 :: [])))),member(2,(1 :: (2 :: (3 :: [])))),member(3,(1 :: (2 :: (3 :: [])))),member(4,(1 :: (2 :: (3 :: [])))))
fun rems():unit = (remove(1,(1 :: (2 :: (3 :: [])))),remove(2,(1 :: (2 :: (3 :: [])))),remove(3,(1 :: (2 :: (3 :: [])))),remove(4,(1 :: (2 :: (3 :: [])))))
fun lens():unit = (length([]),length((1 :: (2 :: (3 :: [])))),length((1 :: (2 :: (3 :: (4 :: (5 :: (6 :: (7 :: [])))))))))
fun main():unit = (rb(),hsts1(),hsts2(),rt(),print("hello world
"),getDevs(),mems(),rems(),lens())
hello world
(0,(true,false),("cyclone:4001",["cyclone:4000"]),("cyclone:4001","*DEV*"),(),["cyclone:4001"],(true,true,true,false),([2;3],[1;3],[1;2],[1;2;3]),(0,3,7))
done.
fun doit():unit = (print(thisHost());print(" says : Hello world!
"))
[cyclone:4000] says : Hello world!
()
done.
fun test1(str1:string,str2:string):unit = ((str1 ^ str2) ^ "bub")
fun main():unit = test1("this","that")
"thisthatbub"
done.
fun f():unit = (|g| ();|h| ();())
fun g():unit = ()
fun h():unit = ()
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun h():unit = ()
fun g():unit = ()
fun f():unit = (|g| ();|h| ();())
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun f():unit = (|g| ();())
fun g():unit = (|h| ();())
fun h():unit = ()
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun h():unit = ()
fun g():unit = (|h| ();())
fun f():unit = (|g| ();())
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun f():unit = (|h| ();())
fun g():unit = ()
fun h():unit = (|g| ();())
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun h():unit = (|g| ();())
fun g():unit = ()
fun f():unit = (|h| ();())
fun test1():unit = (|f| () :: (|g| () :: (|h| () :: [])))
()
done.
fun test1():unit = (1 :: (2 :: (3 :: [])))
fun test2():unit = (('a' :: ('b' :: ('c' :: []))) :: ([] :: []))
fun main():unit = (test1(),test2())
([1;2;3],[['a';'b';'c'];[]])
done.
fun test1():unit = let val b:unit = false
val i:unit = 1
val c:unit = '5'
val s:unit = "hello"
val x:unit = ((1,2),4)
val m:unit = (1 :: (2 :: (3 :: [])))
exception Head
in (print(b);print(i);print(c);print(s);print(x);print(m);print("
")) end
false15hello((1,2),4)[1;2;3]
()
done.
fun cons(i:unit,j:unit):unit = let val name:unit = (hd thisHost())
in ((name,i) :: j) end
fun test1(v:unit):unit = foldr(cons,v,[])
fun sub(i:unit,j:unit):unit = (i - j)
fun test2():unit = let val l:unit = (4 :: (3 :: (2 :: (1 :: []))))
in foldr(sub,l,0) end
fun main():unit = (foldr(sub,(1 :: []),0),test2())
(1,2)
done.
fun test1():unit = let val it:unit = 1
fun moo():unit = it
val it:unit = 2
in let fun cow():unit = 1
in (moo(),(cow() + it)) end end
fun test2():int = moo()
(1,3)
done.
fun test1():int = n()
fun n():int = 7
fun odd(i:unit):bool = (if (i = 1) then true else even((i - 1)))
fun even(i:unit):bool = (if (i = 0) then true else odd((i - 1)))

(Env::lookup) E<>
ERROR (lookup): binding not found for: n
done.
fun test1():unit = let val x:unit = ((1,2),4)
val m:unit = (1 :: (2 :: (3 :: [])))
in ((~ (fst (fst x))),((hd m),((tl m),((snd x),(not true))))) end
(-1,(1,([2;3],((4),false))))
done.
