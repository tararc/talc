/* core.pop */
open Core;

#include "absyn.h" 
#include "misc.h"
#include "parse.h"


/******************************************************************************
 * environment and definition list functions
 *****************************************************************************/

union binding {
  value  Varbind;
  string Exnbind;
  *(<*(string, tipe)> List::list, tipe, exp, environ) Funbind;
  string Svcbind;
}

?struct environ {
  string id;
  binding bind;
  environ next;
}

prefix Env {
  open Env;

  <*(string, value (<value> List::list vl, pop_pkt ppkt))>
     List::list service_env;

  /* add a new identifier id with binding bind to the state */
  environ add(string id, binding b, environ env) {
    return(^environ(id, b, env));
  }

  environ add_actuals(<*(string, tipe)> List::list pl,
                      <value> List::list vl, environ env)
    {
      if (pl == null) {
	if (vl == null)
	  return(env);
	else {
	  raise(^InternalError("(add_actuals): more values than formals"));
	}
      } else {
	if (vl == null) {
	  raise(^InternalError("(add_actuals): more formals than values"));
	  return(env);
	} else {
	  environ new_env = ^environ((pl.hd).1,
				     ^binding.Varbind(vl.hd), env);
	  return(add_actuals(pl.tl, vl.tl, new_env));
	}
      }
    }
  
  /*
  environ add_actuals_gen(<*(string, tipe)> List::list pl, environ env)
                         (<value> List::list vl)
    {
      return
	codegen(
		environ add_actuals_spec(<value> List::list vl)
	{
	  cut
	    if (pl == null) {
	      splice
		if (vl == null)
		  return(fill(env));
		else {
		  raise(^InternalError("(add_actuals): more values than formals"));
		}
	    } else {
	      splice
		if (vl == null) {
		  raise(^InternalError("(add_actuals): more formals than values"));
		  return(fill(env));
		} else {
		  environ new_env = ^environ(fill(pl.hd).1,
					     ^binding.Varbind(vl.hd),
					     fill(env));
		  return(fill(add_actuals_gen(pl.tl, new_env)(vl.tl)));
		}
	    }
	});
    }
  */

  binding lookup(string id, environ env)
    {
      <*(string, value (<value> List::list vl, pop_pkt ppkt))>
	 List::list svc_tmp = service_env;
      environ plan_tmp = env;

      try {
	List::assoc_cmp(Core::strcmp, Env::service_env, id);
	return ^binding.Svcbind(id);
      }
      handle y
	switch y {
	case Core::Not_found: 

	  plan_tmp = env;
	  while (plan_tmp != null) {
	    if (Core::strcmp(plan_tmp.id, id) == 0)
	      return(plan_tmp.bind);
	    plan_tmp = plan_tmp.next;
	  }
	  printf("\n(Env::lookup)");
	  print(env);
	  raise(^InternalError(strconcat("(lookup): binding not found for: ", id)));
	}
    }

  void print_service_env()
    {
      printf("(");
      List::map(fun int _(*(string, value (<value> List::list vl,
                            pop_pkt ppkt)) s) {
	printf("%s ", s.1);
	return 0;
      }, service_env);
    printf(")\n");
    }

  void print(environ env)
    {
      print_string(" E<");
      while (env != null) {
	printf("(%s ", env.id);
	switch (env.bind) {
	case Varbind(v): printf("Var %s", value_to_str(v));
	case Exnbind(e): printf("Exn ...");
	case Funbind(f): printf("Fun ...");
	case Svcbind(s): printf("Svc ...");
	}
	printf(")");
	env = env.next;
      }
      print_string(">\n");
      return;
    }
}  
