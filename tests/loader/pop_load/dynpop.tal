; TAL IMPLEMENTATION dynpop
; This file was generated by TALC
	INCLUDE	TAL.INC
	_begin_TAL


	TAL_IMPORT	pop_runtime.tali
	TAL_IMPORT	loader.tali
	TAL_IMPORT	dynpop_i.tali

	TAL_EXPORT	dynpop_e.tali

TYPE 	<reptyp = fn a:T4.^*[Rep(type a)]>
TYPE 	<interp = fn a:T4. a>

;; an abbreviation for the type of the function init. In R-popcorn:
;; void init (a lookup_symbol<a>(string, R(a)), 
;;	      void add_symbol<a>(string, R(a), a));
TYPE 	<initfntype = (All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	  {cap: &[e1,e2], \
	  EBP: sptr (?E s2 e2), \
	  ESP: sptr \
	    (?Sv (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
		   {cap: &[e1,e2], \
		   EBP: sptr (?E s2 e2), \
		   ESP: sptr \
		     (?S (interp va) \
			 ?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)})::	\
		 (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
		   {cap: &[e1,e2], \
		   EBP: sptr (?E s2 e2), \
		   ESP: sptr \
		     (?Sv ?str::(reptyp va)::(interp va)::s1 s2 e1 e2)@ \
			  (?E s2 e2)})::s1 \
	       s2 e1 e2)@(?E s2 e2)})>
TYPE 	<inittype = *[initfntype^rw]>

	TYPE	<bogus_option$1 :T4 = ^T[0]>
	TYPE	<entry? :T4 = Exist[va:T4].^*[(reptyp va)^rw,va^rw]>
	TYPE	<handle_t? :T4 = ^`handle_t?mem>
	TYPE	<handle_t?mem :Tm 4 = *[(`List?list? (`Hashtable?table? ?str `entry?))^rw]>

	CODE

_dlpop?lookup_symbol:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	  {cap: &[e1,e2], \
	  EBP: sptr (?E s2 e2), \
	  ESP: sptr \
	       (?S (interp va) ?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	DWORD PTR [_symbol_table]
	PUSH	rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,0)
	PUSH	DWORD PTR [ESP+12]
	PUSH	DWORD PTR [ESP+20]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	CALL	tapp(_find,<va,ESP 4 11 s1,EBP 1,e1,e2>)
	ADD	ESP,32
	RETN

_add_symbol:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	  {cap: &[e1,e2], \
	  EBP: sptr (?E s2 e2), \
	  ESP: sptr \
	       (?Sv ?str::(reptyp va)::(interp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	MOV	EAX,DWORD PTR unroll(unroll([_symbol_table]))
	NAMEOBJ	n$59,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$59
	PUSH	DWORD PTR [EAX]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+12]
	MALLOC	mptr$60,8
	MOV	ESI,EAX
	MOV	EAX,[ESP+20]
	MOV	[ESI],EAX
	MOV	EAX,[ESP+24]
	MOV	[ESI+4],EAX
	MOV	EAX,ESI
	FORGETUNIQUE	mptr$60
	COERCE	forgetname(EAX)
;	COERCE	roll(<`entry?>,pack(<va>,EAX,<Exist[va:T4].^*[?str^rw,va^rw]>))
	COERCE	roll(<`entry?>,pack(<va>,EAX,<Exist[va:T4].^*[(reptyp va)^rw,va^rw]>))
	PUSH	EAX
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	CALL	tapp(_Hashtable?insert,<?str,`entry?,ESP 3 11 s1,EBP 1,e1,e2>)
	ADD	ESP,28
	RETN

_find:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	DWORD PTR [ESP+4]
	SUB	ESP,4
	PUSH	rollsum(<`Core?Opt? `entry?>,0)
	JMP	whiletest$4
whilebody$3:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (`Core?Opt? `entry?)::junk4::(`List?list? (`Hashtable?table? ?str `entry?))::(?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	EBP
	PUSH	tapp(trycatch$6,<va,s1,s2,e1,e2>)
	MOV	EBP,ESP
; 	Begin try body.
	MOV	EAX,unroll(unroll([ESP+16]))
	NAMEOBJ	n$8,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$8
	PUSH	DWORD PTR [EAX]
	PUSH	DWORD PTR [ESP+36]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_Hashtable?lookup,<?str,`entry?,ESP 2 4 se,EBP 1,cap[],&[e1,e2]>)
	ADD	ESP,16
	MOV	[EBP],tapp(trycatch$6,<va,s1,s2,e1,e2>)
	PUSH	EAX
	MALLOC	mptr$9,4
	MOV	ESI,EAX
	MOV	EAX,[ESP]
	MOV	[ESI],EAX
	MOV	EAX,ESI
	FORGETUNIQUE	mptr$9
	COERCE	rollsum(<`Core?Opt? `entry?>,roll(<(fn va:T4 . ^T(0)(`Core?Opt?mem va)) `entry?>,forgetname(EAX)))
	MOV	[EBP+8],EAX
	ADD	ESP,4
; 	End try body.
	ADD	ESP,4
	POP	EBP
	JMP	tapp(tryend$7,<va,s1,s2,e1,e2>)
trycatch$6:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EAX: ?exn,ESP: sptr (?Ha (`Core?Opt? `entry?)::junk4::(`List?list? (`Hashtable?table? ?str `entry?))::(?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2) s2 e1 e2)}>
	POP	EBP
	PUSH	EAX
	MOV	EAX,[ESP]
	UNPACK	c$11,EAX,EAX
	MOV	EBX,[EAX]
	FALLTHRU	<c$11,va,s1,s2,e1,e2>
exn_case$12:
LABELTYPE <All[c$11:Tm va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EAX: ^*[(?exnname c$11)^r,c$11],EBX: ?exnname c$11,EBP: sptr (?E s2 e2),ESP: sptr ?exn::(`Core?Opt? `entry?)::junk4::(`List?list? (`Hashtable?table? ?str `entry?))::(?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	CMP	EBX,Core?Not_found?exn
	JNE	tapp(exn_case$13,<c$11,va,s1,s2,e1,e2>)
	MOV	EAX,unroll(unroll([ESP+12]))
	NAMEOBJ	n$14,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$14
	MOV	EAX,[EAX+4]
	MOV	[ESP+12],EAX
	JMP	tapp(switchend$10,<va,s1,s2,e1,e2>)
exn_case$13:
LABELTYPE <All[c$11:Tm va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EAX: ^*[(?exnname c$11)^r,c$11],EBX: ?exnname c$11,EBP: sptr (?E s2 e2),ESP: sptr ?exn::(`Core?Opt? `entry?)::junk4::(`List?list? (`Hashtable?table? ?str `entry?))::(?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	string$15
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?print_string,<ESP 1 11 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	DWORD PTR [ESP],subsume(<B4>,1)
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_exit,<ESP 1 11 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	FALLTHRU	<va,s1,s2,e1,e2>
switchend$10:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr ?exn::(`Core?Opt? `entry?)::junk4::(`List?list? (`Hashtable?table? ?str `entry?))::(?S (interp va) (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
	ADD	ESP,4
	FALLTHRU	<va,s1,s2,e1,e2>
tryend$7:
LABELTYPE <All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	  {cap: &[e1,e2], \
	  EBP: sptr (?E s2 e2), \
	  ESP: sptr (`Core?Opt? `entry?)::junk4:: \
	       (`List?list? (`Hashtable?table? ?str `entry?)):: \
	       (?S (interp va) \
		   (`List?list? (`Hashtable?table? ?str `entry?)):: \
		   (`List?list? (`Hashtable?table? ?str `entry?)):: \
		   ?str::(reptyp va)::s1 s2 e1 e2)@(?E s2 e2)}>
whiletest$4:
	MOV	EBX,[ESP+8]
	MOV	EAX,[ESP+20]
	CMP	EBX,EAX
	JE	whileend$5
condtrue$16:
	MOV	EBX,[ESP]
	MOV	EAX,rollsum(<`Core?Opt? `entry?>,0)
	CMP	EBX,EAX
	JE	tapp(whilebody$3,<va,s1,s2,e1,e2>)
whileend$5:
	MOV	EBX,[ESP]
	MOV	EAX,rollsum(<`Core?Opt? `entry?>,0)
	CMP	EBX,EAX
	JE	iffalse$18
iftrue$17:
	MOV	EAX,unroll(unroll([ESP]))
	NAMEOBJ	n$20,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$20
	PUSH	DWORD PTR [EAX]
	MOV	EAX,unroll([ESP])
	UNPACK	vb,EAX,EAX
;; save exception handler
	PUSH	EBP
	PUSH	EAX
	MOV	EAX,[ESP]
	PUSH	DWORD PTR [EAX+4]
	MOV	EAX,[ESP+4]
	PUSH	DWORD PTR [EAX]
;	PUSH	DWORD PTR [ESP+44]
	PUSH	DWORD PTR [ESP+48]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	CALL	tapp(_tal_cast,<vb,va,ESP 3,e1,e2>)
;	CALL	tapp(_tal_cast,<vb,va,ESP 3 16 s1,e1,e2>)
	ADD	ESP,24
	POP	EBX
	POP 	EBP
	PUSH	EBX
;; restore exception handler
	MOV	[ESP+12],EAX
;	MOV	EBX,[ESP+12]
	MOV	EAX,[ESP+12]
	NAMEOBJ	n$11,EAX
;	MOV	EAX,rollsum(<`Core?Opt? va>,0)
;	CMP	EBX,EAX
	CMP	EAX,0
	JNE	iffalse$22
iftrue$21:
	PUSH	DWORD PTR [ESP+32]
	MALLOC	mptr$24,8
	POP	EBX
	MOV	[EAX+4],EBX
	MOV	EBX,WrongType?exn
	MOV	[EAX],EBX
	FORGETUNIQUE	mptr$24
	COERCE	pack(<?str^r>,forgetname(EAX),<?exn>)
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
iffalse$22:
;	MOV	EAX,unroll(unroll([ESP+12]))
	MOV	EAX,forgetname(EAX)
	REMOVENAME	n$11
	MOV	EAX,[EAX]	
;	NAMEOBJ	n$25,EAX
;	CMP	EAX,0
;	JE	_pop_never_null
;	COERCE	forgetname(EAX)
;	REMOVENAME	n$25
;	MOV	EAX,[EAX]
	ADD	ESP,20
	RETN
iffalse$18:
ifend$19:
	PUSH	DWORD PTR [ESP+24]
	MALLOC	mptr$26,8
	POP	EBX
	MOV	[EAX+4],EBX
	MOV	EBX,SymbolNotFound?exn
	MOV	[EAX],EBX
	FORGETUNIQUE	mptr$26
	COERCE	pack(<?str^r>,forgetname(EAX),<?exn>)
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX

;;;;
;;;;		Exported functions
;;;;
_dlopen_buf:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	  {cap: &[e1,e2], \
	  EBP: sptr (?E s2 e2), \
	  ESP: sptr (?S `handle_t? ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}>
	SUB	ESP,4
	PUSH	subsume(<B4>,53)
	PUSH	_Core?strcmp
	PUSH	_Hashtable?hash_string
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	CALL	tapp(_Hashtable?create,<?str,`entry?,ESP 3 10 s1,EBP 1,e1,e2>)
	ADD	ESP,20
	MOV	[ESP],EAX
	MALLOC	mptr$27,8
	MOV	ESI,EAX
	MOV	EAX,[ESP]
	MOV	[ESI],EAX
	MOV	EAX,DWORD PTR [_symbol_table]
	MOV	[ESI+4],EAX
	MOV	EAX,ESI
	FORGETUNIQUE	mptr$27
	COERCE	rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,roll(<(fn va:T4 . ^T(0)(`List?list?mem va)) (`Hashtable?table? ?str `entry?)>,forgetname(EAX)))
	MOV	DWORD PTR [_symbol_table],EAX
	MALLOC	mptr$28,4
	MOV	ESI,EAX
	MOV	EAX,DWORD PTR [_symbol_table]
	MOV	[ESI],EAX
	MOV	EAX,ESI
	FORGETUNIQUE	mptr$28
	COERCE	roll(<`handle_t?>,roll(<^`handle_t?mem>,forgetname(EAX)))
	PUSH	EAX
	PUSH	EBP
	PUSH	DWORD PTR [ESP+20]
	PUSH	DWORD PTR [ESP+28]
;	PUSH	string$29 ; "inittype"
	PUSH	rinittype
;	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+4]
	PUSH	DWORD PTR [ESP+12]
;	CALL	tapp(_tal_load,<ESP 3 12 s1,EBP 1,e1,e2>)
	CALL	tapp(_tal_load,<inittype,ESP 3 12 (s1@(code {cap: e2,EAX: ?exn,ESP: sptr s2})::s2),e1,e2>)
	ADD	ESP,20
	POP	EBP
	NAMEOBJ	p, EAX
	CMP	EAX,0
;	MOV	[ESP+8],EAX
;	MOV	EBX,[ESP+8]
;	MOV	EAX,subsume(<B4>,0)
;	CMP	EBX,EAX
	JNE	iffalse$31
iftrue$30:
	PUSH	0
	MALLOC	mptr$33,8
	POP	EBX
	MOV	[EAX+4],EBX
	MOV	EBX,FailsTypeCheck?exn
	MOV	[EAX],EBX
	FORGETUNIQUE	mptr$33
	COERCE	pack(<B4^r>,forgetname(EAX),<?exn>)
	MOV	ESP,EBP
	POP	EBX
	JMP	EBX
iffalse$31:
ifend$32:
	COERCE	 forgetname(EAX)
	MOV	EAX,[EAX]
	PUSH	_add_symbol
	PUSH	_dlpop?lookup_symbol
;	PUSH	DWORD PTR [ESP]
;	PUSH	DWORD PTR [ESP+8]
;	CALL	tapp(_init,<ESP 2 10 s1,EBP 1,e1,e2>)
	CALL	tapp(EAX,<ESP 2 8 s1,EBP 1,e1,e2>)
;	ADD	ESP,16
	ADD	ESP,8
	MOV	EAX,[ESP]
	ADD	ESP,12
	RETN

_dlopen:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	DWORD PTR [ESP+4]
	PUSH	string$34
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_Core?strconcat,<ESP 2 6 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+8]
	PUSH	string$35
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_Core?strconcat,<ESP 2 7 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+4]
	PUSH	string$36
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_Core?file_open,<ESP 2 8 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+4]
	PUSH	string$37
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_Core?file_open,<ESP 2 9 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+12]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?file_length,<ESP 1 8 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?new_string,<ESP 1 9 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?file_length,<ESP 1 10 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?new_string,<ESP 1 11 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	[ESP],EAX
	PUSH	DWORD PTR [ESP+20]
	PUSH	DWORD PTR [ESP+12]
	PUSH	subsume(<B4>,0)
	PUSH	DWORD PTR [ESP+24]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	CALL	tapp(_f_string_read,<ESP 4 18 s1,EBP 1,e1,e2>)
	ADD	ESP,32
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+4]
	PUSH	subsume(<B4>,0)
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP+24]
	CALL	tapp(_f_string_read,<ESP 4 18 s1,EBP 1,e1,e2>)
	ADD	ESP,32
	PUSH	DWORD PTR [ESP+20]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?file_close,<ESP 1 12 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [ESP+16]
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?file_close,<ESP 1 12 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [ESP+8]
	PUSH	DWORD PTR [ESP+4]
	PUSH	DWORD PTR [ESP]
	PUSH	DWORD PTR [ESP+8]
	CALL	tapp(_dlopen_buf,<ESP 2 14 s1,EBP 1,e1,e2>)
	ADD	ESP,48
	RETN

_dlclose:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)}>
	SUB	ESP,8
	PUSH	EBP
	PUSH	tapp(trycatch$38,<s1,s2,e1,e2>)
	MOV	EBP,ESP
; 	Begin try body.
	PUSH	DWORD PTR [_symbol_table]
	MOV	EAX,unroll(unroll([ESP+24]))
	MOV	EAX,[EAX]
	POP	EBX
	CMP	EBX,EAX
	JNE	iffalse$41
iftrue$40:
	MOV	EAX,unroll(unroll([ESP+20]))
	MOV	EAX,unroll(unroll([EAX]))
	NAMEOBJ	n$43,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$43
	MOV	EAX,[EAX+4]
	MOV	DWORD PTR [_symbol_table],EAX
	JMP	ifend$42
iffalse$41:
	MOV	EAX,DWORD PTR [_symbol_table]
	MOV	[EBP+12],EAX
	MOV	EAX,DWORD PTR unroll(unroll([_symbol_table]))
	NAMEOBJ	n$44,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$44
	MOV	EAX,[EAX+4]
	MOV	[EBP+8],EAX
	JMP	fortest$45
forbody$46:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[cap[],&[e1,e2]],EBP: sptr (?E (sptr (?E s2 e2))::(`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::((?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)) &[e1,e2]),ESP: sptr se@(?E (sptr (?E s2 e2))::(`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::((?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)) &[e1,e2])}>
	PUSH	DWORD PTR [ESP+8]
	MOV	EAX,unroll(unroll([ESP+24]))
	MOV	EAX,[EAX]
	POP	EBX
	CMP	EBX,EAX
	JNE	iffalse$50
iftrue$49:
	JMP	forend$48
iffalse$50:
ifend$51:
forcount$47:
	MOV	EAX,[ESP+8]
	MOV	[EBP+12],EAX
	MOV	EAX,unroll(unroll([ESP+8]))
	NAMEOBJ	n$52,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$52
	MOV	EAX,[EAX+4]
	MOV	[EBP+8],EAX
fortest$45:
	MOV	EBX,[ESP+8]
	MOV	EAX,rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,0)
	CMP	EBX,EAX
	JNE	tapp(forbody$46,<s1,s2,e1,e2>)
forend$48:
	MOV	EBX,[ESP+8]
	MOV	EAX,rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,0)
	CMP	EBX,EAX
	JE	iffalse$54
iftrue$53:
	PUSH	DWORD PTR [ESP+12]
	MOV	EAX,unroll(unroll([ESP+12]))
	NAMEOBJ	n$56,EAX
	CMP	EAX,0
	JE	_pop_never_null
	COERCE	forgetname(EAX)
	REMOVENAME	n$56
	MOV	EAX,[EAX+4]
	POP	ESI
	COERCE	unroll(unroll(ESI))
	NAMEOBJ	n$57,ESI
	CMP	ESI,0
	JE	_pop_never_null
	COERCE	forgetname(ESI)
	REMOVENAME	n$57
	MOV	[ESI+4],EAX
	JMP	ifend$55
iffalse$54:
ifend$55:
ifend$42:
; 	End try body.
	ADD	ESP,4
	POP	EBP
	JMP	tapp(tryend$39,<s1,s2,e1,e2>)
trycatch$38:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EAX: ?exn,ESP: sptr (?Ha junk4::junk4::(?Sv `handle_t?::s1 s2 e1 e2) s2 e1 e2)}>
	POP	EBP
	PUSH	EAX
	PUSH	string$58
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_Core?print_string,<ESP 1 7 s1,EBP 1,e1,e2>)
	ADD	ESP,4
	MOV	DWORD PTR [ESP],subsume(<B4>,1)
	PUSH	DWORD PTR [ESP]
	CALL	tapp(_exit,<ESP 1 7 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	FALLTHRU	<s1,s2,e1,e2>
tryend$39:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr junk4::junk4::(?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)}>
	MOV	ESI,[ESP+12]
	MOV	EAX,rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,0)
	COERCE	unroll(unroll(ESI))
	MOV	[ESI],EAX
	ADD	ESP,8
	RETN

_dlinit:
LABELTYPE <All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code \
	    {cap: &[e1,e2], \
	    EBP: sptr (?E s2 e2), \
	    ESP: sptr (?Sv (initfntype)::s1 s2 e1 e2)@(?E s2 e2)}>
	PUSH	_add_symbol
	PUSH	_dlpop?lookup_symbol
	MOV	EAX,[ESP+12]
	CALL	tapp(EAX,<ESP 2 4 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	RETN


__init_dynpop:
LABELTYPE <initfntype>
	PUSH	_add_symbol
	PUSH	_tr$$61
	PUSH	string$62
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_dlclose
	PUSH	_tr$$63
	PUSH	string$64
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_dlinit
	PUSH	_tr$$65
	PUSH	string$66
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_dlopen
	PUSH	_tr$$67
	PUSH	string$68
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_dlopen_buf
	PUSH	_tr$$69
	PUSH	string$70
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::?str::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_find
	PUSH	_tr$$71
	PUSH	string$72
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::?str::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_lookup_symbol
	PUSH	_tr$$73
	PUSH	string$74
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)},ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],WrongType?exn
	PUSH	_tr$$75
	PUSH	string$76
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<?exnname ?str^r,ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],SymbolNotFound?exn
	PUSH	_tr$$77
	PUSH	string$78
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<?exnname ?str^r,ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],FailsTypeCheck?exn
	PUSH	_tr$$79
	PUSH	string$80
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<?exnname B4^r,ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,8
	MOV	[ESP],_symbol_table
	PUSH	_tr$$81
	PUSH	string$82
	MOV	EAX,[ESP+20]
	CALL	tapp(EAX,<^*[(`List?list? (`Hashtable?table? ?str `entry?))^rw],ESP 3 6 s1,EBP 1,e1,e2>)
	ADD	ESP,12
	RETN

	DATA

;; inittype
rinittype:
LABELTYPE <^*[Rep(type inittype)]>
	DREP 	TYPE	inittype

string$82:
COERCE	pack(<12>,array(4,0,<B1^rw>,?),<?str>)
	DD	12
	TAL_STRUCT
	DB	115,121,109,98,111,108,95,116,97,98,108,101
_tr$$81:
LABELTYPE <^*[Rep(type ^*[(`List?list? (`Hashtable?table? ?str `entry?))^rw])]>
	DREP	TYPE	^*[(`List?list? (`Hashtable?table? ?str `entry?))^rw]
string$80:
COERCE	pack(<18>,array(4,0,<B1^rw>,?),<?str>)
	DD	18
	TAL_STRUCT
	DB	70,97,105,108,115,84,121,112,101,67,104,101,99,107,63,101,120,110
_tr$$79:
LABELTYPE <^*[Rep(type ?exnname B4^r)]>
	DREP	TYPE	?exnname B4^r
string$78:
COERCE	pack(<18>,array(4,0,<B1^rw>,?),<?str>)
	DD	18
	TAL_STRUCT
	DB	83,121,109,98,111,108,78,111,116,70,111,117,110,100,63,101,120,110
_tr$$77:
LABELTYPE <^*[Rep(type ?exnname ?str^r)]>
	DREP	TYPE	?exnname ?str^r
string$76:
COERCE	pack(<13>,array(4,0,<B1^rw>,?),<?str>)
	DD	13
	TAL_STRUCT
	DB	87,114,111,110,103,84,121,112,101,63,101,120,110
_tr$$75:
LABELTYPE <^*[Rep(type ?exnname ?str^r)]>
	DREP	TYPE	?exnname ?str^r
string$74:
COERCE	pack(<13>,array(4,0,<B1^rw>,?),<?str>)
	DD	13
	TAL_STRUCT
	DB	108,111,111,107,117,112,95,115,121,109,98,111,108
_tr$$73:
LABELTYPE <^*[Rep(type All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}
string$72:
COERCE	pack(<4>,array(4,0,<B1^rw>,?),<?str>)
	DD	4
	TAL_STRUCT
	DB	102,105,110,100
_tr$$71:
LABELTYPE <^*[Rep(type All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::?str::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va (`List?list? (`Hashtable?table? ?str `entry?))::(`List?list? (`Hashtable?table? ?str `entry?))::?str::?str::s1 s2 e1 e2)@(?E s2 e2)}
string$70:
COERCE	pack(<10>,array(4,0,<B1^rw>,?),<?str>)
	DD	10
	TAL_STRUCT
	DB	100,108,111,112,101,110,95,98,117,102
_tr$$69:
LABELTYPE <^*[Rep(type All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::?str::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::?str::s1 s2 e1 e2)@(?E s2 e2)}
string$68:
COERCE	pack(<6>,array(4,0,<B1^rw>,?),<?str>)
	DD	6
	TAL_STRUCT
	DB	100,108,111,112,101,110
_tr$$67:
LABELTYPE <^*[Rep(type All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S `handle_t? ?str::s1 s2 e1 e2)@(?E s2 e2)}
string$66:
COERCE	pack(<6>,array(4,0,<B1^rw>,?),<?str>)
	DD	6
	TAL_STRUCT
	DB	100,108,105,110,105,116
_tr$$65:
LABELTYPE <^*[Rep(type All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv (All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S B4 (All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?S va ?str::?str::s1 s2 e1 e2)@(?E s2 e2)})::(All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)})::s1 s2 e1 e2)@(?E s2 e2)}
string$64:
COERCE	pack(<7>,array(4,0,<B1^rw>,?),<?str>)
	DD	7
	TAL_STRUCT
	DB	100,108,99,108,111,115,101
_tr$$63:
LABELTYPE <^*[Rep(type All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv `handle_t?::s1 s2 e1 e2)@(?E s2 e2)}
string$62:
COERCE	pack(<10>,array(4,0,<B1^rw>,?),<?str>)
	DD	10
	TAL_STRUCT
	DB	97,100,100,95,115,121,109,98,111,108
_tr$$61:
LABELTYPE <^*[Rep(type All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)})]>
	DREP	TYPE	All[va:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code {cap: &[e1,e2],EBP: sptr (?E s2 e2),ESP: sptr (?Sv ?str::?str::va::s1 s2 e1 e2)@(?E s2 e2)}
string$58:
COERCE	pack(<25>,array(4,0,<B1^rw>,?),<?str>)
	DD	25
	TAL_STRUCT
	DB	73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,100,108,99,108,111,115,101
string$37:
COERCE	pack(<2>,array(4,0,<B1^rw>,?),<?str>)
	DD	2
	TAL_STRUCT
	DB	114,98
string$36:
COERCE	pack(<2>,array(4,0,<B1^rw>,?),<?str>)
	DD	2
	TAL_STRUCT
	DB	114,98
string$35:
COERCE	pack(<3>,array(4,0,<B1^rw>,?),<?str>)
	DD	3
	TAL_STRUCT
	DB	46,116,111
string$34:
COERCE	pack(<4>,array(4,0,<B1^rw>,?),<?str>)
	DD	4
	TAL_STRUCT
	DB	46,116,97,108
string$29:
COERCE	pack(<8>,array(4,0,<B1^rw>,?),<?str>)
	DD	8
	TAL_STRUCT
	DB	105,110,105,116,116,121,112,101
string$15:
COERCE	pack(<22>,array(4,0,<B1^rw>,?),<?str>)
	DD	22
	TAL_STRUCT
	DB	73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,102,105,110,100
_symbol_table:
LABELTYPE <^*[(`List?list? (`Hashtable?table? ?str `entry?))^rw]>
	DD	rollsum(<`List?list? (`Hashtable?table? ?str `entry?)>,0)
FailsTypeCheck?exn:
LABELTYPE <?exnname B4^r>
	DD	?
SymbolNotFound?exn:
LABELTYPE <?exnname ?str^r>
	DD	?
WrongType?exn:
LABELTYPE <?exnname ?str^r>
	DD	?

	_end_TAL
	END
