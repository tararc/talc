#include "core.h"
#include "filename.h"
#include "list.h"
#include "hashtable.h"

extern void exit(int);
extern int tal_load (string, string, string);
extern <b>Core::Opt cast<a,b> (a x, string t1, string t2);
extern void init (a lookup_symbol<a> (string, string), 
		  void add_symbol<a> (string, string, a));

abstype entry[a] = *(string,a);

// The symbol table is a list of hashtables.  The first table is
//   for the statically linked files, and the each subsequent table
//   is for a dynamically-linked file
<<string,entry>Hashtable::table>List::list symbol_table;

/* dlopen can raise Core::FileOpenError(string)         */
exception FailsTypeCheck;	    // the file is not well formed
exception SymbolNotFound(string);   // dlsym can't find the symbol
exception WrongType(string);        // type of symbol is incorrect

struct handle_t {
  <<string,entry>Hashtable::table>List::list mod_tab;
}

void dlinit (int init(a lsym<a>(string,string), 
		      void asym<a>(string,string,a)))
{
  if (symbol_table == null) {
    <string,entry>Hashtable::table tab =
       Hashtable::create(53,Core::strcmp,Hashtable::hash_string);
    symbol_table = new List::list(tab,symbol_table);
  }
  init(lookup_symbol, add_symbol);
}

/*
  Invalidate the handle and remove the entries from the
  symbol table. This is kind hacky as we have to find the
  entry in the table before the one pointed to by start.   
*/
void dlclose(handle_t h)
{
  <<string,entry>Hashtable::table>List::list e = h.mod_tab;
  if (e == null)
    return;
  else if (symbol_table == e)
    symbol_table = e.tl;
  else {
    // look for the handle in the list
    <<string,entry>Hashtable::table>List::list here = symbol_table;
    <<string,entry>Hashtable::table>List::list next = symbol_table.tl;
    for ( ; next != null; here = next, next = next.tl) 
      if (next == e) break;
    
    // if found, then remove it from the list
    if (next != null)
      here.tl = next.tl;
  }
  h.mod_tab = null;
  return;
}

// version of dlopen that interprets its argument as TAL code, rather
// than a filename.  Call this function from dlopen().
handle_t dlopen_buf (string talbuf, string tobuf)
{
  int x;
  // create the hashtable for this module, and add it to the symtab
  <string,entry>Hashtable::table tab =
     Hashtable::create(53,Core::strcmp,Hashtable::hash_string);
  symbol_table = new List::list(tab,symbol_table);

  handle_t h = ^handle_t(symbol_table);
  x = tal_load (talbuf, tobuf, "inittype");
  if (x == 0) {
    raise FailsTypeCheck();
  }
  init(lookup_symbol, add_symbol);
  return h;
}

handle_t dlopen (string name) 
{ 
  /* use filesystem to find the files */
  string talname = Core::strconcat(name, ".o");
  string toname = Core::strconcat(name, ".to");
  FILE talfile = Core::file_open (talname, "rb");
  FILE tofile = Core::file_open (toname, "rb");
  /* read talfile */
  int tallen = Core::file_length(talname);
  string talbuf = Core::new_string(tallen);
  int tolen = Core::file_length(toname);
  string tobuf = Core::new_string(tolen);
  
  f_string_read(talfile, talbuf, 0, tallen);
  f_string_read(tofile, tobuf, 0, tolen);
  Core::file_close (talfile);
  Core::file_close (tofile);
  
  return dlopen_buf(talbuf,tobuf);
}

// helper function for dlsym, lookup_symbol
a find <a> (<<string,entry>Hashtable::table>List::list start,
            <<string,entry>Hashtable::table>List::list stop,
            string name, string typ) 
{
  <<string,entry>Hashtable::table>List::list here = start;
  <a>Core::Opt ans;

  // first locate the entry
  <entry>Core::Opt hopt = null;
  while ((here != stop) && (hopt == null)) {
    try {
      entry h = Hashtable::lookup(here.hd, name);
      hopt = ^Core::Opt(h);
    } handle e {
      switch e {
      case Core::Not_found: {
	here = here.tl;
      }
      default: {
	Core::print_string ("Internal error in find");
	exit(1);
      }}
    }
  }

  // then extract and return the result
  if (hopt != null) {
    entry h = hopt.v;
    with er[b] = h do {
      ans = cast(er.2, er.1, typ);
      if (ans == null) 	
	raise WrongType(name);
      else
	return ans.v;
    }
  }
  raise SymbolNotFound(name);
}

a dlsym2<a> (handle_t x, string name, string typ) {
  <<string,entry>Hashtable::table>List::list tail = null;
  if (x.mod_tab != null) {
    tail = x.mod_tab.tl;
  }
  return find (x.mod_tab, tail, name, typ);
}

// to be called during init....

// This function adds symbols to the first hashtable it comes across
void add_symbol<a> (string name, string typ, a val)
{
  <string,entry>Hashtable::table h = symbol_table.hd;
  Hashtable::insert(h,name,^entry(^(typ,val)));
  return;
}

// This function looks for the symbol in each hashtable in the list
a lookup_symbol<a> (string name, string typ) 
{
  return find (symbol_table, null, name, typ);
}

/*
void update_symbol<a>(string name, string typ, int val){
  entry ans = find (symbol_table, null, name, typ);
  ans.3 = val;
  return;
}
*/

void print_table () 
{
  Core::print_string ("Symbol table contains\n");
  <<string,entry>Hashtable::table>List::list here = symbol_table;

  while (here != null) {
    Hashtable::iter
      (fun void _(string sym, entry e) {
	Core::print_string (sym);
	Core::print_string ("\n");
      }, here.hd);
    here = here.tl;
  }
  return;
}

void print_handle_table (handle_t t) 
{
  Core::print_string ("Handle symbol table contains:\n");
  <<string,entry>Hashtable::table>List::list here = t.mod_tab;
  <<string,entry>Hashtable::table>List::list tail = null;

  if (t.mod_tab != null) {
    tail = t.mod_tab.tl;
  }

  while (here != tail) {
    Hashtable::iter
      (fun void _(string sym, entry e) {
	Core::print_string (sym);
	Core::print_string ("\n");
      }, here.hd);
    here = here.tl;
  }
  return;
}
