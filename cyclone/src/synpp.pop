#include "core.h"
#include "pp.h"
#include "absyn.h"
#include "list.h"
#include "buffer.h"
#include "string.h"

prefix Synpp;
open Synpp;

open Core;
open PP;
open Absyn;
open List;

// Flag controlling whether typedefs are expanded during printing
bool expand_typedefs = false;

/* // I'm having trouble linking in the Buffer stuff
string escape(string s) {
  _ sz = size(s);
  _ b = Buffer::create(sz+10);
  for (int i = 0; i<sz; i++) {
    switch (s[i]) {
    case '\n': Buffer::add_string(b,"\\n");
    case '\t': Buffer::add_string(b,"\\t");
    case '\b': Buffer::add_string(b,"\\b");
    case '\r': Buffer::add_string(b,"\\r");
    case '\007': Buffer::add_string(b,"\\a");
    case '\012': Buffer::add_string(b,"\\f");
    case '\011': Buffer::add_string(b,"\\v");
    case '\034': Buffer::add_string(b,"\\\"");
    default:
      // TODO: We ought to check for other binary characters here
      Buffer::add_char(b,s[i]);
    }
  }
  return Buffer::contents(b);
}
*/

bool special(string s){
  int sz = size(s);
  for (int i = 0; i<sz; i++) {
    char c = s[i];
    if (c<=' ' || c>='~' || c=='\034' || c=='\\')
      return true;
  }
  return false;
}

string escape(bool in_string,char c) {
  switch (c) {
  case '\n':   return("\\n");
  case '\t':   return("\\t");
  case '\b':   return("\\b");
  case '\r':   return("\\r");
  case '\\':   return("\\\\");
  case '\007': return("\\a");
  case '\012': return("\\f");
  case '\011': return("\\v");
  case '\034':
    /* Double quote is escaped in a string but not in a char */
    if (in_string) return("\\\"");
    else return("\"");
  case '\'':
    /* Single quote is escaped in a char but not in a string */
    if (in_string) return("\'");
    else return("\\'");
  default:
    if (c>=' ' && c<='~')
      return(sprintf("%c",c));
    else
      return(sprintf("\x%x",c));
  }
}

string char_escape(char c) {
  return escape(false,c);
}

string string_escape(string s) {
  if (special(s))
    /* Inefficient but I'm having trouble linking in the buffer stuff */
    return String::strconcat_l(List::map_c(escape,true,String::explode(s)));
  else return s;
}

Doc tqual2doc(tqual tq) {
  <string>list l = null;

  if (tq.q_restrict) l = ^list("restrict",l);
  if (tq.q_volatile) l = ^list("volatile",l);
  if (tq.q_const) l = ^list("const",l);
  return egroup(""," "," ",List::map(text,l));
}

Doc kind2doc(kind k) {
  switch (k) {
  case BoxKind: return text("b");
  case RegKind: return text("r");
  case MemKind: return text("m");
  }
}

Doc group(string start, string stop, string sep, <Doc>list ss) {
  return cat3(text(start),
              seq(sep,ss),
              text(stop));
}

/* Like group but return the empty doc if the list is empty */
Doc egroup(string start, string stop, string sep, <Doc>list ss) {
  if (ss==null) return nil_doc();
  else return cat3(text(start),
                   seq(sep,ss),
                   text(stop));
}

Doc groupl(string start, string stop, string sep, <Doc>list ss) {
  return cat3(text(start),
              seql(sep,ss),
              text(stop));
}


Doc tps2doc(<typ>list ts) {
  return egroup("<",">",",",List::map(typ2doc,ts));
}

Doc tvars2doc(<string>list tvs) {
  return egroup("<",">",",",List::map(text,tvs));
}

Doc arg2doc(*(tqual,typ) t) {
  return tqtd2doc(t.1,t.2,null);
}

Doc args2doc(<*(tqual,typ)>list ts) {
  return(group("(",")",",",List::map(arg2doc,ts)));
}

bool next_is_pointer(<type_modifier>list tms) {
  if (tms==null) return false;
  switch (tms.hd) {
  case Pointer(_): return true;
  default: return false;
  }
}

Doc dtms2doc(Doc d,<type_modifier>list tms) {
  if (tms==null) return d;
  Doc rest = dtms2doc(d,tms.tl);
  Doc p_rest = cat3(text("("),rest,text(")"));
  switch (tms.hd) {
  case Carray:
    if (next_is_pointer(tms.tl)) rest = p_rest;
    return cat2(rest,text("[]"));
  case Array:
    if (next_is_pointer(tms.tl)) rest = p_rest;
    return cat2(rest,text("[?]"));
  case ConstArray(e):
    if (next_is_pointer(tms.tl)) rest = p_rest;
    return cat4(rest, text("["), exp2doc(e), text("]"));
  case Function(args):
    if (next_is_pointer(tms.tl)) rest = p_rest;
    switch (args) {
    case WithTypes(args):
      return cat2(rest,funargs2doc(args));
    case NoTypes(sl):
      return cat2(rest,group("(",")",",",List::map(text,sl)));
    }
  case TypeParams(ts):
    if (next_is_pointer(tms.tl)) rest = p_rest;
    return cat2(rest, tvars2doc(ts));
  case Pointer*(nullable,tq2):
    return 
      cat2(nullable ? text("*") : text("@"), rest);
  }
}

// Convert a normalized typ to a doc
Doc ntyp2doc(typ t) {
  Doc s;
  switch (t) {
    // The first three cases never turn up in normalized types.
  case ArrayType(_): return text("[[[array]]]"); //nil_doc();
  case FnType(_): return nil_doc();
  case PointerType(_): return nil_doc();
    // The remaining cases are possible.
  case VoidType: s = text("void");
  case Evar*(k,topt,i):
    if (topt != null)
      // This is an error case, topt should be null in a normalized type
      return(ntyp2doc(topt.v));
    else s = cat5(text("?"),
                  kind2doc(k),
                  text("("),
                  text(sprintf("%d",i)),
                  text(")"));
  case VarType(v): s = text(v);
  case EnumType*(n,ts):
    if (n == null)
      s = cat2(text("enum "),
               tps2doc(ts));
    else
      s = cat3(text("enum "),
               (n==null)?nil_doc():qvar2doc(n.v),
               tps2doc(ts));
  case XenumType(n):
    s = cat2(text("xenum "),qvar2doc(n));
  case IntType*(sn,sz,b):
    string sns;
    string ts;
    bool b = boxed2bool(b);
    switch (sn) {
    case Signed: sns = "";
    case Unsigned: sns = "unsigned ";
    }
    switch (sz) {
    case B1: 
      switch (sn) {
      case Signed: sns = "signed ";
      case Unsigned: sns = "";
      }
      ts = b ? "Char" : "char";
    case B2:
      ts = b ? "Short" : "short";
    case B4:
      ts = b ? "Int" : "int";
    case B8:
      ts = b ? "Long Long" : "long long";
    }
    s = text(sprintf("%s%s",sns,ts));
  case BoolType(b): s = text(boxed2bool(b) ? "Bool" : "bool");
  case FloatType(b): s = text(boxed2bool(b) ? "Float" : "float");
  case DoubleType(b): s = text(boxed2bool(b) ? "Double" : "double");
  case TupleType(ts):
    s = cat2(text("$"),args2doc(ts));
  case StructType*(n,ts):
    if (n == null)
      s = cat2(text("struct "),tps2doc(ts));
    else
      s = cat3(text("struct "),
               (n==null)?nil_doc():qvar2doc(n.v),
               tps2doc(ts));
  case TypedefType*(n,ts,topt):
    // NB: we could print out the expanded typedef by following the topt
    // pointer (when non-null).
    // TJ: NO, the way to do that is to expand typedefs in to_tms -- see
    // for example the EVar case in to_tms.  The problem is that topt.v is
    // not going to be "normalized" (i.e., come out of to_tms).
    s = cat2(qvar2doc(n),tps2doc(ts));
  case UnionType:
    s = text("union {/* unimplemented */}");
  }
  return s;
}

Doc vo2doc(<var>Opt vo) {
  return (vo==null)?nil_doc():text(vo.v);
}

Doc funarg2doc(*(<var>Opt,tqual,typ) t) {
  <Doc>Opt dopt = (t.1==null)?null:^Opt(text(t.1.v));
  return tqtd2doc(t.2,t.3,dopt);
}

Doc funargs2doc(*(<*(<var>Opt,tqual,typ)>list,bool) ts) {
  if (ts.2) // Varargs
    return(group("(",")",",",
                 List::append(List::map(funarg2doc,ts.1),
                              ^list(text("..."),null))));
  else      // Not varargs
    return(group("(",")",",",List::map(funarg2doc,ts.1)));
}

*(<var>Opt,tqual,typ) arg_mk_opt(*(var,tqual,typ) arg) {
  return ^(^Opt(arg.1),arg.2,arg.3);
}

Doc var2doc(var v) { return text(v); }

Doc qvar2doc(qvar q) {
  return cat2(egroup("","::","::",List::map(var2doc,q.1)),
              var2doc(q.2));
}

bool boxed2bool(boxed b) {
  switch (b) {
  case Boxed: return true;
  case Unboxed: return false;
  }
}

Doc typ2doc(typ t) {
  return tqtd2doc(empty_tqual(), t, null);
}

// higher precedence means binds more tightly
// not quite right b/c unary operators allow cast expressions,
//   but that just means we put extra parens in.
//       Eg. &((foo) x) has unnecessary parens
// warning -- as a quick hack, exp2_doc_prec also uses some constants
//            in key places
int exp_prec(exp e) {
  switch (e.raw_exp) {
  case Const(_):        return 10000;
  case Var(_):          return 10000;
  case UnknownId(_):    return 10000;
  case Primop*(p,_):
    switch (p) {
    case Plus:           return 100; // hiding ++ (not currently decompiled)
    case Times:          return 110;
    case Minus:          return 100; // hiding -- (not currently decompiled)
    case Div:            return 110;
    case Mod:            return 110;
    case Eq:             return  70;
    case Neq:            return  70;
    case Gt:             return  80;
    case Lt:             return  80;
    case Gte:            return  80;
    case Lte:            return  80;
    case Not:            return 130;
    case Bitnot:         return 130;
    case Bitand:         return  60;
    case Bitor:          return  40;
    case Bitxor:         return  50;
    case Bitlshift:      return  90;
    case Bitlrshift:     return  80; // unlike C (see grammar)
    case Bitarshift:     return  80; // doesn't actually exist (see grammar)
    case Size:           return 130; 
    case Printf:         return 130;
    case Fprintf:        return 130;
    case Xprintf:        return 130;
    }
  case AssignOp(_):      return  20;
  case Increment(_):     return  20;
  case Conditional(_):   return  30; // note || and && are hiding here!
  case SeqExp(_):        return  10;
  case UnknownCall(_):   return 140;
  case FnCall(_):        return 140;
  case Throw(_):         return 130;
  case NoInstantiate(e): return exp_prec(e);
  case Instantiate*(e,_): return exp_prec(e);
  case Cast(_):          return 120;
  case Address(_):       return 130;
  case Sizeof(_):        return 130;
  case Deref(_):         return 130;
  case StructMember(_):  return 140;
  case StructArrow(_):   return 140; // ???
  case Subscript(_):     return 140;
  case Tuple(_):         return 150;
  case CompoundLit(_):   return 140;
  case Array(_):         return 140;
  case Comprehension(_): return 140;
  case Struct(_):        return 140;
  case Enum(_):          return 140;
  case Xenum(_):         return 140;
  case UnresolvedMem(_): return 140; // ???
  case StmtExp(_):       return 10000;
  case Codegen(_):       return 140;
  case Fill(_):          return 140;
  }
}

Doc exp2doc(exp e) {
   return exp2doc_prec(0,e);
}

Doc exp2doc_prec(int inprec, exp e) {
  int myprec = exp_prec(e);
  Doc s; 
  switch (e.raw_exp) {
  case Const(c): s = cnst2doc(c);
  case Var(x): s = qvar2doc(x);
  case UnknownId(x): s = qvar2doc(x);
  case Primop*(p,es): s = primapp2doc(myprec,p,es);
  case AssignOp*(e1,popt,e2): 
    s = cat5(exp2doc_prec(myprec,e1),
             text(" "),
             (popt == null) ? text("") : prim2doc(popt.v),
             text("= "),
             exp2doc_prec(myprec,e2));
  case Increment*(e,incrementor):
    _ es = exp2doc_prec(myprec,e);
    switch (incrementor) {
    case PreInc: s = cat2(text("++"),es);
    case PreDec: s = cat2(text("--"),es);
    case PostInc: s = cat2(es,text("++"));
    case PostDec: s = cat2(es,text("--"));
    }
  case Conditional*(e1,e2,e3):
    // decompile to && and || if possible
    bool is_and = false;
    bool is_or  = false;
    switch (e2.raw_exp) {
    case Const(c): switch (c) {case Bool(b): is_or  = b; default: ;}
    default: ;
    }
    switch (e3.raw_exp) {
    case Const(c): switch (c) {case Bool(b): is_and = !b; default: ;}
    default: ;
    }
    if(is_or) 
      s = cat3(exp2doc_prec(33,e1), text(" || "), exp2doc_prec(33,e3));
    else if(is_and)
      s = cat3(exp2doc_prec(37,e1), text(" && "), exp2doc_prec(37,e2));
    else 
      s = cat5(exp2doc_prec(myprec,e1), text(" ? "), exp2doc_prec(0,e2),
	       text(" : "), exp2doc_prec(myprec,e3));
  case SeqExp*(e1,e2):
    s = cat3(exp2doc_prec(myprec,e1), text(", "), exp2doc_prec(myprec,e2));
  case UnknownCall*(e,es):
    s = cat4(exp2doc_prec(myprec,e),
             text("("),
             exps2doc_prec(20,es),
             text(")"));
  case FnCall*(e,es):
    s = cat4(exp2doc_prec(myprec,e),
             text("("),
             exps2doc_prec(20,es),
             text(")"));
  case Throw(e):
    s = cat2(text("throw "), exp2doc_prec(myprec,e));
  case NoInstantiate(e):
    s = exp2doc_prec(inprec,e);
  case Instantiate*(e,_):
    s = exp2doc_prec(inprec,e);
  case Cast*(t,e):
    s = cat4(text("("),
             typ2doc(t),
             text(")"),
             exp2doc_prec(myprec,e));
  case Address(e):
    s = cat2(text("&"),
             exp2doc_prec(myprec,e));
  case Sizeof(t):
    s = cat3(text("sizeof("),
             typ2doc(t),
             text(")"));
  case Deref(e):
    s = cat2(text("*"),
             exp2doc_prec(myprec,e));
  case StructMember*(e,n):
    s = cat3(exp2doc_prec(myprec,e), text("."), text(n));
  case StructArrow*(e,n):
    s = cat3(exp2doc_prec(myprec,e),text("->"),text(n));
  case Subscript*(e1,e2):
    s = cat4(exp2doc_prec(myprec,e1),
             text("["),
             exp2doc(e2),
             text("]"));
  case Tuple(es):
    s = cat3(text("$("),
             exps2doc_prec(20,es),
             text(")"));
  case CompoundLit*(vat,des):
    s = cat4(text("("),
             typ2doc(vat.3), // OK to ignore qualifiers??
             text(")"),
             group("{","}",",",List::map(de2doc,des)));
  case Array(des):
    s = group("new {","}",",",List::map(de2doc,des));
  case Comprehension*(x,e1,e2):
    s = cat7(text("new {for "),
             text(x),
             text(" < "),
             exp2doc(e1),
             text(" : "),
             exp2doc(e2),
             text("}"));
  case Struct*(n,_,des,_):
    s = cat2(qvar2doc(n),
             group("{","}",",",List::map(de2doc,des)));
  case Enum*(n,_,_,es,_,_):
    s = cat2(qvar2doc(n),
             egroup("(",")",",",List::map(exp2doc,es)));
  case Xenum*(n,_,es,_,_):
    s = cat2(qvar2doc(n),
             egroup("(",")",",",List::map(exp2doc,es)));
  case UnresolvedMem*(n,des): 
    /* Currently n is always null from the parser */
    s = group("{","}",",",List::map(de2doc,des));
  case StmtExp(stmt):
    s = cat3(text("({ "),
             nest(2,stmt2doc(stmt)),
             text(" })"));
  case Codegen(fd):
    s = cat3(text("codegen("),
             nest(2,decl2doc(^decl(^raw_decl.FnDecl(fd),e.loc))),
             text(")"));
  case Fill(e):
    s = cat3(text("fill("),
             nest(2,exp2doc(e)),
             text(")"));
  }
  if(inprec > myprec)
    s = cat3(text("("), s, text(")"));
  return s;
}

Doc designator2doc(designator d) {
  switch (d) {
  case ArrayElement(e):
    return cat3(text(".["), exp2doc(e), text("]"));
  case FieldName(v):
    return cat2(text("."),text(v));
  }
}

Doc de2doc(*(<designator>list,exp) de) {
  if (de.1 == null) return exp2doc(de.2);
  else 
    return cat2(egroup("","=","=",List::map(designator2doc,de.1)),
		exp2doc(de.2));
}

Doc exps2doc_prec(int inprec, <exp>list es) {
  return group("","",",",List::map_c(exp2doc_prec,inprec,es));
}

Doc cnst2doc(cnst c) {
  switch (c) {
  case Char(ch): return text(sprintf("'%s'",char_escape(ch)));
  case Short(s): return text(sprintf("(short)%d",(:int)s));
  case Int(i):
    // TODO: This should take into account the signedness of the integer;
    // it won't be possible until the %u conversion is added to sprintf.
    return text(sprintf("%d",snd(i)));
  case Float(x): return text(x);
  case Null: return text("null");
  case Bool(b): return text(b ? "true" : "false");
  case String(s):
    return
      cat3(text("\""),
           text(string_escape(s)),
           text("\""));
  }
}

Doc primapp2doc(int inprec, primop p,<exp>list es) {
  Doc ps = prim2doc(p);
  if (!is_format_prim(p)) {
    <Doc>list es = List::map_c(exp2doc_prec,inprec,es);
    if (es == null) 
      raise Failure(sprintf("Absyn::primapp2doc: %s no args",
			    string_of_doc(ps,72)));
    else if (es.tl == null)
      return cat3(ps,text(" "),es.hd);
    else if (es.tl.tl != null)
      raise Failure(sprintf("Absyn::primapp2doc: %s more than 2 args",
			    string_of_doc(ps,72)));
    else
      return cat5(es.hd,text(" "),ps,text(" "),es.tl.hd);
  } else {
    // printf, fprintf, sprintf
    return cat4(ps, text("("), exps2doc_prec(20,es), text(")"));
  }
}

Doc prim2doc(primop p) {
  switch (p) {
  case Plus: return text("+");
  case Times: return text("*");
  case Minus: return text("-");
  case Div: return text("/");
  case Mod: return text("%");
  case Eq: return text("==");
  case Neq: return text("!=");
  case Gt: return text(">");
  case Lt: return text("<");
  case Gte: return text(">=");
  case Lte: return text("<=");
  case Not: return text("!");
  case Bitnot: return text("~");
  case Bitand: return text("&");
  case Bitor: return text("|");
  case Bitxor: return text("^");
  case Bitlshift: return text("<<");
  case Bitlrshift: return text(">>");
  case Bitarshift: return text(">>>");
  case Size: return text("size");
  case Printf: return text("printf");
  case Fprintf: return text("fprintf");
  case Xprintf: return text("xprintf");
  }
}

Doc structarg2doc(*(<var>Opt,exp) t) {
  if (t.1 == null)
     return exp2doc(t.2);
  else return cat3(text(t.1.v),
                   text(" = "),
                   exp2doc(t.2));
}

Doc cat2(Doc d1,Doc d2) {
  return concat(d1, d2);
}

Doc cat3(Doc d1,Doc d2,Doc d3) {
  return
    concat(d1,
    concat(d2,
           d3));
}

Doc cat4(Doc d1,Doc d2,Doc d3,Doc d4) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
           d4)));
}

Doc cat5(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
           d5))));
}

Doc cat6(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
           d6)))));
}

Doc cat7(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
           d7))))));
}

Doc cat8(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7,Doc d8) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
    concat(d7,
           d8)))))));
}

Doc cat9(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7,Doc d8,Doc d9) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
    concat(d7,
    concat(d8,
           d9))))))));
}

Doc cat10(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7,Doc d8,Doc d9,
          Doc d10) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
    concat(d7,
    concat(d8,
    concat(d9,
           d10)))))))));
}

Doc cat11(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7,Doc d8,Doc d9,
          Doc d10,Doc d11) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
    concat(d7,
    concat(d8,
    concat(d9,
    concat(d10,
           d11))))))))));
}

Doc cat12(Doc d1,Doc d2,Doc d3,Doc d4,Doc d5,Doc d6,Doc d7,Doc d8,Doc d9,
          Doc d10,Doc d11,Doc d12) {
  return
    concat(d1,
    concat(d2,
    concat(d3,
    concat(d4,
    concat(d5,
    concat(d6,
    concat(d7,
    concat(d8,
    concat(d9,
    concat(d10,
    concat(d11,
           d12)))))))))));
}
bool is_declaration(stmt s) {
  switch (s.raw_stmt) {
  case Decl(_): return true;
  default: return false;
  }
}

Doc stmt2doc(stmt stmt) {
  Doc s;
  switch (stmt.raw_stmt) {
  case Skip:
    s = text(";");
  case Exp(e):
    s = cat2(exp2doc(e),text(";"));
  case Seq*(s1,s2):
    // FIX:  gcc only allows declarations to be used at the beginning
    // of blocks, so we force some explicit blocks to be written below.
    // It is verbose for Cyclone; maybe it should be controlled by a flag.
    if (is_declaration(s1))
      s = cat6(text("{ "),
               nest(2,stmt2doc(s1)),
               line_doc(),
               text("}"),
               line_doc(),
               is_declaration(s2)? // for gcc compatibility
               cat4(text("{ "),
                    nest(2,stmt2doc(s2)),
                    text("}"),
                    line_doc())
               : stmt2doc(s2));
    else if (is_declaration(s2)) // for gcc compatibility
      s = cat6(stmt2doc(s1),
               line_doc(),
               text("{ "),
               nest(2,stmt2doc(s2)),
               text("}"),
               line_doc());
    else
      s = ppseql(stmt2doc,"",^list(s1,^list(s2,null)));
  case Return(eopt): 
    if (eopt == null) 
      s = text("return;");
    else 
      s = cat3(text("return "),
               (eopt==null)?nil_doc():exp2doc(eopt.v),
               text(";"));
  case IfThenElse*(e,s1,s2):
    bool print_else;
    switch (s2.raw_stmt) {
    case Skip: print_else = false;
    default: print_else = true;
    }
    s = cat7(text("if ("),
             exp2doc(e),
             text(") {"),
             nest(2,cat2(line_doc(),stmt2doc(s1))),
	     line_doc(),
	     text("}"),
             print_else ?
             cat5(line_doc(),
                  text("else {"),
                  nest(2,cat2(line_doc(),stmt2doc(s2))),
		  line_doc(),
		  text("}"))
             : nil_doc());
  case While*(e,s1):
    s = cat6(text("while ("),
             exp2doc(e),
             text(") {"),
             nest(2,cat2(line_doc(),stmt2doc(s1))),
             line_doc(),
             text("}"));
  case Break: s = text("break;");
  case Continue: s = text("continue;");
  case Goto(x): s = text(sprintf("goto %s;",x));
  case For*(e1,e2,e3,s1):
    s = cat10(text("for("),
	      exp2doc(e1),
	      text("; "),
	      exp2doc(e2),
	      text("; "),
	      exp2doc(e3),
	      text(") {"),
	      nest(2,cat2(line_doc(),stmt2doc(s1))),
	      line_doc(),
	      text("}"));
  case Switch*(e,ss):
    s = cat7(text("switch ("),
             exp2doc(e),
             text(") {"),
             line_doc(),
             switchclauses2doc(ss),
             line_doc(),
             text("}"));
  case Fallthru: s = text("fallthru;");
  case Decl*(d,s1):
    s = cat3(decl2doc(d),
             line_doc(),
             stmt2doc(s1));
  case Cut(s1):
    s = cat2(text("cut "),
             nest(2,stmt2doc(s1)));
  case Splice(s1):
    s = cat2(text("splice "),
             nest(2,stmt2doc(s1)));
  case Label*(x,s1):
    // FIX:  gcc does not allow declarations to be used immediately after
    // labels.  This next case forces an explicit block to be written.
    // It is verbose for Cyclone; maybe it should be controlled by a flag.
    if (is_declaration(s1)) {
      s = cat6(text(x),
               text(": {"),
               line_doc(),
               nest(2,stmt2doc(s1)),
               line_doc(),
               text("}"));
    } else
      s = cat3(text(x),text(": "),stmt2doc(s1));
  case Do*(s1,e): 
    s = cat7(text("do {"),
             line_doc(),
             nest(2,stmt2doc(s1)),
             line_doc(),
             text("} while ("),
             exp2doc(e),
             text(");"));
  case TryCatch*(s1,ss):
    s = cat9(text("try"),
             line_doc(),
             nest(2,stmt2doc(s1)),
             line_doc(),
             text("catch {"),                    
             line_doc(),
             nest(2,switchclauses2doc(ss)),
             line_doc(),
             text("}"));
  }
  return s;
}

Doc pat2doc(pat p) {
  Doc s;
  switch (p.raw_pat) {
  case Wild: s = text("_");
  case Null: s = text("null");
  case Int(i):
    s = text(sprintf("%d",snd(i)));
  case Char(ch): s =  text(sprintf("'%s'",char_escape(ch)));
  case Bool(b): s = text(b ? "true" : "false");
  case Float(x): s = text(x);
  case Var(v): s = text(v);
  case Tuple(ts):
    s = cat3(text("$("),
             ppseq(pat2doc,",",ts),
             text(")"));
  case Pointer(p):
    s = cat2(text("&"),pat2doc(p));
  case Reference(v):
    s = cat2(text("*"),var2doc(v));
  case UnknownId(q):
    s = qvar2doc(q);
  case UnknownCall*(q,tvs,ps):
    s = cat3(qvar2doc(q),
             egroup("<",">",",",List::map(text,tvs)),
             group("(",")",",",List::map(pat2doc,ps)));
  case UnknownFields*(q,tvs,dps):
    s = cat3(qvar2doc(q),
             egroup("<",">",",",List::map(text,tvs)),
             group("{","}",",",List::map(dp2doc,dps)));
  case Struct*(sd,_,tvs,dps):
    s = cat3(sd.name==null?nil_doc():qvar2doc(sd.name.v),
             egroup("<",">",",",List::map(text,tvs)),
             group("{","}",",",List::map(dp2doc,dps)));
  case Enum*(n,_,tvs,ps,_,_):
    s = cat3(qvar2doc(n),
             egroup("<",">",",",List::map(text,tvs)),
             egroup("(",")",",",List::map(pat2doc,ps)));
  case Xenum*(n,tvs,ps,_,_):
    s = cat3(qvar2doc(n),
             egroup("<",">",",",List::map(text,tvs)),
             egroup("(",")",",",List::map(pat2doc,ps)));
  }
  return s;
}

Doc dp2doc(*(<designator>list,pat) dp) {
  return cat2(egroup("","=","=",List::map(designator2doc,dp.1)),
              pat2doc(dp.2));
}

Doc switchclause2doc(switch_clause c) {
  if (c.where_clause == null && c.pat.raw_pat == ^raw_pat.Wild)
    return     
      cat2(text("default: "),
           nest(2,cat2(line_doc(),stmt2doc(c.body))));
  else if (c.where_clause == null)
    return     
      cat4(text("case "),
           pat2doc(c.pat),
           text(": "),
           nest(2,cat2(line_doc(),stmt2doc(c.body))));
  else 
    return     
      cat6(text("case "),
           pat2doc(c.pat),
           text(" where "),
           exp2doc(c.where_clause.v),
           text(": "),
           nest(2,cat2(line_doc(),stmt2doc(c.body))));
}

Doc switchclauses2doc(<switch_clause>list cs) {
  return ppseql(switchclause2doc,"",cs);
}

Doc decl2doc(decl d) {
  Doc s;
  switch (d.raw_decl) {
  case FnDecl(fd):
    typ t = ^typ.FnType(^(fd.tvs,
                          fd.ret_type,
                          List::map(arg_mk_opt,fd.args),
                          fd.varargs));
    s = cat7(text(fd.is_inline?"inline ":""),
             scope2doc(fd.scope),
             tqtd2doc(^tqual(false,false,false),t,^Opt(qvar2doc(fd.name))),
             text(" {"),
             nest(2,cat2(line_doc(),stmt2doc(fd.body))),
             line_doc(),
             text("}"));
  case StructDecl(sd):
    if (sd.fields==null)
      s = cat5(scope2doc(sd.scope),
               text("struct "),
               (sd.name==null)?text(""):qvar2doc(sd.name.v),
               tvars2doc(sd.tvs),
               text(";"));
    else
      s = cat8(scope2doc(sd.scope),
               text("struct "),
               (sd.name==null)?text(""):qvar2doc(sd.name.v),
               tvars2doc(sd.tvs),
               text(" {"),
               nest(2,(sd.fields==null)?text(""):
                    cat2(line_doc(),structfields2doc(sd.fields.v))),
               line_doc(),
               text("};"));
  case VarDecl(vd):
    s = cat4(scope2doc(vd.scope),
             tqtd2doc(vd.tqual,vd.typ,^Opt(qvar2doc(vd.name))),
             (vd.initializer == null) ? text("")
               : cat2(text(" = "),exp2doc(vd.initializer.v)),
             text(";"));
  case UnionDecl:
    s = text("**UnionDecl**");
  case EnumDecl(ed):
    if (ed.fields==null)
      s = cat5(scope2doc(ed.scope),
               text("enum "),
               (ed.name==null)?text(""):qvar2doc(ed.name.v),
               tvars2doc(ed.tvs),
               text(";"));
    else
      s = cat8(scope2doc(ed.scope),
               text("enum "),
               (ed.name==null)?text(""):qvar2doc(ed.name.v),
               tvars2doc(ed.tvs),
               text(" {"),
               nest(2,(ed.fields==null)?text(""):
                    cat2(line_doc(),enumfields2doc(ed.fields.v))),
               line_doc(),
               text("};"));
  case XenumDecl(xed):
    s = cat4(scope2doc(xed.scope),
             text("xenum "),
             qvar2doc(xed.name),
             (xed.fields==null)
             ?text(";")
             :cat4(text(" {"),
                   nest(2,cat2(line_doc(),enumfields2doc(xed.fields))),
                   line_doc(),
                   text("};")));
  case LetDecl*(p,_,e):
    s = cat5(text("let "),
             pat2doc(p),
             text(" = "),
             exp2doc(e),
             text(";"));
  case TypedefDecl(td):
    s = cat3(text("typedef "),
             tqtd2doc(^tqual(false,false,false),
                      td.defn,
                      ^Opt(cat2(qvar2doc(td.name),tvars2doc(td.tvs)))),
             text(";"));
  case NamespaceDecl*(v,tdl):
    s = cat7(text("namespace "),
             text(v),
             text(" {"),
             line_doc(),
             ppseql(decl2doc,"",tdl),
             line_doc(),
             text("}"));
  case UsingDecl*(q,tdl):
    s = cat7(text("using "),
             qvar2doc(q),
             text(" {"),
             line_doc(),
             ppseql(decl2doc,"",tdl),
             line_doc(),
             text("}"));
  }
  return s;
}

Doc scope2doc(scope sc) {
  switch (sc) {
  case Static: return text("static ");
  case Public: return nil_doc();
  case Extern: return text("extern ");
  case Abstract: return text("abstract ");
  }
}

// Conversion between alternate forms of types
*(tqual,typ,<type_modifier>list)
to_tms(tqual tq,typ t)
{
  switch (t) {
  case ArrayType*(t2,tq2,k):
    // Throw away tq, can't qualify an array
    *(tqual,typ,<type_modifier>list) x = to_tms(tq2,t2);
    type_modifier tm;
    switch (k) {
    case UntaggedArray:
      tm = ^type_modifier.Carray;
    case TaggedArray:
      tm = ^type_modifier.Array;
    case FixedArray(e):
      tm = ^type_modifier.ConstArray(e);
    }
    return ^(x.1,x.2,^list(tm,x.3));

  case PointerType*(t2,nullable,tq2):
    *(tqual,typ,<type_modifier>list) x = to_tms(tq2,t2);
    bool nl = false;
    while (true) {
      switch (nullable.v) {
      case Eq(x): nl = x; break;
      case Forward(y): nullable = y; continue;
      case None: nl = false; break;
      }
    }
    type_modifier tm = ^type_modifier.Pointer(^(nl,tq));
    return ^(x.1,x.2,^list(tm,x.3));

  case FnType*(typvars,t2,args,varargs):
    // discard tq because you can't qualify a function
    *(tqual,typ,<type_modifier>list) x = to_tms(empty_tqual(),t2);
    <type_modifier>list tms =
       ^list(^type_modifier.Function(^funcparams.WithTypes(^(args,varargs))),
                                     x.3);
    if (typvars != null)
      tms = ^list(^type_modifier.TypeParams(typvars),tms);
    return ^(x.1,x.2,tms);

  case Evar*(k,topt,i):
    if (topt == null)
      return ^(tq,t,null);
    else return to_tms(tq,topt.v);

  case TypedefType*(n,ts,topt):
    if (topt == null || !expand_typedefs)
      return ^(tq,t,null);
    else
      return to_tms(tq,topt.v);

  default:
    return ^(tq,t,null);
  }
}

Doc tqtd2doc(tqual tq, typ t, <Doc>Opt dopt) {
  *(tqual,typ,<type_modifier>list) x = to_tms(tq,t);
  <type_modifier>list tms = List::rev(x.3);
  if (tms==null && dopt==null)
    return cat2(tqual2doc(x.1),ntyp2doc(x.2));
  else
    return
      cat4(tqual2doc(x.1),
           ntyp2doc(x.2),
           text(" "),
           dtms2doc((dopt==null)?nil_doc():dopt.v,tms));
}

Doc structfield2doc(*(field_name,tqual,typ) f) {
  return cat2(tqtd2doc(f.2,f.3,^Opt(text(f.1))),
              text(";"));
}

Doc structfields2doc(<*(field_name,tqual,typ)>list fields) {
  return ppseql(structfield2doc,"",fields);
}

Doc tuple2doc(typ t) {
  switch (t) {
  case TupleType(ts):
    return args2doc(ts);
  default:
    // FIX: This is an unexpected case
    return typ2doc(t);
  }
}

Doc enumfield2doc(enumfield f) {
  return
    cat3(qvar2doc(f.name),
         (f.tag==null)?nil_doc():cat2(text("="),exp2doc(f.tag.v)),
         (f.typs==null)?nil_doc():args2doc(f.typs));
}

Doc enumfields2doc(<enumfield>list fields) {
  return ppseql(enumfield2doc,",",fields);
}

#ifndef PP_WIDTH
#define PP_WIDTH 72
#endif

//// Public interface -- extend with what clients actually want to print
void decllist2file(<decl>list tdl, FILE f) {
  for (; tdl != null; tdl = tdl.tl) {
    file_of_doc(decl2doc(tdl.hd),PP_WIDTH,f);
    fprintf(f,"\n"); fflush(f);
  }
}

string decllist2string(<decl>list tdl) {
  return string_of_doc(seql("",List::map(decl2doc,tdl)),PP_WIDTH);
}
string exp2string(exp e) { 
  return string_of_doc(exp2doc(e),PP_WIDTH);
}
string stmt2string(stmt s) { 
  return string_of_doc(stmt2doc(s),PP_WIDTH);
}
string typ2string(typ t) { 
  return string_of_doc(typ2doc(t),PP_WIDTH);
}
string qvar2string(qvar v) {
  return string_of_doc(qvar2doc(v),PP_WIDTH);
}
string prim2string(primop p) { 
  return string_of_doc(prim2doc(p),PP_WIDTH);
}

string pat2string(pat p) {
  return string_of_doc(pat2doc(p),PP_WIDTH);
}
