/* Main file */

#include "arg.h"
#include "core.h"
#include "list.h"
#include "string.h"
#include "dict.h"
#include "filename.h"
#include "sys.h"
#include "id.h"
#include "parse.h"
#include "gcdfec.h"
#include "absyn.h"
#include "synpp.h"
#include "tcutil.h"
#include "tcenv.h"
#include "tc.h"
#include "toc.h"

open Core;
#define list List::list

extern void Lex::lex_init();

Arg::bool_ref pp = ^Arg::bool_ref(false);
Arg::bool_ref noexpand = ^Arg::bool_ref(false);
Arg::bool_ref tc = ^Arg::bool_ref(false);
Arg::bool_ref gcc = ^Arg::bool_ref(false);
Arg::bool_ref vc = ^Arg::bool_ref(false);
Arg::bool_ref toc = ^Arg::bool_ref(false);

void set_check_null() {
  Toc::check_for_null = true;
}

<string>list includes = null;
void add_include(string s) {
  includes = ^list(s,includes);
}

bool compile_failure = false; // for exit code (helps Makefile)

int pop_main() {

  <*(string,Arg::spec,string)>list options =
    ^list(^("-pp",^Arg::spec.Set(pp), "pretty print"),
    ^list(^("-noexpandtypedefs",^Arg::spec.Set(noexpand),
            "don't expand typedefs in pretty printing"),
    ^list(^("-tc",^Arg::spec.Set(tc), "type check"),
    ^list(^("-gcc",^Arg::spec.Set(gcc), "use gcc as preprocessor"),
    ^list(^("-vc",^Arg::spec.Set(vc), "use Visual C++ as preprocessor"),
    ^list(^("-toc",^Arg::spec.Set(toc), "translate to C"),
    ^list(^("-I",^Arg::spec.String(add_include), "include directory"),
    ^list(^("-check_null",^Arg::spec.Unit(set_check_null), "turn on null-checking in generated C code"),
    null))))))));

  Lex::lex_init();
  Arg::parse(options, compile_file, "Options:");

  return compile_failure ? 1 : 0;
}

void compile_file(string filename) {

  string basename = Filename::chop_extension(filename);

  fprintf(tal_stderr,"Compiling file: %s\n", basename);

  // establish filenames
  string preprocfile = strconcat(basename,  ".i");

   // Run the preprocessor
  string cmd = ""; // The command to run

  // Figure out the gcc version of the command
  string gcc_inc_string =
    String::strconcat_l
      (List::fold_left(fun <string>list f(<string>list l,string s) {
                         return ^list(" -I",^list(s,l));
                       },
                       null,
                       includes));
  string gcc_def_string = "";
  string gcc_cmd =
    String::strconcat_l(^list("gcc -x c -E -U__GNUC__ ",
	     	        ^list(gcc_inc_string,
			^list(" ",
			^list(gcc_def_string,
			^list(" ",
			^list(filename,
			^list(" > ",
			^list(preprocfile, null)))))))));
  // Figure out the Visual C version of the command
  string vc_inc_string = "";
  string vc_def_string = "";
  string vc_cmd =
    String::strconcat_l(^list("cl /nologo ",
			^list(vc_inc_string,
			^list(" ",
			^list(vc_def_string,
			^list(" /P /TC ",
			^list(filename, null)))))));

  // Set up the system-dependent default
#ifdef SYS_UNIX
  cmd = gcc_cmd;
#else
  cmd = vc_cmd;
#endif

  // Command-line args can be used to override the default
  if (gcc.v) cmd = gcc_cmd;
  else if (vc.v) cmd = vc_cmd;

  fprintf(tal_stderr,"%s\n",cmd);
  system(string_to_Cstring(cmd));

  // reset front-end -- necessary for good error messages!
  Gcdfec::reset_fe(preprocfile);

  // Actually process the file
  FILE f;
  try
    f = file_open(preprocfile, "r");
  handle y {
    fprintf(tal_stderr,"FILE OPEN FAILED!\n");
    compile_failure=true;
    return;
  }

  // parse
  <Absyn::decl>list tds = null;
  // try {
    tds = Parse::parse_file(f);
    fprintf(tal_stderr,"Parsing completed\n");
    fflush(tal_stderr);
    // } handle x {
    // fprintf(tal_stderr,"PARSING FAILED!\n");
    // fflush(tal_stderr);
    // compile_failure=true;
    // }
  if (tds != null && tc.v) try {
    if (noexpand.v) Synpp::expand_typedefs = false;
    else Synpp::expand_typedefs = true;
    Tc::tc(Tcenv::tc_init(),tds);
    fprintf(tal_stderr,"Type checking completed\n");
    fflush(tal_stderr);
  } catch {
  case Tcutil::TypeErr:
    fprintf(tal_stderr,"Type error!\n");
    fflush(tal_stderr);
    compile_failure=true;
  case Dict::Absent:
    fprintf(tal_stderr,"Dict::Absent occurred during type checking!\n");
    fflush(tal_stderr);
    compile_failure=true;
    //default:
    //    fprintf(tal_stderr,"Error during type checking!\n");
    //    fflush(tal_stderr);
    //    compile_failure=true;
  }
  if (toc.v) {
    tds = Toc::toc(tds); // translate to C
  }
  if (tds != null && pp.v) {
    if (noexpand.v) Synpp::expand_typedefs = false;
    else Synpp::expand_typedefs = true;
    if (toc.v) printf("#include \"cyc_include.h\"\n\n");
    Synpp::decllist2file(tds,tal_stdout);
    fflush(tal_stdout);
  }
  if (Gcdfec::error_p()) {
    fprintf(tal_stderr,"COMPILATION FAILED!\n");
    fflush(tal_stderr);
    compile_failure=true;
  }
  file_close(f);
  file_delete(preprocfile);
  return;
}
