/* Type checking for statements */

/* Todo:
   try/catch, cut/splice, fallthru, label/goto
 */

#include "core.h"
#include "list.h"
#include "dict.h"
#include "set.h"
#include "gcdfec.h"
#include "absyn.h"
#include "synpp.h"
#include "tcutil.h"
#include "tcenv.h"
#include "tcexp.h"
#include "tcpat.h"

prefix Tcstmt;
open Tcstmt;

open Core;
open List;
open Set;
open Gcdfec;
open Absyn;
open Synpp;
open Tcutil;
open Tcenv;
open Tcexp;
open Tcpat;

synth tcStmt(tenv te, stmt s0) {
  switch (s0.raw_stmt) {

  case Skip: return skip_synth(te);

  case Exp(e): return tcExp(clear_fallthru(te),null,e);

  case Seq*(s1,s2):
    _ te1 = clear_fallthru(te);
    _ ssyn1 = tcStmt(te1,s1);
    // JGM: try to treat sequences as "tail-calls" to avoid a deep
    // stack.
    while (true) {
      switch (s2.raw_stmt) {
      case Seq*(s3,s4): 
	ssyn1 = seq_synth(ssyn1,tcStmt(layer_synth(te1,ssyn1),s3));
	s2 = s4;
	continue;
      default:
	break; 
      }
    }
    return seq_synth(ssyn1,tcStmt(layer_synth(te,ssyn1),s2));
  case Return(eopt):
    te = clear_fallthru(te);
    typ t = return_typ(te);
    if (eopt == null) {
      switch (t) {
      case VoidType:
        ; // skip
      default:
        terr(s0.loc,sprintf("must return a value of type %s",typ2string(t)));
      }
    } else {
      exp e = eopt.v;
      _ esyn = tcExp(te,^Opt(t),e);
      if (!coerce_use(te,e,t))
	terr(s0.loc,
             sprintf("returns value of type %s but requires %s",
                     typ2string(synth_typ(esyn)), typ2string(t)));
      switch (compress(t)) {
      case VoidType: terr(s0.loc,"attempt to return void expression");
      default: ; // skip
      }
    }
    return empty_synth(te);

  case IfThenElse*(e,s1,s2):
    _ te = clear_fallthru(te);
    _ esyn = tcExp(te,^Opt(bool_t),e);
    if (!coerce_bool_t(te,e))
      terr(e.loc,sprintf("test of if statement has type %s instead of bool",
                         typ2string(synth_typ(esyn))));
    _ te_pr = bool_layer_synth(te,esyn);
    _ ssyn1 = tcStmt(te_pr.1,s1);
    _ ssyn2 = tcStmt(te_pr.2,s2);
    return join_synth(seq_synth(esyn,ssyn1),seq_synth(esyn,ssyn2));

  case While*(e,s):
    _ te = clear_fallthru(te);
    _ esyn = tcExp(te,^Opt(bool_t),e);
    if (!coerce_bool_t(te,e))
      terr(e.loc,sprintf("test of while loop has type %s instead of bool",
                         typ2string(synth_typ(esyn))));
    _ te_pr = bool_layer_synth(te,esyn);
    _ te_true = te_pr.1;
    _ ssyn = tcStmt(set_in_loop(te_true),s);
    return loop_synth(esyn,ssyn);

  case Break:
    if (is_ok_break(te))
      return forward_jump_synth(te);
    else {
      terr(s0.loc,"break outside of loop/switch");
      return skip_synth(te);
    }

  case Continue:
    if (!is_ok_continue(te))
      terr(s0.loc,"continue outside of loop");
    return empty_synth(te);

  case Goto(_):
    warn(s0.loc, "goto may be unsafe!!!");
    return forward_jump_synth(te);

  case For*(e1,e2,e3,s):
    te = clear_fallthru(te);
    _ esyn1 = tcExp(te,null,e1);
    te = layer_synth(te,esyn1);
    _ esyn2 = tcExp(te,^Opt(bool_t),e2);
    _ te_pr = bool_layer_synth(te,esyn2);
    _ te_body = set_in_loop(te_pr.1);
    if (!coerce_bool_t(te,e2))
      terr(e2.loc,sprintf("test of for loop has type %s instead of bool",
                          typ2string(synth_typ(esyn2))));
    _ ssyn = tcStmt(te_body,s); 
    te_body = layer_synth(te_body,ssyn);
    _ esyn3 = seq_synth(ssyn,tcExp(te_body,null,e3)); 
    return seq_synth(esyn1,loop_synth(esyn2,esyn3));

  case Switch*(e,scs):
    te = clear_fallthru(te);
    _ esyn = tcExp(te,null,e);
    _ t = synth_typ(esyn);
    te = layer_synth(te,esyn);
    synth swsyn = (scs == null) ? esyn : empty_synth(te);
    for (_ scs = scs; scs != null; scs = scs.tl) {
      _ p = scs.hd.pat;
      _ pat_r = tcPat(te,p);
      _ new_tvs = pat_r.1;
      _ x = pat_r.2;
      if (!unify(p.topt.v,t))
	terr(scs.hd.loc,
	     sprintf("switch on type %s, but case expects type %s",
		     typ2string(t), typ2string(p.topt.v)));
      tenv te2 = add_local_vars(scs.hd.loc,
                                add_type_vars(scs.hd.loc,te,new_tvs),
                                x,true);
      _ where_opt = scs.hd.where_clause;
      if (where_opt != null) {
	_ esyn = tcExp(te2,^Opt(bool_t),where_opt.v);
	if (!coerce_bool_t(te,where_opt.v))
	  terr(where_opt.v.loc,
	       sprintf("where clause has type %s instead of bool",
		       typ2string(synth_typ(esyn))));
	// could only have the "true" part of esyn propagated
	te2 = layer_synth(te2,esyn);
      }
      te2 = set_in_switch(te2);
      _ s = scs.hd.body;
      _ ssyn = remove_local_vars(te,x,tcStmt(te2,s));
      if (synth_may_implicit_fallthru(ssyn))
	terr(s.loc,
	     "switch case must not implicitly fall through to next case");
      if (!synth_may_explicit_fallthru(ssyn)) {
	swsyn = join_synth(swsyn,ssyn);
      } else {
	// we need to record only the forward jump info in swsyn
	swsyn = join_synth(swsyn,drop_fallthru_synth(ssyn));

	// check that the bound type variables and pattern variables are
	// the same in the next pattern (if any).
	if (scs.tl == null) terr(s.loc,"last case of switch does a fallthru");
	else {
	  _ p2 = scs.tl.hd.pat;
	  _ pat_r2 = tcPat(te,p);
	  _ new_tvs2 = pat_r2.1;
	  _ x2 = pat_r.2;
	  for (; new_tvs != null && new_tvs2 != null; new_tvs = new_tvs.tl, 
		 new_tvs2 = new_tvs2.tl) {
	    if (strcmp(new_tvs.hd,new_tvs2.hd) != 0) {
	      terr(p2.loc,"case fallthru: bound type variable mismatch");
	      break;
	    }
	  }
	  if (new_tvs != null || new_tvs2 != null)
	    terr(p2.loc,"case fallthru: bound type variable mismatch");
	  for (; x != null && x2 != null; x = x.tl, x2 = x2.tl) {
	    _ vqt1 = x.hd;
	    _ vqt2 = x2.hd;
	    if (strcmp(vqt1.1,vqt2.1) != 0 || !equal_tqual(vqt1.2,vqt2.2) ||
		unify(vqt1.3,vqt2.3)) {
	      terr(p2.loc,"case fallthru: bound pattern variable mismatch");
	      break;
	    }
	  }
	  if (x != null || x2 != null)
	    terr(p2.loc,"case fallthru: bound pattern variable mismatch");
	}
      }
    }
    check_switch_exhaustive(s0.loc,scs);
    return seq_synth(esyn,switch_bottom(swsyn));

  case TryCatch*(s,scs):
    _ te = clear_fallthru(te);
    _ ssyn1 = tcStmt(te,s);

    synth swsyn = empty_synth(te);

    for (_ scs = scs; scs != null; scs = scs.tl) {
      _ p = scs.hd.pat;
      _ pat_r = tcPat(te,p);
      _ new_tvs = pat_r.1;
      _ x = pat_r.2;

      if (!unify(p.topt.v,exn_t))
        terr(scs.hd.loc,
             sprintf("expected xenum exn but found %s",
                     typ2string(p.topt.v)));

      tenv te2 = add_type_vars(scs.hd.loc,te,new_tvs);
      _ where_opt = scs.hd.where_clause;
      if (where_opt != null) {
	_ esyn = tcExp(te2,^Opt(bool_t),where_opt.v);
	if (!coerce_bool_t(te,where_opt.v))
	  terr(where_opt.v.loc,
	       sprintf("where clause has type %s instead of bool",
		       typ2string(synth_typ(esyn))));
	// could only have the "true" part of esyn propagated
	te2 = layer_synth(te2,esyn);
      }
      te2 = set_in_switch(te2);

      _ s = scs.hd.body;
      _ ssyn = decl_synth(te2,x,true,s);
      if (synth_may_implicit_fallthru(ssyn))
	terr(s.loc,"catch case must not implicitly fall through to next case");
      if (!synth_may_explicit_fallthru(ssyn)) {
	swsyn = join_synth(swsyn,ssyn);
      } else {
	swsyn = join_synth(swsyn,drop_fallthru_synth(ssyn));
	if (scs.tl == null) terr(s.loc,"last case of catch does a fallthru");
	else {
	  _ p2 = scs.tl.hd.pat;
	  _ pat_r2 = tcPat(te,p);
	  _ new_tvs2 = pat_r2.1;
	  _ x2 = pat_r.2;
	  for (; new_tvs != null && new_tvs2 != null; new_tvs = new_tvs.tl, 
		 new_tvs2 = new_tvs2.tl) {
	    if (strcmp(new_tvs.hd,new_tvs2.hd) != 0) {
	      terr(p2.loc,"case fallthru: bound type variable mismatch");
	      break;
	    }
	  }
	  if (new_tvs != null || new_tvs2 != null)
	    terr(p2.loc,"case fallthru: bound type variable mismatch");
	  for (; x != null && x2 != null; x = x.tl, x2 = x2.tl) {
	    _ vqt1 = x.hd;
	    _ vqt2 = x2.hd;
	    if (strcmp(vqt1.1,vqt2.1) != 0 || !equal_tqual(vqt1.2,vqt2.2) ||
		unify(vqt1.3,vqt2.3)) {
	      terr(p2.loc,"case fallthru: bound pattern variable mismatch");
	      break;
	    }
	  }
	  if (x != null || x2 != null)
	    terr(p2.loc,"case fallthru: bound pattern variable mismatch");
	}
      }
    }
    check_catch_overlap(s0.loc,scs);
    return join_synth(ssyn1,switch_bottom(swsyn));

/*
  case TryHandle*(s1,x,s2):
    _ ssyn1 = tcStmt(te,s1);
    _ ssyn2 = decl_synth(te,^list(^(x,^typ.ExnType),null),true,s2);
    return join_synth(ssyn1,ssyn2,false);

  case TryCatchFinally(q):
    // to simplify our lives for now, we just translate this into a
    // try/handle expression -- this means we can't deal with finally
    // clauses yet.
    if (q.4 != null) terr(s0.loc,"finally clauses not supported yet -- sorry.");
    var exn_var = "_";
    exp exn_var_exp = ^exp(null,^raw_exp.Var(exn_var),null,s0.loc);
    stmt sw = ^stmt(^raw_stmt.ExnSwitch(^(exn_var_exp,q.2,q.3)),s0.loc);
    raw_stmt rs = ^raw_stmt.TryHandle(^(q.1,exn_var,sw));
    s0.raw_stmt = rs;
    return tcStmt(te,s0);

  case With(q): return tcWith(te,s0.loc,s0,q);
*/

  case Fallthru:
    if (!is_ok_fallthru(te)) {
      terr(s0.loc,"bad explicit fallthru");
      return skip_synth(te);
    } else 
      return fallthru_synth(te);

  case Decl*(d,s):
    switch (d.raw_decl) {
    case FnDecl(fd):
      return impos("tcStmt: nested function declarations are not implemented");
    case StructDecl(sd):
      return impos("tcStmt: nested struct declarations are not implemented");
    case UnionDecl:
      return impos("tcStmt: nested union declarations are not implemented");
    case EnumDecl(ed):
      return impos("tcStmt: nested enum declarations are not implemented");
    case XenumDecl(xed):
      return impos("tcStmt: nested xenum declarations are not implemented");
    case TypedefDecl(tdd):
      return impos("tcStmt: nested typedef declarations are not implemented");
    case VarDecl(vd):
      if (vd.name.1 != null)
        terr(d.loc, "local variables cannot be qualified");
      _ x = vd.name.2;
      _ tq = vd.tqual;
      _ t = vd.typ;
      check_valid_type(s0.loc,te,lookup_type_vars(te),t);
      bool init = false;
      if (vd.initializer != null) {
        init = true;
        _ esyn = tcExp(te,^Opt(t),vd.initializer.v);
        if (!coerce_assign(te,vd.initializer.v,t))
            terr(d.loc,
                 sprintf("%s declared with type %s, initialized with type %s",
                         x,
                         typ2string(t),
                         typ2string(synth_typ(esyn))));
        te = set_unassigned(te,maybe_unassigned(esyn));
      }
      return decl_synth(te,^list(^(x,tq,t),null),init,s);
    case LetDecl(trip):
      _ p = trip.1;
      _ topt = trip.2;
      _ e = trip.3;
      _ esyn = tcExp(te,null,e);
      trip.2 = e.topt;
      _ pat_res = tcPat(te,p);
      _ new_tvars = pat_res.1;
      _ x = pat_res.2;
      // FIX: if let-declarations were of the form "let pat = e in S" then
      // we could allow any type variables within e to be used within S.
      if (new_tvars != null) 
	terr(d.loc,"can't introduce type variables in let-clause");
      if (topt != null && !unify(p.topt.v,topt.v))
        terr(d.loc,
             "type of pattern does not match declared type");
      if (!unify(p.topt.v,synth_typ(esyn)))
	terr(d.loc,
	     sprintf("pattern type %s does not match definition type %s",
		     typ2string(p.topt.v),typ2string(synth_typ(esyn))));
      check_let_pat_exhaustive(s0.loc,p);
      return decl_synth(te,x,true,s);
    case NamespaceDecl*(n,tds):
      terr(d.loc,"namespace is allowed at top level only");
      return skip_synth(te);
    case UsingDecl*(q,tds):
      // FIX: we should allow "using" in limited scope
      terr(d.loc,"using is allowed at top level only");
      return skip_synth(te);
    }

  case Label*(x,s):
    // FIX:  interaction with goto and unassigned variables
    // deviates from Java as though immediate break
    tcStmt(add_label(te,x),s);
    return skip_synth(te);

  case Cut(s):
    // FIX: cut
    return impos("tcStmt: cut is not implemented");
/*
    switch (te.le) {
    case Frame(p):
      // be sure to prevent break/continue across cut
      tcStmt(set_ok_break_continue(^tenv(te.ge,^frames.Hidden(p)),false),
             s);
      // very conservative in presence of Cyclone right now
      // BUG: splice might assign to variables (see comments in poptypeexp)
      return base_ssyn(te);
    case Hidden(_):
      terr(s0.loc,"cannot cut while codegen is in cut");
      return jump_synth_g.v;
    case Outermost(_):
      terr(s0.loc,"cut can only be used within codegen");
      return jump_synth_g.v;
    }
*/

  case Splice(s):
    // FIX: splice
    return impos("tcStmt: splice is not implemented");
/*
    switch (te.le) {
    case Hidden(p):
      // be sure to prevent break/continue across splice
      tcStmt(set_ok_break_continue(^tenv(te.ge,^frames.Frame(p)),false),
             s);
      // very conservative in presence of Cyclone right now
      // BUG: splice might assign to variables (see comments in poptypeexp)
      return base_ssyn(te);
    case Frame(_):
      terr(s0.loc,"cannot splice while already in codegen");
      return jump_synth_g.v;
    case Outermost(_):
      terr(s0.loc,"splice can only be used within cut");
      return jump_synth_g.v;
    }
*/

  case Do*(s,e):
    te = clear_fallthru(te);
    _ ssyn = tcStmt(set_in_loop(te),s);
    _ te2 = layer_synth(te,ssyn);
    _ esyn = tcExp(te2,^Opt(bool_t),e);
    if (!coerce_bool_t(te,e))
      terr(e.loc,sprintf("test of do loop has type %s instead of bool",
                         typ2string(synth_typ(esyn))));
    return loop_synth(esyn,ssyn);
  }
} // end tcStmt


static tenv add_local_vars(Gcdfec::seg loc, tenv te,
                           <*(var,tqual,typ)>list x, bool init) {
  tenv te2 = te;
  for (; x != null; x = x.tl) 
    te2 = add_local_var(loc,te2,x.hd.1,x.hd.2,x.hd.3,init);
  return te2;
}

static synth remove_local_vars(tenv te, <*(var,tqual,typ)>list x,synth ssyn) {
  <var>Set::set vs = Set::empty(strcmp);
  for (; x != null; x = x.tl)
    vs = Set::insert(vs,x.hd.1);
  <var>Set::set shadowed = Set::intersect(get_unassigned(te),vs);
  return add_var_synth(shadowed,ssyn);
}

static synth decl_synth(tenv te, <*(var,tqual,typ)>list x, bool init, stmt s) {
  tenv te2 = add_local_vars(s.loc,te,x,init);
  synth ssyn = tcStmt(te2,s);
  return remove_local_vars(te,x,ssyn);
}


