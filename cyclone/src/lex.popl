{
#include "core.h"
#include "list.h"
#include "lexing.h"
#include "set.h"
#include "string.h"
#include "hashtable.h"
#include "parse.h"
#include "gcdfec.h"
#include "dict.h"

open Core;
open List;
open Lexing;
open Parse;
open Absyn;

/* for parser -- must not be prefixed */
int yylex() { 
 int ans = Lex::token(lbuf.v);
 yylloc.first_line = lexeme_start (lbuf.v);
 yylloc.last_line  = lexeme_end   (lbuf.v);
 switch ans {
 case IDENTIFIER        : yylval = ^YYSTYPE.String(Lex::token_string);
 case QUAL_IDENTIFIER   : yylval = ^YYSTYPE.QualId(Lex::token_qvar);
 case QUAL_TYPEDEF_NAME : yylval = ^YYSTYPE.QualId(Lex::token_qvar);
 case TYPE_VAR          : yylval = ^YYSTYPE.String(Lex::token_string);
 case INTEGER_CONSTANT  : yylval = ^YYSTYPE.Int(Lex::token_int);
 case CHARACTER_CONSTANT: yylval = ^YYSTYPE.Char(Lex::token_char);
 case FLOATING_CONSTANT : yylval = ^YYSTYPE.Float(Lex::token_string);
 case STRING            : yylval = ^YYSTYPE.String(Lex::token_string);
 default: /* skip */ ;
 }
 return ans;
} 
void yyerror(string s) { 
  Gcdfec::post_error
    (Gcdfec::mk_err_parse
     (Gcdfec::seg_of_abs(yylloc.first_line,yylloc.last_line), s));
} 

prefix Lex;
open   Lex;

void lex_init() {
  /* build reserved word dictionary */
  <string,short>Hashtable::table t = 
     Hashtable::create(101, strcmp, Hashtable::hash_string);
  rw = ^Opt(t);
  for (int i=0; i < size(rw_array); ++i) 
    Hashtable::insert(t, rw_array[i].1, rw_array[i].2);

  typedef_init();
}

*(sign,int) token_int;
char        token_char;
string      token_string;
qvar        token_qvar = ^(null,"*bogus*");

open Gcdfec {
static void err<a>(string msg,<a>lexbuf lb) {
  seg s = seg_of_abs(lexeme_start(lb),lexeme_end(lb));
  post_error(mk_err_lex (s,msg));
}
int runaway_start = 0;
static void runaway_err<a>(string msg,<a>lexbuf lb) {
  seg s = seg_of_abs(runaway_start,lexeme_start(lb));
  post_error(mk_err_lex (s,msg));
}
}
static int comment_depth = 0;

/************************ INTEGER CONSTANTS ************************/

/* String to integer conversions.  Core::int_of_string does not handle
   all of the cases we want: it does not handle a trailing 'u', 'U',
   'l', or 'L'; and in particular, it does not treat '0'['0'-'7'] as
   an octal number.  */
/* Helper function that tells where the digits in the int constant
   end */
int get_finish(string s) {
  int len = size(s);
  if (len-2>=0) {
    char c = s[len-2];
    if (c=='u'||c=='U'||c=='l'||c=='L') return len-2;
  }
  if (len-1>=0) {
    char c = s[len-1];
    if (c=='u'||c=='U'||c=='l'||c=='L') return len-1;
  }
  return len;
}
/* Helper function that tells whether the int constant is signed
   or unsigned */
sign get_sign(string s) {
  int len = size(s);
  if (len-2>0 && (s[len-2]=='u' || s[len-2]=='U')) return ^sign.Unsigned;
  if (len-1>0 && (s[len-1]=='u' || s[len-1]=='U')) return ^sign.Unsigned;
  return ^sign.Signed;
}
/* Helper function, copied from core.pop (where it is hidden) */
static int int_of_char(char c) {
  if ('0'<=c && c<='9')      return ord(c)-ord('0');
  else if ('a'<=c && c<='f') return 10+ord(c)-ord('a');
  else if ('A'<=c && c<='F') return 10+ord(c)-ord('A');
  else raise InvalidArg("string to integer conversion");
}
/* The arithmetic in this function will be signed */
static signed int intconst_signed(string s, int start, signed int base) {
  signed int n = 0;
  int finish = get_finish(s);
  for(int i=start; i<finish; i++)
    n = n*base+int_of_char(s[i]); // Signed arithmetic!!
  return n;
}
/* The arithmetic in this function will be unsigned */
static unsigned int intconst_unsigned(string s, int start, unsigned int base) {
  unsigned int n = 0;
  int finish = get_finish(s);
  for(int i=start; i<finish; i++)
    n = n*base+(: unsigned int)int_of_char(s[i]); // Unsigned arithmetic!!
  return n;
}
/* The main conversion function */
*(sign, int) intconst(string s, int start, int base) {
  sign u = get_sign(s);
  switch (u) {
  case Signed:
    /* Here the int part will be signed */
    return ^(u,intconst_signed(s,start,base));
  case Unsigned:
    /* Here the int part will be converted to signed, but
       the sign part will show that it should be converted
       back to unsigned. */
    return ^(u,(: signed int)intconst_unsigned(s,start,base));
  }
}

/*********************** CHARACTER CONSTANTS ***********************/

static char char_for_octal_code<a>(<a>lexbuf lb, int start, int howmany) {
  int c = 0;
  for (int i = 0; i<howmany; i++)
    c = (8 * c) + lexeme_char(lb,start+i) - 48;
  return chr(c);
}

static char char_for_hex_code(string s, int start) {
  int c = 0; 
  int len = size(s);
  for (int i = 0; start+i<len; i++) {
    char x = s[start+i];
    if ('0'<=x && x<='9') 
      c = (16 * c) + (ord(x)-ord('0'));
    else if ('A'<=x && x<='F') 
      c = (16 * c) + (ord(x)-ord('A'));
    else if ('a'<=x && x<='f') 
      c = (16 * c) + (ord(x)-ord('a'));
    else break;
  }
  return chr(c);
}

/************************* STRING CONSTANTS *************************/

string string_buffer = "xxxxxxxxxx";
int    string_pos    = 0;
void store_string_char(char c) {
  int sz = size(string_buffer);
  if (string_pos >= sz) {
    int newsz = sz;
    while (string_pos >= newsz) newsz = newsz * 2;
    string str = new_string(newsz);
    strncpy(str,0,string_buffer,0,sz);
    string_buffer = str;
  }	
  string_buffer[string_pos] = c;
  ++string_pos;
}
string get_stored_string () {
  string str = String::substring(string_buffer,0,string_pos);
  string_pos = 0;
  return str;
} 

/************************** RESERVED WORDS **************************/

static <<string,short>Hashtable::table>Opt rw = null;
static *(string,short) rw_array [] = {
  ^("Bool", BOXED_BOOL),
  ^("Char", BOXED_CHAR),
  ^("Double", BOXED_DOUBLE),
  ^("Float", BOXED_FLOAT),
  ^("Int", BOXED_INT),
  ^("Long", BOXED_LONG),
  ^("Short", BOXED_SHORT),
  ^("abstract", ABSTRACT),
  ^("auto", AUTO),
  ^("bool", BOOL),
  ^("break", BREAK),
  ^("case", CASE),
  ^("catch", CATCH),
  ^("char", CHAR),
  ^("codegen", CODEGEN),
  ^("const", CONST),
  ^("continue", CONTINUE),
  ^("cut", CUT),
  ^("default", DEFAULT),
  ^("do", DO),
  ^("double", DOUBLE),
  ^("else", ELSE),
  ^("enum", ENUM),
  ^("extern", EXTERN),
  ^("fallthru", FALLTHRU),
  ^("false", FALSE),
  ^("fill", FILL),
  ^("float", FLOAT),
  ^("for", FOR),
  ^("fprintf", FPRINTF),
  ^("goto", GOTO),
  ^("if", IF),
  ^("inline", INLINE),
  ^("int", INT),
  ^("let", LET),
  ^("long", LONG),
  ^("namespace", NAMESPACE),
  ^("new", NEW),
  ^("null", NULL),
  ^("printf", PRINTF),
  ^("register", REGISTER),
  ^("restrict", RESTRICT),
  ^("return", RETURN),
  ^("short", SHORT),
  ^("signed", SIGNED),
  ^("size", SIZE),
  ^("sizeof", SIZEOF),
  ^("splice", SPLICE),
  ^("static", STATIC),
  ^("struct", STRUCT),
  ^("switch", SWITCH),
  ^("throw", THROW),
  ^("true", TRUE),
  ^("try", TRY),
  ^("typedef", TYPEDEF),
  ^("union", UNION),
  ^("unsigned", UNSIGNED),
  ^("using", USING),
  ^("void", VOID),
  ^("volatile", VOLATILE),
  ^("where", WHERE),
  ^("while", WHILE),
  ^("xenum", XENUM),
  ^("xprintf", XPRINTF)
};


/******************* NAMESPACE, USING, AND TYPEDEF  *******************/

static struct ldecls {
  // records typedefs and namespaces declared in a scope
  <var>Set::set typedefs;
  <var>Set::set namespaces;
}
static struct lvis {  // the King lives!
  // records the namespaces whose declarations are visible in a scope
  <var>list       current_namespace;
  <<var>list>list imported_namespaces;
}
static struct lstate {
  // lstack is the current nested scope structure,
  // decls is the global declaration mapping
  <lvis>list                   lstack; // invariant: never null
  <<var>list,ldecls>Dict::dict decls;
}
static <lstate>Opt lstate = null;
static void typedef_init() {
  _ init_lvis = ^lvis{current_namespace=null,
                      imported_namespaces=null};
  _ init_lstack = ^list(init_lvis, null);
  _ init_decls = Dict::insert(Dict::empty(varlist_cmp),
                              null,
                              ^ldecls{typedefs=Set::empty(strcmp),
                                      namespaces=Set::empty(strcmp)});
  lstate = ^Opt(^lstate{lstack=init_lstack,
                        decls=init_decls});
}
static void lex_sanitycheck() {
  if (lstate == null || lstate.v.lstack == null)
    raise Impossible("Lex: bad lexical state");
}
static bool is_typedef(qvar q) {
  lex_sanitycheck();
  if (q.1 != null) {
    return is_typedef_in_namespace(q.1,q.2);
  }
  // For each enclosing scope...
  for (<lvis>list ls = lstate.v.lstack; ls != null; ls = ls.tl) {
    lvis lv = ls.hd; // ... see what namespaces are visible
    // ... and look in each such visible namespace
    for (<<var>list>list x = ^list(lv.current_namespace,lv.imported_namespaces);
         x != null; x = x.tl) {
      ldecls ld = Dict::lookup(lstate.v.decls,x.hd);
      // ... for typedef q.2
      if (Set::member(ld.typedefs,q.2)) return true;
    }
  }
  return false;
}
static bool is_typedef_in_namespace(<var>list ns, var v) {
  <var>list ans = get_absolute_namespace(ns);
  try {
    ldecls ld = Dict::lookup(lstate.v.decls,ans);
    return Set::member(ld.typedefs,v);
  } catch {
  case Dict::Absent:
    return false;
  }
}
static <var>list get_absolute_namespace(<var>list ns) {
  // ns is a relative namespace, we return the absolute namespace
  // Invariant: ns != null
  var n = ns.hd;
  // For each enclosing scope...
  for (<lvis>list ls = lstate.v.lstack; ls != null; ls = ls.tl) {
    lvis lv = ls.hd; // ... see what namespaces are visible
    // ... and look in each such visible namespace
    for (<<var>list>list x = ^list(lv.current_namespace,lv.imported_namespaces);
         x != null; x = x.tl) {
      ldecls ld = Dict::lookup(lstate.v.decls,x.hd);
      // ... for namespace n
      if (Set::member(ld.namespaces,n))
        // OK, we know ns refers to x.hd+ns
        return List::append(x.hd,ns);
    }
  }
  yyerror(sprintf("undeclared namespace %s",String::str_sepstr(ns,"::")));
  return null; // FIX: can we return something better here? Do we have
               // to give up and raise an exception?
}
void enter_namespace(var s) {
  lex_sanitycheck();
  <var>list ns = lstate.v.lstack.hd.current_namespace;
  <var>list new_ns = List::append(ns,^list(s,null));
  // Push the new namespace on the stack
  lstate.v.lstack =
    ^list(^lvis{current_namespace = new_ns,
                imported_namespaces = null},
          lstate.v.lstack);
  // If this is the first time the new namespace has been encountered,
  // make sure it is bound in the old namespace, and add an empty
  // environment for the new namespace
  ldecls ld = Dict::lookup(lstate.v.decls,ns);
  if (!Set::member(ld.namespaces,s)) {
    lstate.v.decls = Dict::insert(lstate.v.decls,
                                  ns,
                                  ^ldecls{typedefs=ld.typedefs,
                                          namespaces=Set::insert(ld.namespaces,
                                                                 s)});
    lstate.v.decls = Dict::insert(lstate.v.decls,
                                  new_ns,
                                  ^ldecls{typedefs=Set::empty(strcmp),
                                          namespaces=Set::empty(strcmp)});

  }
}
void leave_namespace() {
  lex_sanitycheck();
  lstate.v.lstack = lstate.v.lstack.tl;
}
void enter_using(qvar q) {
  lex_sanitycheck();

  _ ns = List::append(q.1,^list(q.2,null));
  _ ans = get_absolute_namespace(ns);
  _ imported = lstate.v.lstack.hd.imported_namespaces;

  lstate.v.lstack.hd.imported_namespaces = ^list(ans,imported);
}
void leave_using() {
  lex_sanitycheck();

  _ imported = lstate.v.lstack.hd.imported_namespaces;

  lstate.v.lstack.hd.imported_namespaces = imported.tl;
}
void register_typedef(qvar q) {
  // FIX: we assume that q is not in fact qualified
  lex_sanitycheck();

  _ current = lstate.v.lstack.hd.current_namespace;
  _ ds = lstate.v.decls;
  _ ld = Dict::lookup(ds,current);
  _ new_ld = ^ldecls{typedefs=Set::insert(ld.typedefs,q.2),
                     namespaces=ld.namespaces};
  lstate.v.decls = Dict::insert(ds,
                                current,
                                new_ld);
}

// can try interning strings once our hashtable resizes
static short process_id(string s) {
  try
    return Hashtable::lookup(rw.v, s);
  catch {
  case Not_found: 
    if (is_typedef(^(null,s))) {
      token_qvar = ^(null,s);
      return QUAL_TYPEDEF_NAME;
    } else {
      token_string = s;
      return IDENTIFIER;
    }
  }
}

static short process_qual_id(string s) {
  int i = 0;
  int len = size(s);
  <var>list rev_vs = null;

  while (i<len) {
    int start = i;
    for (; i < len && s[i] != ':'; i++) /* skip */ ;
    if (start == i) // no progress -- first char is ':'
      raise Impossible("bad namespace");
    int vlen = i - start;
    var v = new_string(vlen);
    strncpy(v,0,s,start,vlen);
    rev_vs = ^list(v,rev_vs);
    i += 2;
  }
  if (rev_vs == null)
    raise Impossible("bad namespace");
  var v = rev_vs.hd;
  <var>list vs = List::rev(rev_vs.tl);
  token_qvar = ^(vs,v);
  if (is_typedef(token_qvar))
    return QUAL_TYPEDEF_NAME;
  else 
    return QUAL_IDENTIFIER;
}

}

/*************************** LEXING RULES ***************************/

let newline = ('\010' | '\013' | "\013\10")

rule token = parse
/* Identifiers, type names, and keywords */
  ['A'-'Z''a'-'z']['A'-'Z''a'-'z''0'-'9''_']*
      { return process_id (lexeme(lexbuf)); }
| ['_']['A'-'Z''a'-'z''0'-'9''_']+
      { return process_id (lexeme(lexbuf)); }
/* Qualified identifiers and type names (e.g., Foo::bar) */
| (['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']*':'':')+
  ['A'-'Z''a'-'z''_']['A'-'Z''a'-'z''0'-'9''_']*
      { return process_qual_id(lexeme(lexbuf)); }
/* Type variables */
| '`'['A'-'Z''a'-'z''0'-'9''_']+
      { token_string = lexeme(lexbuf); return TYPE_VAR; }
/* Integer constants */
| '0'['x''X']['0'-'9''a'-'f''A'-'F']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexeme(lexbuf),2,16);
        return INTEGER_CONSTANT; }
| '0'['0'-'7']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexeme(lexbuf),0,8);
        return INTEGER_CONSTANT; }
| '0'['0'-'9']+((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      /* This is really an error case according to OSI C --
         the leading 0 indicates this should be in octal. */
      /* TODO: print a warning message? */
      { token_int = intconst(lexeme(lexbuf),0,10);
        return INTEGER_CONSTANT; }
| ['1'-'9']['0'-'9']*((['u''U']['l''L']?)|(['l''L']['u''U']?))?
      { token_int = intconst(lexeme(lexbuf),0,10);
        return INTEGER_CONSTANT; }
/* Floating-point constants */
| ['0'-'9']+['e''E']['+''-']?['0'-'9']+['f''F''l''L']?
      { token_string = lexeme(lexbuf);
        return FLOATING_CONSTANT; }
| ((['0'-'9']+'.')|(['0'-'9']+'.'['0'-'9']+)|('.'['0'-'9']+))
  (['e''E']['+''-']?['0'-'9']+)?['f''F''l''L']?
      { token_string = lexeme(lexbuf);
        return FLOATING_CONSTANT; }
/* Operators */
| "==" { return  EQ_OP; }
| "!=" { return  NE_OP; }
| "<=" { return  LE_OP; }
| ">=" { return  GE_OP; }
| "++" { return  INC_OP; }
| "--" { return  DEC_OP; }
| "+=" { return  ADD_ASSIGN; }
| "-=" { return  SUB_ASSIGN; }
| "*=" { return  MUL_ASSIGN; }
| "/=" { return  DIV_ASSIGN; }
| "%="   { return  MOD_ASSIGN; }
| "|="   { return  OR_ASSIGN; }
| "^="   { return  XOR_ASSIGN; }
| "&="   { return  AND_ASSIGN; }
| "<<="  { return  LEFT_ASSIGN; }
| ">>="  { return  RIGHT_ASSIGN; } 
| "&&" { return  AND_OP; }
| "||" { return  OR_OP; }  
| "<<" { return  LEFT_OP; }
/* JGM: see shift_expr and relational_expr -- we now parse >> as two
 * separate > tokens.  */
| ">>" { return  RIGHT_OP; }
| "<>" { return  LEFT_RIGHT; }
| "->" { return PTR_OP; }
| "..." { return ELLIPSIS; }
| newline                         { return  token(lexbuf); }
/* comments */
| "#"[^ '\010' '\013']*(newline)  { return  token(lexbuf); }
| [' ' '\009' '\011' '\012']+     { return  token(lexbuf); }
| "//"[^'\010' '\013']* newline   { return  token(lexbuf); }
| "/*"  { comment_depth = 1; 
	  runaway_start = lexeme_start(lexbuf); 
	  comment(lexbuf); 
	  return token(lexbuf); }
/* string constants */
| "\""
  { string_pos = 0; 
    runaway_start = lexeme_start(lexbuf);
    strng(lexbuf);
    token_string = get_stored_string();
    return STRING; }
/* character constants */
| "'\\n'"   { token_char = '\n'; return CHARACTER_CONSTANT; }
| "'\\t'"   { token_char = '\t'; return CHARACTER_CONSTANT; }
| "'\\b'"   { token_char = '\b'; return CHARACTER_CONSTANT; }
| "'\\r'"   { token_char = '\r'; return CHARACTER_CONSTANT; }
/* form feed, decimal character code 12 */
| "'\\f'"   { token_char = '\012'; return CHARACTER_CONSTANT; }
/* vertical tab, decimal character code 11 */
| "'\\v'"   { token_char = '\011'; return CHARACTER_CONSTANT; }
| "'\\\\'"  { token_char = '\\'; return CHARACTER_CONSTANT; }
| "'\\''"   { token_char = '\''; return CHARACTER_CONSTANT; }
/* for some reason popcorn doesn't like '\"' so we use decimal code 034 */
/*| "'\\\"'"*/
| "'\\\034'"
            { token_char = '\034'; return CHARACTER_CONSTANT; }
/* alert (bell), decimal character code 7 */
| "'\\a'"   { token_char = '\007'; return CHARACTER_CONSTANT; }
| "'\\?'"   { token_char = '?'; return CHARACTER_CONSTANT; }
/* octal character escapes */
| "'\\" ['0'-'7']['0'-'7']['0'-'7'] "'"
            { token_char = char_for_octal_code(lexbuf,2,3);
              return CHARACTER_CONSTANT;
            }
| "'\\" ['0'-'7']['0'-'7'] "'"
            { token_char = char_for_octal_code(lexbuf,2,2);
              return CHARACTER_CONSTANT;
            }
| "'\\" ['0'-'7'] "'"
            { token_char = char_for_octal_code(lexbuf,2,1);
              return CHARACTER_CONSTANT;
            }
/* hex character escapes */
| "'\\x" ['0'-'9''A'-'Z''a'-'z']+ "'"
            { token_char = char_for_hex_code(lexeme(lexbuf),3);
              return CHARACTER_CONSTANT;
            }
| "'" [^ '\\' '\'' '\n'] "'"
    { token_char = lexeme_char(lexbuf,1);
      return CHARACTER_CONSTANT;
    }
/* End of file */
| eof { return -1; }
/* Default case */
| _ { return ord(lexeme_char(lexbuf,0));
    }
and strng = parse
    "\034" [' ''\n''\r''\t']* "\034"
  /* concatenate adjacent strings */
                    { return strng(lexbuf); }
  | "\034"          { return 0; /* return value ignored */ }
  | "\\" newline    { return strng(lexbuf); }
  | "\\n"           { store_string_char('\n');   return strng(lexbuf); }
  | "\\t"           { store_string_char('\t');   return strng(lexbuf); }
  | "\\b"           { store_string_char('\b');   return strng(lexbuf); }
  | "\\r"           { store_string_char('\r');   return strng(lexbuf); }
  /* form feed, decimal character code 12 */
  | "\\f"           { store_string_char('\012');   return strng(lexbuf); }
  /* vertical tab, decimal character code 11 */
  | "\\v"           { store_string_char('\011');   return strng(lexbuf); }
  | "\\\\"          { store_string_char('\\');   return strng(lexbuf); }
  | "\\'"           { store_string_char('\'');   return strng(lexbuf); }
  | "\\\""          { store_string_char('\034');    return strng(lexbuf); }
  /* alert (bell), decimal character code 7 */
  | "\\a"           { store_string_char('\007'); return strng(lexbuf); }
  | "\\?"           { store_string_char('?');    return strng(lexbuf); }
  /* octal character escapes */
  | "\\" ['0'-'7']['0'-'7']['0'-'7']
                    { store_string_char(char_for_octal_code(lexbuf,1,3));
                      return strng(lexbuf);
                    }
  | "\\" ['0'-'7']['0'-'7']
                    { store_string_char(char_for_octal_code(lexbuf,1,2));
                      return strng(lexbuf);
                    }
  | "\\" ['0'-'7']
                    { store_string_char(char_for_octal_code(lexbuf,1,1));
                      return strng(lexbuf);
                    }
  /* hex character escapes */
  | "\\x" ['0'-'9''A'-'Z''a'-'z']+
                    { store_string_char(char_for_hex_code(lexeme(lexbuf),2));
                      return strng(lexbuf);
                    }
  /* THESE ARE ALL DECIMAL CODES */
  | [^ '\034''\092''\013'] /* NOT double quote, backslash, or newline */
                    { /* for efficiency, should have a while loop here */
                      store_string_char (lexeme_char(lexbuf,0));
		      return strng(lexbuf); }
  | newline         { runaway_err("string ends in newline",lexbuf);
                      return 0; /* return value ignored */
                    }
  | eof             { runaway_err("unterminated string",lexbuf);
                      return 0; /* return value ignored */
                    }
  | _               { err("bad character following backslash in string",lexbuf);
		      return strng(lexbuf); }
and comment = parse
   "/*"             { ++comment_depth; return comment(lexbuf); }
 | "*/"             { --comment_depth; 
		      if (comment_depth > 0) 
			return comment(lexbuf);
		      return 0; /* return value ignored */
		    }
 | newline          { return comment(lexbuf); }
 | eof              { runaway_err("unterminated comment",lexbuf);
                      return 0; /* return value ignored */ 
                    }
 | _                { return comment(lexbuf); }

{


}
