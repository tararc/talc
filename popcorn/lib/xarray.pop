// Re-sizing arrays.  Ported with some modification by Dan from xarray.ml, 
// which was written by Steve

// Does not allow zero-size buffers (affects create and from_array).

// Note these arrays never shrink in size

#include "core.h"
open Core;

prefix Xarray;
open   Xarray;

abstract struct <a>xarray {
  a elmts[];
  int num_elmts; 
}

int length<a>(<a>xarray xarr) {
  return xarr.num_elmts;
}

a get<a>(<a>xarray xarr, int i) { 
  if (i < 0 || i >= xarr.num_elmts)
    raise InvalidArg("Xarray::get: bad index");
  return xarr.elmts[i];
}

void set<a>(<a>xarray xarr, int i, a a) {
  if (i < 0 || i >= xarr.num_elmts)
    raise InvalidArg("Xarray::set: bad index");
  xarr.elmts[i] = a;
}

<a>xarray create_empty<a>() {
  return ^xarray({:a},0);
}

<a>xarray create<a>(int len, a a) { // resulting xarray has zero elements
  if (len < 0)
    raise InvalidArg("xarrays must have a non-negative size buffer");
  return ^xarray(new_array(len, a), 0);
}

<a>xarray singleton<a>(int len, a a) {
  if(len<1) raise InvalidArg("singleton xarray must have size >=1");
  <a>xarray x = create(len,a);
  x.num_elmts=1;
  return x;
}

void add<a>(<a>xarray xarr, a a) {
  if (xarr.num_elmts == size(xarr.elmts)) {
    if (xarr.num_elmts == 0)
      xarr.elmts = new_array(10, a);
    else {
      a newarr[] = new_array(xarr.num_elmts*2, xarr.elmts[0]);
      for (int i=1; i < xarr.num_elmts; ++i)
	newarr[i] = xarr.elmts[i];
      xarr.elmts = newarr;
    }
  }
  xarr.elmts[xarr.num_elmts++] = a;
}

int add_ind<a>(<a>xarray xarr, a a) {
  add(xarr,a);
  return xarr.num_elmts-1;
}

a to_array<a>(<a>xarray xarr) []{
  if (xarr.num_elmts == 0) 
    return {:a};
  a ans[] = new_array(xarr.num_elmts, xarr.elmts[0]);
  for (int i=1; i < xarr.num_elmts; ++i)
    ans[i] = xarr.elmts[i];
  return ans;
}

<a>xarray from_array<a>(a arr[]) {
  if (size(arr) == 0)
    return create_empty();
  <a>xarray ans = ^xarray(new_array(size(arr), arr[0]), size(arr));
  for(int i=1; i < size(arr); ++i)
    ans.elmts[i] = arr[i];
  return ans;
}

// append is functional -- it creates a new xarray every time
<a>xarray append<a>(<a>xarray xarr1, <a>xarray xarr2) {
  int        newsz = size(xarr1.elmts) + size(xarr2.elmts);
  if(newsz == 0)
    return create_empty();
  a init = size(xarr1.elmts) == 0 ? xarr2.elmts[0] : xarr1.elmts[0];
  <a>xarray ans = ^xarray(new_array(newsz, init), 0);
  for(int i=0; i < xarr1.num_elmts; ++i)
    add(ans, xarr1.elmts[i]);
  for(int i=0; i < xarr2.num_elmts; ++i)
    add(ans, xarr2.elmts[i]);
  return ans;
}

void imp_append<a>(<a>xarray x1,<a>xarray x2) {
  _ new_num_elmts = x1.num_elmts + x2.num_elmts;
  _ sz1 = size(x1.elmts);
  _ sz2 = size(x2.elmts);

  if(x2.num_elmts==0) return;

  if(sz1<new_num_elmts) {
   _ elmts     = x1.elmts;
   _ new_elmts = new_array(new_num_elmts,x2.elmts[0]);

   for(int i=0;i<x1.num_elmts;i++) 
     new_elmts[i]=elmts[i];

   x1.elmts = new_elmts;
  }

  _ new_elmts = x1.elmts;
  _ elmts     = x2.elmts;
  for(int i=0; i<x2.num_elmts; i++) {
    new_elmts[i+x1.num_elmts] = elmts[i];
  }

  x1.num_elmts = new_num_elmts;
}

void app<a,b>(b f(a), <a>xarray xarr) {
  for(int i=0; i<xarr.num_elmts; ++i)
    f(xarr.elmts[i]);
}
void app_c<a,b,c>(b f(c,a), c env, <a>xarray xarr) {
  for(int i=0; i<xarr.num_elmts; ++i)
    f(env, xarr.elmts[i]);
}
void iter<a>(void f(a), <a>xarray xarr) {
  for(int i=0; i<xarr.num_elmts; ++i)
    f(xarr.elmts[i]);
}
void iter_c<a,c>(void f(c,a), c env, <a>xarray xarr) {
  for(int i=0; i<xarr.num_elmts; ++i)
    f(env, xarr.elmts[i]);
}
<b>xarray map<a,b>(b f(a), <a>xarray xarr) {
  if(xarr.num_elmts==0) return create_empty();

  <b>xarray ans = ^xarray(new_array(size(xarr.elmts), f(xarr.elmts[0])), 
			   xarr.num_elmts);
  for(int i=1; i<xarr.num_elmts; ++i)
    ans.elmts[i] = f(xarr.elmts[i]);
  return ans;
}
<b>xarray map_c<a,b,c>(b f(c,a), c env, <a>xarray xarr) {
  if(xarr.num_elmts==0) return create_empty();
  
  <b>xarray ans = ^xarray(new_array(size(xarr.elmts), f(env,xarr.elmts[0])), 
			   xarr.num_elmts);
  for(int i=1; i<xarr.num_elmts; ++i)
    ans.elmts[i] = f(env, xarr.elmts[i]);
  return ans;
}

void reuse<a>(<a>xarray xarr) {
  xarr.num_elmts = 0;
}

void delete<a>(<a>xarray xarr, int num) {
 if(xarr.num_elmts<num) 
   raise InvalidArg("Attempt to delete more elements then exist.");

 xarr.num_elmts -= num;
}

void remove<a>(<a>xarray xarr, int i) {
  if(i>=xarr.num_elmts || i<0) {
    printf("xarray::remove i = %d, num_elmts = %d\n",i,xarr.num_elmts);
    fflush(tal_stdout);
    raise InvalidArg("Attempted removal of non-existent element.");
  }

  _ elmts = xarr.elmts;
  _ num_elmts = xarr.num_elmts;

  _ loop_bound = num_elmts - 1;
  for(;i<loop_bound;i++) {
    elmts[i] = elmts[i+1];
  }

  xarr.num_elmts--;
}
