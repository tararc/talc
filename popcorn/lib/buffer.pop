#include "core.h"
#include "string.h"

open Core;

prefix Buffer;
open   Buffer;

// ported from
//(***********************************************************************)
//(*                                                                     *)
//(*                           Objective Caml                            *)
//(*                                                                     *)
//(*   Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt  *)
//(*                                                                     *)
//(*  Copyright 1999 Institut National de Recherche en Informatique et   *)
//(*  en Automatique.  Distributed only by permission.                   *)
//(*                                                                     *)
//(***********************************************************************)

//(* Extensible buffers *)

abstract struct t
{ string buffer;
  int position;
  int length;
  string initial_buffer;
}

t create (int n) { 
  if (n < 1) n=1; else n=n;
  string s = Core::new_string(n);
  return ^t(s, 0, n, s);
}

string contents(t b) {
  return (String::substring( b.buffer, 0, b.position));
}

void copy_contents(t b, string buf, int ofs) {
  if (ofs < 0 || (size(buf)-ofs) < b.position) {
    fprintf(tal_stderr,
	    "copy_contents: size(buf) = %d, ofs = %d, b.position = %d\n",
	    size(buf), ofs, b.position);
    raise InvalidArg("Buffer::copy_contents");
  }
  String:strncpy(buf,ofs,b.buffer,0,b.position);
  if (size(buf) > (ofs + b.position))
    buf[ofs + b.position] = '\000';
}

int length (t b) {
  return b.position;
}

void clear (t  b) {
   b.position = 0;
   return;
}

void reset (t b) {
  b.position = 0; 
  b.buffer = b.initial_buffer;
  b.length = size (b.buffer);
  return;
}

void resize(t b, int more) {
  int len = b.length;
  int new_len = len;
  string new_buffer;
  while (b.position + more > new_len) {
    new_len = 2 * new_len;
  }
  new_buffer = Core::new_string (new_len);
  Core::strncpy (new_buffer, 0, b.buffer, 0, b.position);
  b.buffer = new_buffer;
  b.length = new_len;
  return;
}

void add_char (t b, char c) {
  int pos = b.position;
  if (pos >= b.length) resize (b, 1);
  b.buffer[pos] = c;
  b.position = pos + 1;
  return;
}

void add_substring (t b, string s, int offset, int len) {
  int new_position = b.position + len;
  if (offset < 0 || len < 0 || offset + len > size(s))
    raise InvalidArg("Buffer::add_substring");
  if (new_position > b.length) 
    resize (b, len);
  Core::strncpy( b.buffer, b.position, s, offset, len);
  b.position = new_position;
  return;
}

void add_string (t b, string s) {
  int len = size( s);
  int new_position = b.position + len;
  if (new_position > b.length) resize (b, len);
  Core::strncpy (b.buffer, b.position, s, 0, len);
  b.position =  new_position;
  return;
}
  
void add_buffer (t b, t bs) {
  add_substring ( b, bs.buffer, 0, bs.position);
  return;
}


