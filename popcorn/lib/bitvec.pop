
// Bit vectors -- particularly designed for data flow analysis.
// Note that we're not overly defensive about different bit vectors being
// the same size and things -- we rely on the client to enforce her own
// abstractions.

// Unfortunately, without typedef, we either add a level of indirection
// or expose the implementation type.  (We can't even use #define because
// of the grammar for returning arrays.)  For now, we'll expose the type.

// If we ever really care about middle-end speed, maybe this should be in
// the same module as the middle end so as to promote inlining.

#include "core.h"
#include "list.h"
#include "dict.h"
#include "set.h"

prefix Bitvec;
open   Bitvec;

#define BITVEC <int>array

// POS_TO_WORD is division by 32
// POS_TO_BIT is mod by 32
#define POS_TO_WORD(pos) (pos >> 5)
#define POS_TO_BIT(pos)  (pos & 0x1F)
#define INTSZ 32

bool get(BITVEC bvec, int pos) {
  int word   = POS_TO_WORD(pos);
  int offset = POS_TO_BIT(pos);
  return ((bvec[word] >> offset) & 1) == 1;
}  
void set(BITVEC bvec, int pos) {
  int word   = POS_TO_WORD(pos);
  int offset = POS_TO_BIT(pos);
  bvec[word] = bvec[word] | (1 << offset);
}
void clear(BITVEC bvec, int pos) {
  int word   = POS_TO_WORD(pos);
  int offset = POS_TO_BIT(pos);
  bvec[word] = bvec[word] & ~(1 << offset);
}
bool get_and_set(BITVEC bvec, int pos) {
  int  word   = POS_TO_WORD(pos);
  int  offset = POS_TO_BIT(pos);
  int  slot   = bvec[word];
  bool ans    = ((slot >> offset) & 1) == 1;
  if(!ans)
    bvec[word] = slot | (1 << offset);
  return ans;
}
void union_two(BITVEC dest, BITVEC src1, BITVEC src2) {
  int len = size(dest);
  for(int i=0; i<len; ++i)
    dest[i] = src1[i] | src2[i];
}
void intersect_two(BITVEC dest, BITVEC src1, BITVEC src2) {
  int len = size(dest);
  for(int i=0; i<len; ++i)
    dest[i] = (src1[i] & src2[i]);
} 
void diff_two(BITVEC dest, BITVEC src1, BITVEC src2) {
 int len = size(dest);
 for(int i=0; i<len; ++i)
    dest[i] = src1[i] & ~src2[i];
} 
bool compare_two(BITVEC src1, BITVEC src2) {
  int len = size(src1);
  for (int i=0; i<len; ++i)
    if (src1[i] != src2[i])
      return false;
  return true;
}

// makes one more entry then necessary when sz is a multiple of INTSZ
BITVEC new_empty(int sz) {
  BITVEC ans = new_array4((sz / INTSZ)+1);
  int len = size(ans);
  for(int i=0; i < len; ++i)
    ans[i] = 0;
  return ans;
}
BITVEC new_full(int sz) {
  BITVEC ans = new_array4((sz / INTSZ)+1);
  int len = size(ans);
  for(int i=0; i < len; ++i)
    ans[i] = 0xFFFFFFFF;
  return ans;
}
BITVEC new_copy(BITVEC old) {
  BITVEC copy = new_array4(size(old));

  for(int i=0; i< size(old); i++)
    copy[i] = 0;

  union_two(copy,copy,old);
  return copy;
}
BITVEC from_list<a,b>(<a,b>Dict::dict d, int f(b), int sz, <a>List::list l) {
  BITVEC ans = new_array4((sz / INTSZ)+1);
  for(; l!=null;l=l.tl)
    set(ans, f(Dict::lookup(d,l.hd)));
  return ans;
}
<int>List::list to_sorted_list(BITVEC bvec,int sz) {
  <int>List::list ans = null;
  for(int pos=sz-1; pos >= 0; ) {
    int word = POS_TO_WORD(pos);
    int bits = bvec[word];
    for(int offset = POS_TO_BIT(pos); offset >= 0; --offset, --pos)
      if (((bits >> offset) & 1) == 1)
	ans = ^List::list(pos,ans); 
  }
  return ans;
}  
  
void clear_all(BITVEC bvec) {
  int len = size(bvec);
  for (int i=0; i < len; ++i)
    bvec[i] = 0;
}
void set_all(BITVEC bvec) {
  int len = size(bvec);
  for (int i=0; i < len; ++i)
    bvec[i] = 0xFFFFFFFF;
}

void clear_above(BITVEC bvec, int ceil) {
  int len = size(bvec);
  int ceil_word = POS_TO_WORD(ceil);
  int ceil_bit = POS_TO_BIT(ceil);
  for(_ i = ceil_word+(ceil_bit==0 ? 0 : 1); i < len; ++i) {
    bvec[i] = 0;
  }
  if(ceil_bit==0) return;

  _ mask = ~(0xFFFFFFFF << (ceil_bit+1));
  bvec[ceil_word] &= mask;
}

void clear_below(BITVEC bvec, int floor) {
 int len = size(bvec);
 int floor_word = POS_TO_WORD(floor);
 int floor_bit = POS_TO_BIT(floor);
 int max = floor_word + (floor_bit==0 ? 1 : 0);
 for(_ i = 0; i < max; ++i) {
   bvec[i] = 0;
 }
 if(floor_bit==0) return;

 _ mask = 0xFFFFFFFF << floor_bit;
 bvec[floor_word] &= mask;
}

bool all_set(BITVEC bvec, int sz) {
  int words = POS_TO_WORD(sz);

  for(int i=0; i < words; i++) {
    if (bvec[i] != 0xFFFFFFFF) return false;
  }
  for(int i=words*INTSZ; i < sz; i++) {
    if (!get(bvec,i)) return false;
  }
  return true;
}

BITVEC resize(BITVEC old,int new_sz) {
  BITVEC nw = new_empty(new_sz);
  
  _ nw_sz = size(nw);
  _ old_sz = size(old);
  _ sz = (nw_sz > old_sz) ? old_sz : nw_sz;
  for(_ i=0; i < sz; i++) {
    nw[i] = old[i];
  }

  if(nw_sz <= old_sz ) {
    _ nw_bit = POS_TO_BIT(new_sz);
    if(nw_bit != 0) {
      _ mask = ~(0xFFFFFFFF << nw_bit);
      nw[nw_sz-1] &=mask;
    }
  }

  return nw;
}
 
// Returns the index of the next set bit greater than or equal to pos.
// Returns -1 if no such bit.   
int next(BITVEC bvec, int pos) {
  int len = size(bvec);
  int pos_word = POS_TO_WORD(pos);
  int pos_bit = POS_TO_BIT(pos);

  if(pos<0) return -1;

  for(;pos_word<len; pos_word++) {
    _ w = bvec[pos_word];
    if(w!=0) {
      for(; pos_bit<INTSZ;pos_bit++) {
	if(((w >> pos_bit) & 1) != 0) {
	  return ((pos_word << 5) | pos_bit);
	}
      }
    }
    pos_bit = 0; // Must reset here!!
  }
  return -1;
}

// Returns the index of the prev set bit less than or equal to pos.
// Returns -1 if no such bit.   
int prev(BITVEC bvec, int pos) {
  int len = size(bvec);
  int pos_word = POS_TO_WORD(pos);
  int pos_bit = POS_TO_BIT(pos);

  if(pos_word>=len) return -1;

  for(;pos_word>=0; pos_word--) {
    _ w = bvec[pos_word];
    if(w!=0) {
      for(; pos_bit>=0;pos_bit--) {
	if(((w >> pos_bit) & 1) != 0) {
	  return ((pos_word << 5) | pos_bit);
	}
      }
    }
    pos_bit = INTSZ - 1; // Must reset here!!
  }
  return -1;
}

// for debugging
void print_bvec(BITVEC bvec) {
  for (int i=0; i<INTSZ*(size(bvec)); ++i)
    if (get(bvec,i))
      Core::print_int(1);
    else
      Core::print_int(0);
  Core::print_newline();
}
