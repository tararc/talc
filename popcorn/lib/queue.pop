////////////////////////////////////////////////////////////////////////////
// Popcorn library, file queue.pop                                        //
// Copyright Greg Morrisett, Dan Grossman                                 //
// January 1999, all rights reserved                                      //
//                                                                        //
////////////////////////////////////////////////////////////////////////////

// queue.h:  defines generic imperative queues and various operations
//           following the conventions of the Ocaml queue library as much
//           as possible.  
#include "list.h"
open List;

prefix Queue;
open   Queue;

abstract struct <a>queue { <a>list front; <a>list rear; }

// true when the queue is empty
bool is_empty<a>(<a>queue q)  {
   return(q.front == null);
}

// raised by take and peek
exception Empty;

// create a new queue
<a>queue create<a>() {
  return(^queue(null,null));
}

// insert an element into the rear of the queue (side effect)
void add<a>(<a>queue q,a x) {
  <a>list cell = ^list(x,null);    

  if (q.front == null) {
    q.front = cell;
    q.rear = cell;
  } else {
    q.rear.tl = cell;
    q.rear = cell;
  }
}    

// get and remove an element from the front of the queue (side effect)
a take<a>(<a>queue q) {
  if (q.front == null)
    return(raise Empty());
  else {
    a x = q.front.hd;
    q.front = q.front.tl;
    if (q.front == null) {  // necessary to ensure last cell is 
      q.rear = null;       // garbage collected
    }
    return x;
  }
}

// return the first element in the queue without removing it
a peek<a>(<a>queue q) {
  if (q.front == null)
    return(raise Empty());
  else {
    return(q.front.hd);
  }
}

// clear out the entire queue (side effect)
void clear<a>(<a>queue q) {
  q.front = null;
  q.rear = null;
}

// return the number of lements in the queue
int length<a>(<a>queue q) {
  return(List::length(q.front));
}

// apply f to each element in the queue from the front to the back
void iter<a,b>(b f(a), <a>queue q) {
  for (<a>list x = q.front; x != null; x = x.tl) {
    f(x.hd);
  }
}


