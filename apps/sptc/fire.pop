
#include "core.h" 
#include "sptc.h"

open Core;

#define WIDTH 600
#define HEIGHT 400

#define DIVISOR 1000

// Random number generation copied from Sedgewick.
#define M 100000000
#define M1 10000
#define B 31415821
static int last_rand;

// Multiplication handling overflow correctly.
int mult(int p, int q) {
  int p1,p0,q1,q0;

  p1 = p/M1; p0 = p%M1;
  q1 = q/M1; q0 = q%M1;
  return (((p0*q1 + p1*q0) % M1)*M1+p0*q0) % M;
}

int rand() {
  last_rand = (mult(last_rand,B) + 1) % M;
  return last_rand;
}

int random(int max) {
  // Return a random number from 0 to max-1.
  return rand() % max;
}

int pack(int r,int g, int b) {
  return ((r<<16) | (g<<8) | b);
}

bool set_palette() {
  int p[256];

  // black to red
  int i=0;
  int c=0;
  while (i<64)
    {
      p[i] = pack(c,0,0);
      c+=4;
      i++;
    }
  
  // red to yellow
  c=0;
  while (i<128)
    {
      p[i] = pack(255,c,0);
      c+=4;
      i++;
    }
  
  // yellow to white
  c=0;
  while (i<128)
    {
      p[i] = pack(255,255,c);
      c+=4;
      i++;
    }
  
  // white
  while (i<256) 
    {
      p[i] = pack(255,255,255);
      i++;
    }
  
  return sptc_set_palette(p);
}


int pop_main() {
  if(!sptc_open(WIDTH,HEIGHT)) return -1;
  if(!set_palette()) return -1;

  // flame data
  int state = 0;
  int intensity = 0;
  int generator[WIDTH]; // flame generator

      // lock surface pixels
      string pixels = sptc_pixels();

  // main loop
  while (true)
    {
      // lower flame on keypress
      if (sptc_keyhit()) state = 2;
      
      // state machine
      switch state {
      case 0:
	intensity += 10;	// raise flame	
	if (intensity>999) state = 1; // maximum flame height
      case 1: ;
      case 2:
	    intensity -= 5; // lower flame
	    // exit program when flame is out
	    if (intensity<10) {
	      sptc_close();
	      return 0;
	    }
      default: return -1;
      }

      // initialize flame generator;
      for (int x=0; x<WIDTH; x+=4) {
	// random block color taking intensity into account
	int color = random( (255 * intensity)/DIVISOR);
	generator[x] = color;
	generator[x+1] = color;
	generator[x+2] = color;
	generator[x+3] = color;
      }
      

      if(size(pixels)!=WIDTH*HEIGHT) {
	print_string("Pixels has the wrong size.");
	return -1;
      }

      // flame vertical loop
      for (int y=1; y<HEIGHT-4; y+=2)
	{
	  // current pixel offset
	  int offset = y*WIDTH;
	  
	  // flame horizontal loop
	  for (int x=0; x<WIDTH; x++, offset++)
	    {
	      int p = offset + (2*WIDTH);
	      int top = pixels[p];
	      top += pixels[p-1];
	      top += pixels[p+1];
	      
	      int bottom = pixels[offset + (4*WIDTH)];

	      int c1 = (top + bottom)>>2;
	      if(c1>1) c1--;

	      int c2 = (c1+bottom)>>1;

	      pixels[p      ] = c1;
	      pixels[p+WIDTH] = c2;
       
	    }
	}

      for (int y=HEIGHT-4; y<HEIGHT; y+=2)
	{
	  // current pixel offset
	  int offset = y*WIDTH;
	  
	  // flame horizontal loop
	  for (int x=0; x<WIDTH; x++, offset++)
	    {

	      int p = offset + (2*WIDTH);
	      int top;
	      if(y<HEIGHT-2) {		  
		p = (offset + (2*WIDTH));
		top = pixels[p-1] + pixels[p] + pixels[p+1];
	      }
	      else {
		top = generator[x];
		top += (x==WIDTH-1) ? generator[0] : generator[x+1];
		top += (x==0) ? generator[WIDTH-1] : generator[x-1];
	      }

	      int bottom = generator[x];

	      int c1 = (top + bottom)>>2;
	      if(c1>1) c1--;

	      int c2 = (c1+bottom)>>1;

	      if(y<HEIGHT-2) {
		pixels[p      ] = c1;
		pixels[p+WIDTH] = c2;
	      }
       
	    }
	}

      sptc_update();
      
    }

  sptc_close();

  return -1; // Should never reach here. 
}
