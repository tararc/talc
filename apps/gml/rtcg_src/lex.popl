
{
#include "core.h"
#include "list.h"
#include "lexing.h"
#include "dict.h"
#include "string.h"
#include "hashtable.h"

#include "gmlsyntax.h"
#include "parse.h"

open Core;
open List;
open Lexing;
open Gmlsyntax;
open Parse;

void yyerror(string s) {
  printf("Parse error: (%d-%d) %s\n",yylloc.first_line,
  yylloc.last_line,s);
  
}

/* for parser -- must not be prefixed */
int yylex() { 
 int ans = Lex::token(lbuf.v);
 yylloc.first_line = lexeme_start (lbuf.v);
 yylloc.last_line  = lexeme_end   (lbuf.v);
 
 switch ans {
 case ID:          yylval = ^YYSTYPE.Id(Lex::token_string);
 case CONSTSTRING: yylval = ^YYSTYPE.String(Lex::token_string);
 case CONSTINT:    yylval = ^YYSTYPE.Int   (Lex::token_int);
 case CONSTFP:     yylval = ^YYSTYPE.Fp    (Lex::token_fp);
 default:          ; /* contents of yylval meaningless */
 }
 return ans;
}
 
prefix Lex;
open   Lex;

int    token_int = 0;
string token_string = "xx";
FP     token_fp = FP_CONST(0.0);

static <<string,short>Hashtable::table>Opt rw = null;

static *(string,short) rw_array[] = {	
  ^("apply",APPLY),
  ^("get",GET),
  ^("if",IF),
  ^("include",INCLUDE),
  ^("light",LIGHT),
  ^("negi",NEGI),
  ^("negf",NEGF),
  ^("point",POINT),
  ^("pointlight",POINTLIGHT),
  ^("print",PRINT),
  ^("real",REAL),
  ^("render",RENDER),
  ^("scale",SCALE),
  ^("spotlight",SPOTLIGHT),
  ^("translate",TRANSLATE),
  ^("uscale",USCALE),
  ^("acos",ACOS),
  ^("asin",ASIN),
  ^("clampf",CLAMPF),
  ^("cos",COS),
  ^("floor",FLOOR),
  ^("frac",FRAC),
  ^("sin",SIN),
  ^("sqrt",SQRT),
  ^("addf",ADDF),
  ^("divf",DIVF),
  ^("eqf",EQF),
  ^("lessf",LESSF),
  ^("mulf",MULF),
  ^("subf",SUBF),
  ^("addi",ADDI),
  ^("divi",DIVI),
  ^("eqi",EQI),
  ^("lessi",LESSI),
  ^("modi",MODI),
  ^("muli",MULI),
  ^("subi",SUBI),
  ^("cone",CONE),
  ^("cube",CUBE),
  ^("cylinder",CYLINDER),
  ^("plane",PLANE),
  ^("sphere",SPHERE),
  ^("rotatex",ROTATEX),
  ^("rotatey",ROTATEY),
  ^("rotatez",ROTATEZ),
  ^("difference",DIFFERENCE),
  ^("intersect",INTERSECT),
  ^("union", UNION),
  ^("getx",GETX),
  ^("gety",GETY),
  ^("getz",GETZ),
  ^("length",LENGTH),
  ^("true",TRUE),
  ^("false",FALSE)
};	

// WARNING : Call lex_init before lexing.
void lex_init() {
  /* build reserved word dictionary */
  <string,short>Hashtable::table t = 
     Hashtable::create(101, strcmp, Hashtable::hash_string);
  rw = ^Opt(t);
  for (int i=0; i < size(rw_array); ++i) 
    Hashtable::insert(t, rw_array[i].1, rw_array[i].2);
}

// can try interning strings once our hashtable resizes
static short process_id(string s) {
  try
    return Hashtable::lookup(rw.v, s);
  handle y switch y {
  case Not_found: token_string = s; return ID; 
  }
}

}

let newline = ('\010' | '\013' | "\013\10")

rule token = parse
| '-'?['0'-'9']+ { token_int = int_of_string(lexeme(lexbuf)); return CONSTINT; }
| ['A'-'Z''a'-'z']['A'-'Z''a'-'z''0'-'9''_''-']*
                 { return process_id(lexeme(lexbuf)); }
| '-'?['0'-'9']+['E''e']'-'?['0'-'9']     
                 { _ s = lexeme(lexbuf);
  		   fflush(tal_stdout);
		   token_fp = float_of_string(s); return CONSTFP; }
| '-'?['0'-'9']+'.'['0'-'9']+(['E''e']'-'?['0'-'9'])?
                 { _ s = lexeme(lexbuf);
		   fflush(tal_stdout);
		   token_fp = float_of_string(s); return CONSTFP; }
| "{"             		  { return LBRACE; }
| "}"             		  { return RBRACE; }
| "["             		  { return LBRACKET; }
| "]"             		  { return RBRACKET; }
| '/'                             { return BIND; }
| newline                         { return token(lexbuf); }
| [' ' '\t']                      { return token(lexbuf); } 
| '%' [^'\010' '\013']* newline   { return token(lexbuf); }
| '%' [^'\010' '\013']* eof       { return -1; }
| "\"" [^'"']* "\""               { _ s = lexeme(lexbuf);
                                    _ len = size(s) - 2;
				    token_string = String::substring(s,1,len);
	                            return CONSTSTRING; }
| eof                             { return -1; }
| _                               { return FAIL; }





