// The naive interpreter.
//
// Code is structured to facilitate RTCG hence the split into two functions.
// 
// WATCH OUT: Macros used extensively.

#include "top.h"
#include "gmlsyntax.h"
#include "math.h"
#include "render.h"

open Gmlsyntax;
open Math;

prefix Eval;
open Eval;

exception MachineStuck(*(string s,env ev, value top));

// Closures

struct surf_prop {
  FP n;
  FP ks;
  FP kd;
  FP red;
  FP green;
  FP blue;
}

union closure {
  value Unopt;
  value Opt;
  surf_prop Cst;
}

void machine_error(string s,<token>list prog,env ev,value top) {
  printf("EVALUATION FAILED: %s\n",s);
  printf("TOP = ");
  print_value(top);
  printf("\n--------------------------------------------------------------\n");
  print_machine(ev,stack2list(),prog);
  printf("\n");
}

#define ERR(s) { raise(^MachineStuck(^(s,ev,top))); }
#define FAIL(s) { raise(^GMLFailure(s)); }

#define INITIAL_STACK 1024

#define PUSH(v) { stack[sp] = v; if(++sp >= size(stack)) { double_stack(); stack = global_stack; } }
#define POP  { top = stack[--sp]; }
#define POP_FP(F) switch stack[--sp] { \
   case Vfp(f__xxx): F=f__xxx; \
   default: ERR("Expected a float."); \
  }

#define POP_FP_FAIL(F) switch stack[--sp] { \
   case Vfp(f__xxx): F=f__xxx; \
   default: FAIL("Expected a float."); \
  }
 
#define POP_INT(I) switch stack[--sp] { \
   case Vint(i__xxx): I=i__xxx; \
   default: ERR("Expected an integer."); \
  } 

#define POP_POINT(F) switch stack[--sp] { \
   case Vpoint(p__xxx): F=p__xxx; \
   default: ERR("Expected a point."); \
  } 
#define POP_POINT_FAIL(F) switch stack[--sp] { \
   case Vpoint(p__xxx): F=p__xxx; \
   default: FAIL("Expected a point."); \
  } 

#define POP_OBJ(F) switch stack[--sp] { \
   case Vobj(o__xxx): F=o__xxx; \
   default: ERR("Expected an object."); \
  } 

#define PUSH_CONT(EV,PROG) return_sp = ^list(^.Vclos(^(EV,PROG)),return_sp)
#define PUSH_RTCG_CONT(EV,PROG) return_sp = ^list(^.Vclos_rtcg(^(EV,fill(rtcg_fun(PROG)))),return_sp)
#define PUSH_CLOS(V) return_sp = ^list(V,return_sp)

// -----------------------------------------------------------------------------
// GLOBALS
value global_stack[] = {^.Marker}; // Double in size when full.
int sp; // Pointer into the stack.
<value>list return_sp = null; // Stack of return continuations.

void double_stack() {
  _ sz = size(global_stack);
  _ s = new_array(2*sz,^.Marker);

  for(int i=0; i < sz; i++) {
    s[i] = global_stack[i];
  }

  global_stack = s;
}

<value>list stack2list() {
  _ ans = null;
  for(_ i = 0; i < sp; i++) {
    ans = ^list(global_stack[i],ans);
  }

  return ans;
}

static <value>list return_sp2;
static value global_stack2[];
static int sp2;

void interpreter_save() {
    global_stack2 = global_stack;
    return_sp2 = return_sp;
    sp2 = sp;
    global_stack = new_array(INITIAL_STACK,^.Marker);
    return_sp = null;
    sp = 0;
}

void interpreter_restore() {
    global_stack = global_stack2;
    return_sp    = return_sp2;
    sp           = sp2;
}

<value>list eval(value clos, <value>list stack_ls) {
    
    stack_ls = List::imp_rev(stack_ls);

  if(size(global_stack)<INITIAL_STACK) 
    global_stack = new_array(INITIAL_STACK,^.Marker);

  _ stack = global_stack;
  sp = 0;
  for(;stack_ls!=null;stack_ls = stack_ls.tl) {
    PUSH(stack_ls.hd);
  }

  try {
    return_sp = null;
    PUSH_CLOS(clos);
    
    while(return_sp!=null) {
      _ x = return_sp.hd;
      return_sp = return_sp.tl; // Order matters here.
      
      switch x {
      case Vclos *(e,ts): eval_fun(e,ts);
      case Vclos_rtcg *(e,f): f(e);
      default: FAIL("Expected a closure.");
      }

    }

    return stack2list();

  } handle y {
    printf("Failed.\n");
    printf("%d continuations still to go.\n",List::length(return_sp));
    switch y {
    case MachineStuck(x): machine_error(x.1,null,x.2,x.3);
    default: ;
    }
    raise(y);
  }
}

void internal_eval(value clos) {
  return_sp = null;
  PUSH_CLOS(clos);
  
  while(return_sp!=null) {
    _ x = return_sp.hd;
    return_sp = return_sp.tl; // Order matters here.
    
    switch x {
    case Vclos *(e,ts): eval_fun(e,ts);
    case Vclos_rtcg *(e,f): f(e);
    default: FAIL("Expected a closure(2).");
    }
  }
}

static surf_prop result2surf_prop() {
  _ n,ks,kd;
  _ p;
  _ stack = global_stack;
  POP_FP_FAIL(n);
  POP_FP_FAIL(ks);
  POP_FP_FAIL(kd);
  POP_POINT_FAIL(p);
  
  return ^surf_prop(n,ks,kd,p.x,p.y,p.z);  
}

surf_prop eval_surface_fun(closure f,FP u,FP v, int face) {

  sp = 0;
  _ stack = global_stack;
  PUSH(^.Vint(face));
  PUSH(^.Vfp(u));
  PUSH(^.Vfp(v));

  _ clos;
  switch f {
  case Unopt(p): clos = p;
  case Opt(p): clos = p;
  case Cst(sp): return sp;
  }

  internal_eval(clos);

  // We might want to check that the stack is empty after result2surf_prop.
  return result2surf_prop();
}

closure optimize_surface_fun(closure f) {
  _ clos;
  switch f {
  case Unopt(p): clos = p;
  default: return f;
  }

  try {
    _ stack = global_stack;
    PUSH(^.Vfp(0.0));
    PUSH(^.Vint(0));
    PUSH(^.Vint(0));

    internal_eval(clos);
    _ sp = result2surf_prop();

    return ^.Cst(sp);
  } handle y {
    return ^closure.Opt(clos);
  }
}

void eval_fun(env ev, <token>list prog) {

  value top = ^value.Vint(0); // Filled by Pop.
  _ stack = global_stack;
  while(prog!=null) {
    
    _ tk = prog.hd;
    prog = prog.tl;
    
    switch tk {
    case Tid(i): 
      PUSH(lookup(ev,i));
    case Tbinder: 
      POP; 
      if(top == ^.Marker) ERR("Attempt to bind stack marker to variable.");
      ev = extend(ev,top); 
    case Tpush(v): 
      PUSH(v);
    case Tfun(ts): 
      PUSH(^value.Vclos(^(ev,ts)));
    case Tarray(ts): 
      PUSH(^value.Marker);
      prog = ^list(^token.ArrayDone,prog);
      prog = List::append(ts,prog);
    case Tprim(p):
      switch p {
      case Apply:
	POP;
	switch top {
	case Vclos (_): ;
	case Vclos_rtcg(_): ;
	default: ERR("Apply expects closure on the stack.");
	}
	
	if(prog!=null) { // If this is not a tail call. 
	  PUSH_CONT(ev,prog);
	}
	PUSH_CLOS(top);
	return;
	
      case Get:
	int i;
	value arr[];
	
	POP_INT(i);
	POP;
	switch top {
	case Varray(vs): arr =vs;
	default: ERR("Get expects an array.");
	}
	
	if(i<0 || i>=size(arr)) {
	  printf("Array bounds error: 0 <= %d < %d\n",i,size(arr));
	  ERR("Out of bounds.");
	}
	
	PUSH(arr[i]);
	
      case If:
	_ false_clos;
	_ true_clos;
	_ cond;
	POP;
	false_clos = top;
	POP;
	true_clos = top;
	POP;
	switch top {
	case Vbool(b): cond = b;
	default: ERR("If test not a boolean.");
	}
	
	_ clos = cond ? true_clos : false_clos;
	switch clos {
	case Vclos(_): ;
	case Vclos_rtcg(_): ;
	default: ERR("Branch not a closure.");
	}

	if(prog!=null) PUSH_CONT(ev,prog);
	PUSH_CLOS(clos);
	return;
	
      case Length:
	POP;
	switch top {
	case Varray(vs):
	  PUSH(^value.Vint(size(vs)));
	default: ERR("Length expects an array.");
	}
	
      case Light:
	// Vpoint color :: Vpoint dir
	_ col, dir;
	
	POP_POINT(col);
	POP_POINT(dir);
	PUSH(^value.Vlight(^light.Ldir(^ldir(dir,col))));
	
      case Negi:
	_ i;
	POP_INT(i);
	PUSH(^value.Vint(-i));
      case Negf:
	_ f;
	POP_FP(f);
	PUSH(^value.Vfp(-f));
      case Point: // z :: y :: x
	_ x,y,z;
	POP_FP(z);
	POP_FP(y);
	POP_FP(x);
	
	PUSH(^value.Vpoint(^Point::point(x,y,z)));
	
      case Pointlight: // color :: pos
	_ col,pos;
	POP_POINT(col);
	POP_POINT(pos);
	PUSH(^value.Vlight(^light.Lpoint(^lpoint(pos,col))));
	
      case Print:
	POP;
	switch top {
	case Vstring(s): printf("%s",s);
	case Vfp(f): print_fp(f);
	case Vint(i): printf("%d",i);
	default: ERR("Print requires a string argument.");
	}
	
      case Real:
	_ i;
	POP_INT(i);;
	PUSH(^value.Vfp((:FP) i));
	
      case Render: // XXX
	_ file;
	_ ht,wid,depth;
	_ fov;
	_ scene;
	_ vlights;
	_ a;
	
	POP;
	switch top {
	case Vstring(s): file = s;
	default: ERR("Render expects a string.");
	}
	
	POP_INT(ht);
	POP_INT(wid);
	POP_FP(fov);
	POP_INT(depth);
	POP_OBJ(scene);
	
	POP;
	switch top {
	case Varray(vs): vlights = vs;
	default: ERR("Render expects an array of lights.");
	}
	
	POP_POINT(a);
	
	_ num_lights = size(vlights);
	_ dummy_light = 
	  ^light.Ldir(^ldir(^Point::point(0,0,0),^Point::point(0,0,0)));

	_ lights = new_array(num_lights,dummy_light);
	
	for(_ i = 0; i < num_lights; i++) {
	  switch vlights[i] {
	  case Vlight(l): lights[i] = l;
	  default: ERR("Render lights must only contain lights.");
	  }
	}
	// Render evaluates surface functions and therefore
	// needs its own stack and list of return continuations.
	interpreter_save();
	Render::render(file,wid,ht,deg_to_rad(fov),depth,scene,lights,a);
	interpreter_restore();

      case Scale: // z :: y :: x :: obj
	_ x,y,z;

	POP_FP(z);
	POP_FP(y);
	POP_FP(x);

	POP;
	switch top {
	case Vobj(o):
	  _ a = Affine::scale(x,y,z);
	  _ o2 = ^obj.Trans(^(a,o));
	  PUSH(^value.Vobj(o2));
	default: ERR("Expected an object");
	}
      case Spotlight: // exponent :: cutoff :: color :: at :: pos
	_ exp,cutoff;
	_ col,at,pos;
	POP_FP(exp);
	POP_FP(cutoff);
	POP_POINT(col);
	POP_POINT(at);
	POP_POINT(pos);

	// Convert the cutoff into radians.
	cutoff = deg_to_rad(cutoff);

	_ sl = ^light.Lspot(^lspot(pos,at,col,cutoff,exp));
	PUSH(^value.Vlight(sl));

      case Translate: // z :: y :: x :: obj
	_ x,y,z;
	POP_FP(z);
	POP_FP(y);
	POP_FP(x);
	POP;
	switch top {
	case Vobj(o):
	  _ a = Affine::translate(x,y,z);
	  _ o2 = ^obj.Trans(^(a,o));
	  PUSH(^value.Vobj(o2));
	default: ERR("Translate requires an object.");
	}
      
      case Fp1(p1):
	_ f;
	POP_FP(f);

	switch p1 {
	case Acos  : f = rad_to_deg(arc_cos(f));
	case Asin  : f = rad_to_deg(arc_sin(f));
	case Clampf: f = (f<0) ? 0.0 : (f>1 ? 1.0 : f);
	case Cos   : f = cos(deg_to_rad(f));
	case Floor : f = floor(f);
	case Frac  : f = frac(f);
	case Sin   : f = sin(deg_to_rad(f));
	case Sqrt  : f = sqrt(f);
	}
	if(p1 == ^.Floor) { 
	  PUSH(^value.Vint((:int)f)); 
	}
	else { 
	  PUSH(^value.Vfp(f)); 
	}

      case Fp2(p2):
	_ x,y;
	POP_FP(y);
	POP_FP(x);
	switch p2 {
	case  Addf: PUSH(^value.Vfp(x + y));
	case  Divf: 
	  if(y==0.0) ERR("Divide by zero.");
	  PUSH(^value.Vfp(x/y));
	case   Eqf: PUSH(^value.Vbool(x==y));
	case Lessf: PUSH(^value.Vbool(x<y));
	case  Mulf: PUSH(^value.Vfp(x * y));
	case  Subf: PUSH(^value.Vfp(x-y));
	}
      case I2(i2):
	_ x,y;
	POP_INT(y);
	POP_INT(x);

	switch i2 {
	case  Addi: PUSH(^value.Vint(x+y));
	case  Divi: if(y==0) ERR("Divide by zero (int).");
	  PUSH(^value.Vint(x/y));
	case   Eqi: PUSH(^value.Vbool(x==y));
	case Lessi: PUSH(^value.Vbool(x<y));
	case  Modi: PUSH(^value.Vint(x % y));
	case  Muli: PUSH(^value.Vint(x * y));
	case  Subi: PUSH(^value.Vint(x - y));
	}
      case Obj(o):
	POP;
	switch top {
	case Vclos (_): ;
	case Vclos_rtcg (_): ;
	default: ERR("Object expects a closure.");
	}
	_ sol;
	switch o {
	case Cone    : sol = ^solid.Cone;
	case Cube    : sol = ^solid.Cube;
	case Cylinder: sol = ^solid.Cylinder;
	case Plane   : sol = ^solid.Plane;
	case Sphere  : sol = ^solid.Sphere;
	}
	
	_ o2 = ^obj.Base(^base(top,sol));
	PUSH(^value.Vobj(o2));

      case Obj1(op): // float :: obj
	_ f;
	_ o;
	POP_FP(f);
	POP_OBJ(o);
	_ a;
	switch op {
	case Uscale : a = Affine::uscale(f);
	case Rotatex: a = Affine::rotate_x(deg_to_rad(f));
	case Rotatey: a = Affine::rotate_y(deg_to_rad(f));
	case Rotatez: a = Affine::rotate_z(deg_to_rad(f));
	}

	_ o2 = ^obj.Trans(^(a,o));
	PUSH(^value.Vobj(o2));

      case Obj2(op):
	_ o1,o2;
	POP_OBJ(o2);
	POP_OBJ(o1);
	_ o;
	switch op {
	case Difference: o = ^obj.Diff(^(o1,o2));
	case Intersect : o = ^obj.Inter(^(o1,o2));
	case Union     : o = ^obj.Union(^(o1,o2));
	}
	PUSH(^value.Vobj(o));

      case Prim_Point(pp):
	_ p;
	POP_POINT(p);

	_ f;
	switch pp {
	case Getx: f = p.x;
	case Gety: f = p.y;
	case Getz: f = p.z;
	}

	PUSH(^value.Vfp(f));
      }
    case ArrayDone:
      // STACK specific code.
      int i = 0;
      int sp2 = sp-1;
      for(; sp2>=0; i++, sp2--) {
	switch stack[sp2] {
	case Marker: break; // out of the loop.
	default: ;
	}
      }

      if(sp2<0) ERR("Array done but no marker.");

      _ arr = new_array(i,^value.Marker);

      --i;
      for(; i>=0; --i) {
	POP;
	arr[i] = top;
      }

      POP; // Pop the marker off

      switch top {
      case Marker: ;
      default: ERR("Expected marker at the end of the array.");
      }      
      PUSH(^value.Varray(arr));
    }
  }

  // END of this function. 
}


//******************************************************************************
// RTCG compilation
// We might want a code cache but right now there does not seem to be any
// danger of duplicating code unless we're really stupid.
void rtcg_fun(<token>list prog)(env ev) {

    return codegen(void eval_fun_rtcg(env ev) {
	value top = ^value.Vint(0); // Filled by Pop.
	_ stack = global_stack;
	cut { while(prog!=null) {

	    _ tk = prog.hd;
	    prog = prog.tl;
	    
	    switch tk {
	    case Tid(i): 
		splice { PUSH(lookup(ev,fill(i))); }
	    case Tbinder: 
		splice { POP; 
		if(top == ^.Marker) 
		    ERR("Attempt to bind stack marker to variable.");
		ev = extend(ev,top); 
		}
	    case Tpush(v): 
		splice{ PUSH(fill(v)); }
	    case Tfun(ts): 
		_ f = rtcg_fun(ts);
		splice { PUSH(^value.Vclos_rtcg(^(ev,fill(f)))); }
	    case Tarray(ts): 
		splice { PUSH(^value.Marker); }
		prog = ^list(^token.ArrayDone,prog);
		prog = List::append(ts,prog);
	    case Tprim(p):
		switch p {
		case Apply:
		    splice {
			POP;
			switch top {
			case Vclos (_): ;
			case Vclos_rtcg(_): ;
			default: 
			    ERR("Apply expects closure on the stack.");
			}
		    }
		    if(prog!=null) { // If this is not a tail call. 
			splice { PUSH_RTCG_CONT(ev,prog); }
			prog = null; // Stop generating here.
		    }
		    splice {
			PUSH_CLOS(top);
			return;
		    }
		case Get:
		    splice {
			int i;
			value arr[];
		    
			POP_INT(i);
			POP;
			switch top {
			case Varray(vs): arr =vs;
			default: ERR("Get expects an array.");
			}
		    
			if(i<0 || i>=size(arr)) {
			    printf("Array bounds error: 0 <= %d < %d\n",
				   i,size(arr));
			ERR("Out of bounds.");
			}
		    PUSH(arr[i]);
		    }
		case If:
		    splice {
			_ false_clos;
			_ true_clos;
			_ cond;
			POP;
			false_clos = top;
			POP;
			true_clos = top;
			POP;
			switch top {
			case Vbool(b): cond = b;
			default: ERR("If test not a boolean.");
			}
			
			_ clos = cond ? true_clos : false_clos;
			switch clos {
			case Vclos(_): ;
			case Vclos_rtcg(_): ;
			default: ERR("Branch not a closure.");
			}
			cut {
			    if(prog!=null) {
				splice { PUSH_RTCG_CONT(ev,prog); }
				prog = null;
			    }
			}
			
			PUSH_CLOS(clos);
			return;
		    }
		case Length:
		    splice {
			POP;
			switch top {
			case Varray(vs):
			    PUSH(^value.Vint(size(vs)));
			default: ERR("Length expects an array.");
			}
		    }
		    
		case Light:
		    // Vpoint color :: Vpoint dir
		    splice {
			_ col, dir;
			
			POP_POINT(col);
			POP_POINT(dir);
			PUSH(^value.Vlight(^light.Ldir(^ldir(dir,col))));
		    }
		case Negi:
		    splice {
			_ i;
			POP_INT(i);
			PUSH(^value.Vint(-i));
		    }
		case Negf:
		    splice {
			_ f;
			POP_FP(f);
			PUSH(^value.Vfp(-f));
		    }
		case Point: // z :: y :: x
		    splice {
			_ x,y,z;
			POP_FP(z);
			POP_FP(y);
			POP_FP(x);
		    
			PUSH(^value.Vpoint(^Point::point(x,y,z)));
		    }
		    
		case Pointlight: // color :: pos
		    splice {
			_ col,pos;
			POP_POINT(col);
			POP_POINT(pos);
			PUSH(^value.Vlight(^light.Lpoint(^lpoint(pos,col))));
		    }
		    
		case Print:
		    splice {
			POP;
			switch top {
			case Vstring(s): printf("%s",s);
			case Vfp(f): print_fp(f);
			case Vint(i): printf("%d",i);
			default: ERR("Print requires a string argument.");
			}
		    }
		    
		case Real:
		    splice {
			_ i;
			POP_INT(i);;
			PUSH(^value.Vfp((:FP) i));
		    }
		case Render:
		    splice {
			_ file;
			_ ht,wid,depth;
			_ fov;
			_ scene;
			_ vlights;
			_ a;
			
			POP;
			switch top {
			case Vstring(s): file = s;
			default: ERR("Render expects a string.");
			}
			
			POP_INT(ht);
			POP_INT(wid);
			POP_FP(fov);
			POP_INT(depth);
			POP_OBJ(scene);
			
			POP;
			switch top {
			case Varray(vs): vlights = vs;
			default: 
			    ERR("Render expects an array of lights (RTCG).");
			}
			
			POP_POINT(a);
			
			_ num_lights = size(vlights);
			_ dummy_light = 
			    ^light.Ldir(^ldir(^Point::point(0,0,0),^Point::point(0,0,0)));
			
			_ lights = new_array(num_lights,dummy_light);
			
			for(_ i = 0; i < num_lights; i++) {
			    switch vlights[i] {
			    case Vlight(l): lights[i] = l;
			    default: 
				ERR("Render lights must only contain lights (RTCG).");
			    }
			}

			interpreter_save();
			Render::render(file,wid,ht,deg_to_rad(fov),depth,scene,
				       lights,a);
			interpreter_restore();
		    }
		case Scale: // z :: y :: x :: obj
		    splice {
			_ x,y,z;
			
			POP_FP(z);
			POP_FP(y);
			POP_FP(x);
			
			POP;
			switch top {
			case Vobj(o):
			    _ a = Affine::scale(x,y,z);
			    _ o2 = ^obj.Trans(^(a,o));
			    PUSH(^value.Vobj(o2));
			default: ERR("Expected an object");
			}
		    }
		case Spotlight: // exponent :: cutoff :: color :: at :: pos
		    splice {
			_ exp,cutoff;
			_ col,at,pos;
			POP_FP(exp);
			POP_FP(cutoff);
			POP_POINT(col);
			POP_POINT(at);
			POP_POINT(pos);
			
			// Convert the cutoff into radians.
			cutoff = deg_to_rad(cutoff);
			
			_ sl = ^light.Lspot(^lspot(pos,at,col,cutoff,exp));
			PUSH(^value.Vlight(sl));
		    }
		case Translate: // z :: y :: x :: obj
		    splice {
			_ x,y,z;
			POP_FP(z);
			POP_FP(y);
			POP_FP(x);
			POP;
			switch top {
			case Vobj(o):
			    _ a = Affine::translate(x,y,z);
			    _ o2 = ^obj.Trans(^(a,o));
			    PUSH(^value.Vobj(o2));
			default: ERR("Translate requires an object.");
			}
		    }
		case Fp1(p1):
		    splice {
			_ f;
			POP_FP(f);
		    
			cut {
			    switch p1 {
			    case Acos  : 
				splice { f = rad_to_deg(arc_cos(f)); }
			    case Asin  : 
				splice { f = rad_to_deg(arc_sin(f)); }
			    case Clampf: 
				splice { f = (f<0) ? 0.0 : (f>1 ? 1.0 : f); }
			    case Cos   : 
				splice { f = cos(deg_to_rad(f)); }
			    case Floor : 
				splice { f = floor(f); }
			    case Frac  : 
				splice { f = frac(f); }
			    case Sin   : 
				splice { f = sin(deg_to_rad(f)); }
			    case Sqrt  : 
				splice { f = sqrt(f); }
			    }
			    if(p1 == ^.Floor) { 
				splice { PUSH(^value.Vint((:int)f)); }
			    }
			    else { 
				splice { PUSH(^value.Vfp(f)); }
			    }
			}
		    }
		case Fp2(p2):
		    splice {
			_ x,y;
			POP_FP(y);
			POP_FP(x);
			cut { switch p2 {
			case  Addf: 
			    splice { PUSH(^value.Vfp(x + y)); }
			case  Divf: 
			    splice { 
				if(y==0.0) ERR("Divide by zero.");
				PUSH(^value.Vfp(x/y));
			    }
			case   Eqf: 
			    splice { PUSH(^value.Vbool(x==y)); }
			case Lessf: 
			    splice { PUSH(^value.Vbool(x<y)); }
			case  Mulf: 
			    splice { PUSH(^value.Vfp(x * y)); }
			case  Subf: 
			    splice { PUSH(^value.Vfp(x-y)); }
			}
			}
		    }
		case I2(i2):
		    splice {
			_ x,y;
			POP_INT(y);
			POP_INT(x);
			
			cut { switch i2 {
			case  Addi: 
			    splice { PUSH(^value.Vint(x+y)); }
			case  Divi: 
			    splice { 
				if(y==0) ERR("Divide by zero (int).");
				PUSH(^value.Vint(x/y));
			    }
			case   Eqi: 
			    splice { PUSH(^value.Vbool(x==y)); }
			case Lessi: 
			    splice { PUSH(^value.Vbool(x<y)); }
			case  Modi: 
			    splice { PUSH(^value.Vint(x % y)); }
			case  Muli: 
			    splice { PUSH(^value.Vint(x * y)); }
			case  Subi: 
			    splice { PUSH(^value.Vint(x - y)); }
			}}
		    }
		case Obj(o):
		    splice {
			POP;
			switch top {
			case Vclos (_): ;
			case Vclos_rtcg (_): ; 
			default: ERR("Object expects a closure.");
			}

			_ sol = ^solid.Sphere;
			cut { switch o {
			case Cone    : 
			    splice { sol = ^solid.Cone; }
			case Cube    : 
			    splice { sol = ^solid.Cube; }
			case Cylinder: 
			    splice { sol = ^solid.Cylinder; }
			case Plane   : 
			    splice { sol = ^solid.Plane; }
			case Sphere  : 
			    ;
			}}
			
			_ o2 = ^obj.Base(^base(top,sol));
			PUSH(^value.Vobj(o2));
		    }
		case Obj1(op): // float :: obj
		    splice { 
			_ f;
			_ o;
			POP_FP(f);
			POP_OBJ(o);
			_ a;
			cut { switch op {
			case Uscale : 
			    splice { 
				_ a = Affine::uscale(f); 
				_ o2 = ^obj.Trans(^(a,o));
				PUSH(^value.Vobj(o2));
			    }
			case Rotatex: 
			    splice { 
				_ a = Affine::rotate_x(deg_to_rad(f)); 
				_ o2 = ^obj.Trans(^(a,o));
				PUSH(^value.Vobj(o2));
			    }
			case Rotatey: 
			    splice { 
				_ a = Affine::rotate_y(deg_to_rad(f)); 
				_ o2 = ^obj.Trans(^(a,o));
				PUSH(^value.Vobj(o2));
			    }
			case Rotatez: 
			    splice { 
				_ a = Affine::rotate_z(deg_to_rad(f)); 
				_ o2 = ^obj.Trans(^(a,o));
				PUSH(^value.Vobj(o2));
			    }
			}}			
		    }
		case Obj2(op):
		    splice {
			_ o1,o2;
			POP_OBJ(o2);
			POP_OBJ(o1);
			cut { switch op {
			case Difference: 
			    splice { 
				_ o = ^obj.Diff(^(o1,o2)); 
				PUSH(^value.Vobj(o));
			    }
			case Intersect : 
			    splice { 
				_ o = ^obj.Inter(^(o1,o2)); 
				PUSH(^value.Vobj(o));
			    }
			case Union     : 
			    splice { 
				_ o = ^obj.Union(^(o1,o2)); 
				PUSH(^value.Vobj(o));
			    }
			}}
		    }
		case Prim_Point(pp):
		    splice {
			_ p;
			POP_POINT(p);
			
			cut { switch pp {
			case Getx: 
			    splice { 
				_ f = p.x;
				PUSH(^value.Vfp(f));
			    }
			case Gety: 
			    splice {
				_ f = p.y;
				PUSH(^value.Vfp(f));
			    }
			case Getz: 
			    splice { 
				_ f = p.z;
				PUSH(^value.Vfp(f));
			    }
			}}
		    }
		}
	    case ArrayDone:
		splice {
		    int i = 0;
		    int sp2 = sp-1;
		    for(; sp2>=0; i++, sp2--) {
			switch stack[sp2] {
			case Marker: break; // out of the loop.
			default: ;
			}
		    }
		
		if(sp2<0) ERR("Array done but no marker.");
		
		_ arr = new_array(i,^value.Marker);
		
		--i;
		for(; i>=0; --i) {
		    POP;
		    arr[i] = top;
		}
		
		POP; // Pop the marker off
		
		switch top {
		case Marker: ;
		default: ERR("Expected marker at the end of the array.");
		}      
		PUSH(^value.Varray(arr));
		}
	    }
	}}
	return;
    });
  // END of this function. 
}
