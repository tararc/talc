; TAL IMPLEMENTATION hand_vmul
; This file was generated by Fred.
;;
; In the PIP generate code, tmp was mapped to ST6.  I am moving it to ST0
; 
; tmp does not survive the final addition, therefore we must free ST0.
; To avoid an extra instruction we change the invariant so that the fp-sp
; moves up a notch.  This is returned to normal on entry to the "loop"
;


	INCLUDE	TAL.INC
	_begin_TAL
	TAL_IMPORT	pop_runtimenew.tali
	TAL_IMPORT	hand_vmul_i.tali
	TAL_EXPORT	hand_vmul_e.tali
	TYPE	<FILEA =^T(0)`FILE?mem>
	TYPE	<Hashtable?tableA =`Hashtable?table?>
	TYPE	<Core?OptA =fn va:T4 . ^T(0)(`Core?Opt?mem va)>
	TYPE	<memTypeA =^T(0)`memType?mem>
	CODE
TEMPLATE_START T$320,<tmpl(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{vmul_hand_rtcg$318:L0v cap[] junk4::junk4::junk4::se junk 12::se se {EDX:Matrix?vectorA,ECX:Matrix?matrixA,EAX:Matrix?vectorA},_vmul_hand_rtcg:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se},{})>
_vmul_hand_rtcg:
LABELTYPE <Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se>
	MOV	EDX,DWORD PTR unroll([ESP+12])
	MOV	ECX,DWORD PTR unroll([ESP+8])
	MOV	EAX,DWORD PTR unroll([ESP+4])
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
vmul_hand_rtcg$318:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {EDX:Matrix?vectorA,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(EDX)+0]
	FSTP	ST(1)
	FLD	QWORD PTR [unroll(EDX)+8]
	FSTP	ST(2)
	FLD	QWORD PTR [unroll(EDX)+16]
	FSTP	ST(3)
	FLD	QWORD PTR [unroll(EDX)+24]
	FSTP	ST(4)				; NEW''
;	FST	ST(4)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$327,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$326:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$326:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLDZ		; NEW'
	FSTP	ST(5)	; NEW'
;	FLDZ		; NEW
;	FSTP	ST(6)	; NEW
;	FINCSTP
;	FLDZ
;	FST	ST(5)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 


TEMPLATE_START T$338,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST0,ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$337:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$337:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
;	FINCSTP		; NEW'
	FLDZ		; NEW
;	FSTP	ST(7)	; NEW
;	FINCSTP
;	FLDZ
;	FST	ST(6)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$351,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST0,ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$350:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST0,ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$350:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST0,ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FADD	ST,ST(1)	; NEW'
;	FLD	ST(1)   	; NEW
;	FADDP	ST(7),ST	; NEW
;	FINCSTP
;	FLD	ST(5)
;	FADD	ST,ST(1)
;	FXCH	ST(6)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$355,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$354:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$354:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FADD	ST,ST(2)	; NEW'
;	FLD	ST(2)		; NEW
;	FADDP	ST(7),ST	; NEW
;	FINCSTP
;	FLD	ST(5)
;	FADD	ST,ST(2)
;	FXCH	ST(6)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$359,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$358:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$358:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FADD	ST,ST(3)	; NEW
;	FLD	ST(3)		; NEW
;	FADDP	ST(7),ST	; NEW
;	FINCSTP
;	FLD	ST(5)
;	FADD	ST,ST(3)
;	FXCH	ST(6)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$363,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$362:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$362:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FADD	ST,ST(4)	; NEW'
;	FLD	ST(4)		; NEW
;	FADDP	ST(7),ST	; NEW
;	FINCSTP
;	FLD	ST(5)
;	FADD	ST,ST(4)
;	FXCH	ST(6)
;	FFREE	ST
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$369,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$368:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$368:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FADDP	ST(5),ST	; NEW''
;	FADD	ST(5),ST	; NEW'
;	FFREE 	ST		; NEW'
;	FLD	ST(6)		; NEW
;	FADDP	ST(6),ST	; NEW
;	FFREE	ST(6)		; NEW
;	FINCSTP
;	FLD	ST(4)
;	FADD	ST,ST(6)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$375,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$374:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$374:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FSUBP	ST(5),ST	; NEW''
;	FSUB	ST(5),ST	; NEW'
;	FFREE	ST		; NEW'

;	FLD	ST(6) 		; NEW
;	FSUBP	ST(6),ST	; NEW
;	FFREE	ST(6)		; NEW

;	FINCSTP
;	FLD	ST(4)
;	FSUB	ST,ST(6)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$380,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$379:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$379:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+0]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+0]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+0]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$384,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$383:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$383:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+8]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+8]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+8]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$388,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$387:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$387:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+16]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+16]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+16]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$392,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$391:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$391:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+24]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+24]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+24]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$396,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$395:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$395:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+32]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+32]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+32]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$400,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$399:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$399:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+40]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+40]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+40]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$404,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$403:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$403:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+48]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+48]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+48]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$408,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$407:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$407:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+56]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+56]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+56]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$412,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$411:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$411:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+64]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+64]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+64]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$416,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$415:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$415:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+72]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+72]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+72]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$420,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$419:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$419:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+80]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+80]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+80]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$424,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$423:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$423:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+88]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+88]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+88]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$428,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$427:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$427:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+96]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+96]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+96]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$432,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$431:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$431:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+104]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+104]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+104]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$436,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$435:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$435:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+112]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+112]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+112]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$440,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$439:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$439:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	QWORD PTR [unroll(ECX)+120]	;NEW'
	FMULP	ST(1),ST			;NEW'
	FADDP	ST(5),ST			;NEW''
;	FADD	ST(5),ST			;NEW'
;	FFREE	ST				;NEW'
;	FLD	QWORD PTR [unroll(ECX)+120]	;NEW
;	FMUL	ST,ST(7)			;NEW
;	FADDP	ST(6),ST			;NEW
;	FFREE	ST(6)				;NEW
;	FINCSTP
;	FLD	QWORD PTR [unroll(ECX)+120]
;	FMUL	ST,ST(6)
;	FADD	ST,ST(5)
;	FXCH	ST(5)
;	FFREE	ST
;	FFREE	ST(6)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$443,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$442:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$442:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
;	FINCSTP
;	FDECSTP
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$448,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$447:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$447:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	ST(4)				; NEW
	FSTP	QWORD PTR [unroll(EAX)+0]	; NEW
	FFREE	ST(4)				; NEW
;	FINCSTP
;	FLD	ST(4)
;	FST	QWORD PTR [unroll(EAX)+0]
;	FFREE	ST
;	FFREE	ST(5)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$452,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$451:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$451:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	ST(4)				; NEW
	FSTP	QWORD PTR [unroll(EAX)+8]	; NEW
	FFREE	ST(4)				; NEW
;	FINCSTP
;	FLD	ST(4)
;	FST	QWORD PTR [unroll(EAX)+8]
;	FFREE	ST
;	FFREE	ST(5)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$456,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$455:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$455:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	ST(4)				; NEW
	FSTP	QWORD PTR [unroll(EAX)+16]	; NEW
	FFREE	ST(4)				; NEW
;	FINCSTP
;	FLD	ST(4)
;	FST	QWORD PTR [unroll(EAX)+16]
;	FFREE	ST
;	FFREE	ST(5)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$460,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$459:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$459:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
	FLD	ST(4)				; NEW
	FSTP	QWORD PTR [unroll(EAX)+24]	; NEW
	FFREE	ST(4)				; NEW
;	FINCSTP
;	FLD	ST(4)
;	FST	QWORD PTR [unroll(EAX)+24]
;	FFREE	ST
;	FFREE	ST(5)
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$463,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ECX:Matrix?matrixA,EAX:Matrix?vectorA},L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{T_entry$462:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ECX:Matrix?matrixA,EAX:Matrix?vectorA}},{})>
T_entry$462:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ECX:Matrix?matrixA,EAX:Matrix?vectorA}>
;	FINCSTP
;	FDECSTP
	FALLTHRU	<a1,a2,a3,s1,s2,e1,e2>
TEMPLATE_END 

TEMPLATE_START T$466,<tmpl(L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1?,ST2?,ST3?,ST0?},*,{T_entry$465:L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1?,ST2?,ST3?,ST0?}},{})>
T_entry$465:
LABELTYPE <L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1?,ST2?,ST3?,ST0?}>
	FFREE	ST
	FFREE	ST(1)
	FFREE	ST(2)
	FFREE	ST(3)
	RETN
TEMPLATE_END 

_Matrix?vmul_hand_gen:
LABELTYPE <F (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se) `Matrix?matrix?::se junk 4::se>
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	SUB	ESP,28
	MOV	ESI,DWORD PTR unroll([ESP+44])
	MOV	DWORD PTR [ESP+4],EBP
Matrix?vmul_hand_gen$303:
	MOV	EAX,DWORD PTR unroll([_Matrix?vmul_hand_code_cache+0])
	NAMEOBJ	nm?$1,EAX
	CMP	EAX,0
	JE	ifTrue$304
	JMP	ifMerge$306
ifTrue$304:
	MALLOC	nm?$3,4
	MOV	EBX,EAX
	PUSH	_Matrix?matrix_desc_hash
	PUSH	_Matrix?matrix_desc_cmp
	PUSH	subsume(<B4>,101)
	CALL	tapp(_Hashtable?create,<`Matrix?matrix_desc?,Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,EBX,ESI,EDI,ESP 3 15 s1,s2,&[e1,cap[nm?$3!^*[B4^rw]]],e2>)
	ADD	ESP,12
	MOV	DWORD PTR [EBX+0],EAX
	FORGETUNIQUE	nm?$3
	COERCE	forgetname(EBX)
	COERCE	sum(<Core?OptA (`Hashtable?table? `Matrix?matrix_desc? (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se))>,roll(<^(`Core?Opt?mem (`Hashtable?table? `Matrix?matrix_desc? (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se)))>,EBX))
	MOV	DWORD PTR [_Matrix?vmul_hand_code_cache+0],roll(<`Core?Opt? (`Hashtable?table? `Matrix?matrix_desc? (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se))>,EBX)
	MOV	EAX,DWORD PTR unroll([_Matrix?vmul_hand_code_cache+0])
	NAMEOBJ	nm?$5,EAX
	CMP	EAX,0
	JE	nullFailure$927
	COERCE	forgetname(EAX)
	MOV	EDI,DWORD PTR [unroll(EAX)+0]
	MALLOC	nm?$8,16
	MOV	EBX,EAX
	PUSH	subsume(<B4>,0)
	PUSH	subsume(<B4>,16)
	CALL	tapp(_new_array,<B4,EBX,ESI,EDI,ESP 2 14 s1,s2,&[e1,cap[nm?$8!^*[B4^rw,B4^rw,B4^rw,B4^rw]]],e2>)
	ADD	ESP,8
	MOV	DWORD PTR [EBX+0],EAX
	MOV	DWORD PTR [EBX+4],subsume(<B4>,0)
	MOV	DWORD PTR [EBX+8],subsume(<B4>,0)
	MOV	DWORD PTR [EBX+12],subsume(<B4>,0)
	FORGETUNIQUE	nm?$8
	COERCE	forgetname(EBX)
	MOV	EAX,roll(<^`Matrix?matrix_desc?mem>,EBX)
	PUSH	_Matrix?vmul
	PUSH	roll(<`Matrix?matrix_desc?>,EAX)
	PUSH	EDI
	CALL	tapp(_Hashtable?insert,<`Matrix?matrix_desc?,Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,EBX,ESI,EDI,ESP 3 15 s1,s2,e1,e2>)
	ADD	ESP,12
ifMerge$306:
	PUSH	roll(<`Matrix?matrix?>,ESI)
	CALL	tapp(_Matrix?matrix2desc,<EBX,ESI,EDI,ESP 1 13 s1,s2,e1,e2>)
	ADD	ESP,4
	COERCE	unroll(EAX)
	MOV	DWORD PTR [ESP+8],EAX
	ADD	ESP,4
	PUSH	tapp(tryCatch$313,<a1,a2,a3,s1,s2,e1,e2>)
	MOV	EBP,ESP
	MOV	EAX,DWORD PTR unroll([_Matrix?vmul_hand_code_cache+0])
	NAMEOBJ	nm?$13,EAX
	CMP	EAX,0
	JE	nullFailure$927	virtual<	COERCE	forgetname(EAX)>
	COERCE	forgetname(EAX)
	MOV	EAX,DWORD PTR [unroll(EAX)+0]
	PUSH	DWORD PTR roll(<`Matrix?matrix_desc?>,[EBP+8])
	PUSH	EAX
	CALL	tapp(_Hashtable?lookup,<`Matrix?matrix_desc?,Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,EBX,ESI,EDI,se,EBP 1,cap[],&[e2,e1]>)
	ADD	ESP,12
	PUSH	tapp(tryCatch$313,<a1,a2,a3,s1,s2,e1,e2>)
	MOV	EBP,ESP
	MOV	EBP,DWORD PTR [ESP+4]
	ADD	ESP,28
	POP	EDI
	POP	ESI
	POP	EBX
	RETN
tryCatch$313:
LABELTYPE <All[a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1],EAX:exn,EBX:junk4,ESP:sptr (sptr (H e2 s2)::s2)::Matrix?matrix_descA::junk4::junk4::junk4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2),ESI:junk4,EDI:junk4}>
	SUB	ESP,4
	MOV	EBP,DWORD PTR [ESP+4]
	MOV	DWORD PTR [ESP+12],subsume(<B4>,0)
	MOV	EAX,DWORD PTR [_Matrix?vmul_hand_num_gen+0]
	ADD	EAX,1
	MOV	DWORD PTR [_Matrix?vmul_hand_num_gen+0],EAX
	CGSTART	<cg$0,Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se>
	MOV	EBX,EAX
	CGDUMP	EBX,tp$0,EAX,T$320
	CGFORGET	cg$0,tp$0
	MOV	DWORD PTR [ESP+16],subsume(<B4>,0)
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
forTest$323:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:junk4,ESI:junk4,EBX:Nm(cg$0),ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::junk4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
	CMP	DWORD PTR [ESP+16],subsume(<B4>,4)
	JGE	forEnd$325
	MOV	EDX,subsume(<B4>,0)
	CGDUMP	EBX,tp$1,EAX,T$327
	CGFORGET	cg$0,tp$1
	MOV	ESI,subsume(<B4>,0)
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
forTest$330:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:junk4,ESI:B4,EDX:B4,EBX:Nm(cg$0),ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::junk4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
	CMP	ESI,subsume(<B4>,4)
	JGE	forEnd$332
	MOV	EAX,DWORD PTR [ESP+16]
	IMUL	EAX,4
	ADD	EAX,ESI
	MOV	DWORD PTR [ESP+20],EAX
	MOV	EAX,DWORD PTR unroll([ESP+8])
	MOV	EAX,DWORD PTR [EAX+0]
	UNPACK	va$5,EAX,EAX
	MOV	ECX,DWORD PTR [EAX+0]
	MOV	EAX,DWORD PTR [EAX+4]
	MOV	EDI,DWORD PTR [ESP+20]
	UNPACK	va$4,EDI,EDI
	CMP	ECX,EDI
	JBE	_array_bounds_error
	MOV	EAX,DWORD PTR [EAX+4*EDI+0]
	MOV	EDI,EAX
	MOV	ECX,ESI
	MOV	EAX,1
	SHL	EAX,CL
	AND	EAX,EDX
	CMP	EAX,subsume(<B4>,0)
	JNE	ifFalse$334
	MOV	EAX,DWORD PTR unroll([ESP+8])
	MOV	EAX,DWORD PTR [EAX+4]
	MOV	DWORD PTR [ESP+44],EAX
	MOV	ECX,DWORD PTR [ESP+20]
	MOV	EAX,1
	SHL	EAX,CL
	AND	EAX,DWORD PTR [ESP+44]
	CMP	EAX,subsume(<B4>,0)
	JNE	ifFalse$334
	CGDUMP	EBX,tp$2,EAX,T$338
	CGFORGET	cg$0,tp$2
	MOV	ECX,ESI
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
forTest$341:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:B4,ECX:B4,EBX:Nm(cg$0),EDX:B4,ESI:B4,ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::B4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
	CMP	ECX,subsume(<B4>,4)
	JGE	forEnd$343
	MOV	EAX,EDI
	SAR	EAX,CL
	AND	EAX,1
	CMP	EAX,subsume(<B4>,1)
	JE	ifTrue$344
	JMP	condfalse$347
forEnd$325:
	CGDUMP	EBX,tp$31,EAX,T$466
	CGFORGET	cg$0,tp$31
	CGEND	EBX
	MOV	EAX,DWORD PTR [_Matrix?vmul_hand_benefit+0]
	UNPACK	va$6,EAX,EAX
	MOV	EAX,DWORD PTR [EAX+0]
	COERCE	subsume(<B4>,EAX)
	CMP	DWORD PTR [ESP+12],EAX
	JG	ifTrue$468
	JMP	condfalse$471
condfalse$471:
	CMP	DWORD PTR [ESP+12],subsume(<B4>,0)
	JGE	ifFalse$469
ifTrue$468:
	MOV	EAX,DWORD PTR unroll([_tal_stdout+0])
	PUSH	DWORD PTR [_str6+0]
	PUSH	roll(<`FILE?>,EAX)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 14 s1,s2,e1,e2>)
	ADD	ESP,8
	MOV	EAX,DWORD PTR unroll([_tal_stdout+0])
	PUSH	DWORD PTR [ESP+12]
	PUSH	roll(<`FILE?>,EAX)
	CALL	tapp(_fprint_int,<EBX,ESI,EDI,ESP 2 14 s1,s2,e1,e2>)
	ADD	ESP,8
	MOV	EAX,DWORD PTR unroll([_tal_stdout+0])
	PUSH	DWORD PTR [_str7+0]
	PUSH	roll(<`FILE?>,EAX)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 14 s1,s2,e1,e2>)
	ADD	ESP,8
	MALLOC	nm?$112,8
	MOV	ECX,Core?Failure?exn
	MOV	DWORD PTR [EAX+0],ECX
	MOV	ECX,DWORD PTR [_str8+0]
	MOV	DWORD PTR [EAX+4],ECX
	FORGETUNIQUE	nm?$112
	COERCE	forgetname(EAX)
	COERCE	pack(<str^rw>,EAX,<exn>)
	MOV	ESP,EBP
	RETN
ifFalse$469:
	MOV	EAX,DWORD PTR [_Matrix?vmul_hand_benefit+0]
	MOV	ECX,EAX
	UNPACK	va$8,ECX,ECX
	MOV	EDX,DWORD PTR [ECX+0]
	MOV	ECX,DWORD PTR [ECX+4]
	MOV	ESI,DWORD PTR [ESP+12]
	UNPACK	va$7,ESI,ESI
	CMP	EDX,ESI
	JBE	_array_bounds_error
	MOV	ECX,DWORD PTR [ECX+4*ESI+0]
	ADD	ECX,1
	UNPACK	va$10,EAX,EAX
	MOV	EDX,DWORD PTR [EAX+0]
	MOV	EAX,DWORD PTR [EAX+4]
	MOV	ESI,DWORD PTR [ESP+12]
	UNPACK	va$9,ESI,ESI
	CMP	EDX,ESI
	JBE	_array_bounds_error
	MOV	DWORD PTR [EAX+4*ESI+0],ECX
	MOV	EAX,DWORD PTR unroll([_Matrix?vmul_hand_code_cache+0])
	NAMEOBJ	nm?$127,EAX
	CMP	EAX,0
	JE	nullFailure$927
	COERCE	forgetname(EAX)
	MOV	EAX,DWORD PTR [unroll(EAX)+0]
	PUSH	EBX
	PUSH	DWORD PTR roll(<`Matrix?matrix_desc?>,[ESP+12])
	PUSH	EAX
	CALL	tapp(_Hashtable?insert,<`Matrix?matrix_desc?,Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,EBX,ESI,EDI,ESP 3 15 s1,s2,e1,e2>)
	ADD	ESP,12
	MOV	EAX,EBX
	ADD	ESP,28
	POP	EDI
	POP	ESI
	POP	EBX
	RETN
forEnd$332:
	CMP	DWORD PTR [ESP+16],0
	JE	case0$446
	CMP	DWORD PTR [ESP+16],1
	JE	case1$450
	CMP	DWORD PTR [ESP+16],2
	JE	case2$454
	JMP	default$458
default$458:
	CGDUMP	EBX,tp$29,EAX,T$460
	CGFORGET	cg$0,tp$29
	JMP	endswitch$445
case0$446:
	CGDUMP	EBX,tp$26,EAX,T$448
	CGFORGET	cg$0,tp$26
	JMP	endswitch$445
case1$450:
	CGDUMP	EBX,tp$27,EAX,T$452
	CGFORGET	cg$0,tp$27
	JMP	endswitch$445
case2$454:
	CGDUMP	EBX,tp$28,EAX,T$456
	CGFORGET	cg$0,tp$28
endswitch$445:
;	CGDUMP	EBX,tp$30,EAX,T$463
;	CGFORGET	cg$0,tp$30
	MOV	EAX,DWORD PTR [ESP+16]
	ADD	EAX,1
	MOV	DWORD PTR [ESP+16],EAX
	JMP	tapp(forTest$323,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
ifFalse$334:
	MOV	EAX,DWORD PTR [ESP+12]
	ADD	EAX,1
	MOV	DWORD PTR [ESP+12],EAX
	JMP	tapp(ifMerge$335,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
forEnd$343:
	MOV	EAX,DWORD PTR unroll([ESP+8])
	MOV	EAX,DWORD PTR [EAX+8]
	MOV	ECX,DWORD PTR [ESP+20]
	SAR	EAX,CL
	AND	EAX,1
	CMP	EAX,subsume(<B4>,1)
	JNE	ifFalse$366
	MOV	EAX,DWORD PTR [ESP+12]
	ADD	EAX,1
	MOV	DWORD PTR [ESP+12],EAX
	CGDUMP	EBX,tp$7,EAX,T$369
	CGFORGET	cg$0,tp$7
	JMP	ifMerge$367
ifFalse$366:
	MOV	EAX,DWORD PTR unroll([ESP+8])
	MOV	EAX,DWORD PTR [EAX+12]
	MOV	ECX,DWORD PTR [ESP+20]
	SAR	EAX,CL
	AND	EAX,1
	CMP	EAX,subsume(<B4>,1)
	JNE	ifFalse$372
	MOV	EAX,DWORD PTR [ESP+12]
	ADD	EAX,1
	MOV	DWORD PTR [ESP+12],EAX
	CGDUMP	EBX,tp$8,EAX,T$375
	CGFORGET	cg$0,tp$8
	JMP	ifMerge$373
ifFalse$372:
	CMP	DWORD PTR [ESP+20],7
	JGE	jt$928
	CMP	DWORD PTR [ESP+20],0
	JE	case0$378
	CMP	DWORD PTR [ESP+20],1
	JE	case1$382
	CMP	DWORD PTR [ESP+20],2
	JE	case2$386
	CMP	DWORD PTR [ESP+20],3
	JE	case3$390
	CMP	DWORD PTR [ESP+20],4
	JE	case4$394
	CMP	DWORD PTR [ESP+20],5
	JE	case5$398
	CMP	DWORD PTR [ESP+20],6
	JE	case6$402
	JMP	default$438
jt$928:
	CMP	DWORD PTR [ESP+20],7
	JE	case7$406
	CMP	DWORD PTR [ESP+20],8
	JE	case8$410
	CMP	DWORD PTR [ESP+20],9
	JE	case9$414
	CMP	DWORD PTR [ESP+20],10
	JE	case10$418
	CMP	DWORD PTR [ESP+20],11
	JE	case11$422
	CMP	DWORD PTR [ESP+20],12
	JE	case12$426
	CMP	DWORD PTR [ESP+20],13
	JE	case13$430
	CMP	DWORD PTR [ESP+20],14
	JE	case14$434
	JMP	default$438
default$438:
	CGDUMP	EBX,tp$24,EAX,T$440
	CGFORGET	cg$0,tp$24
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case0$378:
	CGDUMP	EBX,tp$9,EAX,T$380
	CGFORGET	cg$0,tp$9
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case1$382:
	CGDUMP	EBX,tp$10,EAX,T$384
	CGFORGET	cg$0,tp$10
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case2$386:
	CGDUMP	EBX,tp$11,EAX,T$388
	CGFORGET	cg$0,tp$11
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case3$390:
	CGDUMP	EBX,tp$12,EAX,T$392
	CGFORGET	cg$0,tp$12
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case4$394:
	CGDUMP	EBX,tp$13,EAX,T$396
	CGFORGET	cg$0,tp$13
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case5$398:
	CGDUMP	EBX,tp$14,EAX,T$400
	CGFORGET	cg$0,tp$14
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case6$402:
	CGDUMP	EBX,tp$15,EAX,T$404
	CGFORGET	cg$0,tp$15
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case7$406:
	CGDUMP	EBX,tp$16,EAX,T$408
	CGFORGET	cg$0,tp$16
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case8$410:
	CGDUMP	EBX,tp$17,EAX,T$412
	CGFORGET	cg$0,tp$17
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case9$414:
	CGDUMP	EBX,tp$18,EAX,T$416
	CGFORGET	cg$0,tp$18
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case10$418:
	CGDUMP	EBX,tp$19,EAX,T$420
	CGFORGET	cg$0,tp$19
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case11$422:
	CGDUMP	EBX,tp$20,EAX,T$424
	CGFORGET	cg$0,tp$20
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case12$426:
	CGDUMP	EBX,tp$21,EAX,T$428
	CGFORGET	cg$0,tp$21
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case13$430:
	CGDUMP	EBX,tp$22,EAX,T$432
	CGFORGET	cg$0,tp$22
	JMP	tapp(endswitch$377,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case14$434:
	CGDUMP	EBX,tp$23,EAX,T$436
	CGFORGET	cg$0,tp$23
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
endswitch$377:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:junk4,ESI:B4,EDX:B4,EBX:Nm(cg$0),ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::junk4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
ifMerge$373:
ifMerge$367:
;	CGDUMP	EBX,tp$25,EAX,T$443
;	CGFORGET	cg$0,tp$25
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
ifMerge$335:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:junk4,ESI:B4,EDX:B4,EBX:Nm(cg$0),ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::junk4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
	ADD	ESI,1
	JMP	tapp(forTest$330,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
condfalse$347:
	CMP	ECX,ESI
	JNE	ifFalse$345
ifTrue$344:
	MOV	EAX,1
	SHL	EAX,CL
	OR	EAX,EDX
	MOV	EDX,EAX
	CMP	ECX,0
	JE	case0$349
	CMP	ECX,1
	JE	case1$353
	CMP	ECX,2
	JE	case2$357
	JMP	default$361
ifFalse$345:
	JMP	ifMerge$346
default$361:
	CGDUMP	EBX,tp$6,EAX,T$363
	CGFORGET	cg$0,tp$6
	JMP	tapp(endswitch$348,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case0$349:
	CGDUMP	EBX,tp$3,EAX,T$351
	CGFORGET	cg$0,tp$3
	JMP	tapp(endswitch$348,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case1$353:
	CGDUMP	EBX,tp$4,EAX,T$355
	CGFORGET	cg$0,tp$4
	JMP	tapp(endswitch$348,<cg$0,a1,a2,a3,s1,s2,e1,e2>)
case2$357:
	CGDUMP	EBX,tp$5,EAX,T$359
	CGFORGET	cg$0,tp$5
	FALLTHRU	<cg$0,a1,a2,a3,s1,s2,e1,e2>
endswitch$348:
LABELTYPE <All[cg$0:Tn a1:T4 a2:T4 a3:T4 s1:Ts s2:Ts e1:Tcap e2:Tcap].code{cap: &[e2,e1,cap[cg$0!cgregion(Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,L0v cap[] junk4::junk4::junk4::se junk 12::se se {ST1,ST2,ST3,ST4,ST5,ST0,ECX:Matrix?matrixA,EAX:Matrix?vectorA},{})]],EBP:sptr (H e2 s2)::s2,EDI:B4,ECX:B4,EBX:Nm(cg$0),EDX:B4,ESI:B4,ESP:sptr junk 4::(sptr (H e2 s2)::s2)::Matrix?matrix_descA::B4::B4::B4::junk4::a3::a2::a1::(code{cap: &[e1,e2],ESP:sptr (junk 4::se#s1)#(H e2 s2)::s2,EBP:sptr (H e2 s2)::s2,EDI:a3,EAX:Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se,ESI:a2,EBX:a1})::junk4::(s1#(H e2 s2)::s2)}>
ifMerge$346:
	ADD	ECX,1
	JMP	tapp(forTest$341,<cg$0,a1,a2,a3,s1,s2,e1,e2>)

;; FUN START: vmul_hand_report
_Matrix?vmul_hand_report:
LABELTYPE <Fv `FILE?::se junk 4::se>
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	SUB	ESP,4
	MOV	ESI,DWORD PTR unroll([ESP+20])
Matrix?vmul_hand_report$274:
	MOV	EAX,DWORD PTR [_Matrix?vmul_hand_benefit+0]
	UNPACK	va$1,EAX,EAX
	MOV	EDI,DWORD PTR [EAX+0]
	MOV	EAX,DWORD PTR [EAX+4]
	MOV	DWORD PTR [ESP+20],EAX
	PUSH	DWORD PTR [_str0+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [_str1+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	MOV	EAX,DWORD PTR [_Matrix?vmul_hand_num_gen+0]
	PUSH	EAX
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_int,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [_str2+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [_str3+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	MOV	EBX,subsume(<B4>,0)
	FALLTHRU	<va$1,a1,a2,a3,s1,s2,e1,e2>
forTest$289:
LABELTYPE <All[va$1:Sint].(L3v cap[] (^*[array(va$1,B4^rw)])::se junk 4::se junk4::se {EBX:B4,ESI:FILEA,EDI:S(va$1)})>
	MOV	EAX,subsume(<B4>,EDI)
	CMP	EBX,EAX
	JGE	forEnd$291
	MOV	EAX,EBX
	UNPACK	va$2,EAX,EAX
	CMP	EDI,EAX
	JBE	_array_bounds_error
	MOV	ECX,DWORD PTR [ESP+20]
	MOV	EAX,DWORD PTR [ECX+4*EAX+0]
	PUSH	EAX
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_int,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	PUSH	DWORD PTR [_str4+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,8
	MOV	EAX,EBX
	ADD	EAX,1
	MOV	EBX,EAX
	JMP	tapp(forTest$289,<va$1,a1,a2,a3,s1,s2,e1,e2>)
forEnd$291:
	PUSH	DWORD PTR [_str5+0]
	PUSH	roll(<`FILE?>,ESI)
	CALL	tapp(_fprint_string,<EBX,ESI,EDI,ESP 2 8 s1,s2,e1,e2>)
	ADD	ESP,12
	POP	EDI
	POP	ESI
	POP	EBX
	RETN

nullFailure$927:
	FFREE	ST
	FFREE	ST(1)
	FFREE	ST(2)
	FFREE	ST(3)
	FFREE	ST(4)
	FFREE	ST(5)
	FFREE	ST(6)
	FFREE	ST(7)
	MOV	EAX,DWORD PTR [NullPointer?exn?pkt+0]
	MOV	ESP,EBP
	RETN
unionFailure$930:
	FFREE	ST
	FFREE	ST(1)
	FFREE	ST(2)
	FFREE	ST(3)
	FFREE	ST(4)
	FFREE	ST(5)
	FFREE	ST(6)
	FFREE	ST(7)
	MOV	EAX,DWORD PTR [UnionVariant?exn?pkt+0]
	MOV	ESP,EBP
	RETN

	DATA

_Matrix?vmul_hand_benefit:
LABELTYPE <^*[(arr B4^rw)^rw]>
	DD	gbl$6
_Matrix?vmul_hand_code_cache:
LABELTYPE <^*[(`Core?Opt? (`Hashtable?table? `Matrix?matrix_desc? (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se)))^rw]>
	DD	rollsum(<`Core?Opt? (`Hashtable?table? `Matrix?matrix_desc? (Fv `Matrix?vector?::`Matrix?matrix?::`Matrix?vector?::se junk 12::se))>,0)
_Matrix?vmul_hand_num_gen:
LABELTYPE <^*[B4^rw]>
	DD	subsume(<B4>,0)

gbl$6:
LABELTYPE <arr B4^rw>
COERCE	pack(<16>,?,<arr B4^rw>)
	DD	16
	DD	array$5
array$5:
LABELTYPE <^*[array(16,B4^rw)]>
COERCE	array(0,0,<B4^rw>,?)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)
	DD	subsume(<B4>,0)

_str0:
LABELTYPE <^*[str^rw]>
	DD	gbl$276
_str1:
LABELTYPE <^*[str^rw]>
	DD	gbl$279
_str2:
LABELTYPE <^*[str^rw]>
	DD	gbl$283
_str3:
LABELTYPE <^*[str^rw]>
	DD	gbl$286
_str4:
LABELTYPE <^*[str^rw]>
	DD	gbl$294
_str5:
LABELTYPE <^*[str^rw]>
	DD	gbl$297
_str6:
LABELTYPE <^*[str^rw]>
	DD	gbl$473
_str7:
LABELTYPE <^*[str^rw]>
	DD	gbl$477
_str8:
LABELTYPE <^*[str^rw]>
	DD	gbl$479
_str9:
LABELTYPE <^*[str^rw]>
	DD	gbl$491
_str10:
LABELTYPE <^*[str^rw]>
	DD	gbl$495
_str11:
LABELTYPE <^*[str^rw]>
	DD	gbl$499
_str12:
LABELTYPE <^*[str^rw]>
	DD	gbl$503
_str13:
LABELTYPE <^*[str^rw]>
	DD	gbl$507

gbl$276:
COERCE	pack(<19>,?,<str>)
	DD	19
	DD	string$277
string$277:
LABELTYPE <^*[array(19,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	118,109,117,108,61,92,39,118,109,117,108,50,95,103,101,110,92,39,10
gbl$279:
COERCE	pack(<10>,?,<str>)
	DD	10
	DD	string$280
string$280:
LABELTYPE <^*[array(10,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"num_gen = "
gbl$283:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$284
string$284:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$286:
COERCE	pack(<16>,?,<str>)
	DD	16
	DD	string$287
string$287:
LABELTYPE <^*[array(16,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"benefit_dist = ["
gbl$294:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$295
string$295:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" "
gbl$298:
COERCE	pack(<11>,?,<str>)
	DD	11
	DD	string$299
string$299:
LABELTYPE <^*[array(11,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	32,102,117,110,99,116,105,111,110,115,10
gbl$297:
COERCE	pack(<3>,?,<str>)
	DD	3
	DD	string$298
string$298:
LABELTYPE <^*[array(3,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	93,59,10
gbl$301:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$302
string$302:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$473:
COERCE	pack(<11>,?,<str>)
	DD	11
	DD	string$474
string$474:
LABELTYPE <^*[array(11,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" benefit = "
gbl$477:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$478
string$478:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$479:
COERCE	pack(<21>,?,<str>)
	DD	21
	DD	string$480
string$480:
LABELTYPE <^*[array(21,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Unreasonable benefit!"
gbl$491:
COERCE	pack(<20>,?,<str>)
	DD	20
	DD	string$492
string$492:
LABELTYPE <^*[array(20,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	118,109,117,108,50,95,103,101,110,32,102,97,105,108,101,100,33,33,33,10
gbl$495:
COERCE	pack(<3>,?,<str>)
	DD	3
	DD	string$496
string$496:
LABELTYPE <^*[array(3,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" * "
gbl$499:
COERCE	pack(<3>,?,<str>)
	DD	3
	DD	string$500
string$500:
LABELTYPE <^*[array(3,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" = "
gbl$503:
COERCE	pack(<4>,?,<str>)
	DD	4
	DD	string$504
string$504:
LABELTYPE <^*[array(4,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" != "
gbl$507:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$508
string$508:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$733:
COERCE	pack(<19>,?,<str>)
	DD	19
	DD	string$734
string$734:
LABELTYPE <^*[array(19,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"vmul_gen generated "
gbl$737:
COERCE	pack(<16>,?,<str>)
	DD	16
	DD	string$738
string$738:
LABELTYPE <^*[array(16,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	32,110,101,119,32,102,117,110,99,116,105,111,110,115,46,10
gbl$740:
COERCE	pack(<35>,?,<str>)
	DD	35
	DD	string$741
string$741:
LABELTYPE <^*[array(35,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	98,101,110,101,102,105,116,32,104,105,115,116,111,103,114,97,109,32,40,108,101,97,115,116,32,116,111,32,109,111,115,116,41,58,10
gbl$751:
COERCE	pack(<11>,?,<str>)
	DD	11
	DD	string$752
string$752:
LABELTYPE <^*[array(11,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" benefit * "
gbl$755:
COERCE	pack(<11>,?,<str>)
	DD	11
	DD	string$756
string$756:
LABELTYPE <^*[array(11,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	32,102,117,110,99,116,105,111,110,115,10
gbl$758:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$759
string$759:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$792:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$793
string$793:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"["
gbl$796:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$797
string$797:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" "
gbl$800:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$801
string$801:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" "
gbl$804:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$805
string$805:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" "
gbl$808:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$809
string$809:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"]"
gbl$822:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$823
string$823:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	" "
gbl$825:
COERCE	pack(<1>,?,<str>)
	DD	1
	DD	string$826
string$826:
LABELTYPE <^*[array(1,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	10
gbl$836:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$837
string$837:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$845:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$846
string$846:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$854:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$855
string$855:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$863:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$864
string$864:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$866:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$867
string$867:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$877:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$878
string$878:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$886:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$887
string$887:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$895:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$896
string$896:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$904:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$905
string$905:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."
gbl$907:
COERCE	pack(<13>,?,<str>)
	DD	13
	DD	string$908
string$908:
LABELTYPE <^*[array(13,B1^rw)]>
COERCE	array(0,0,<B1^rw>,?)
	DB	"Matrix error."

	_end_TAL
	END
